var s = new Array()

s[0] = "Asphyre.Archives^Asphyre.Archives.html^Asphyre Archive format with its functions and utilities that can be used for storing images, textures, and application's data.^ The information is compressed to save disk space and optionally encrypted to ensure confidentiality and protect the contents from unauthorized usage. ^0"
s[1] = "Asphyre.Archives.TAsphyreArchive^Asphyre.Archives.TAsphyreArchive.html^Asphyre archive implementation class that provides methods for reading, writing, deleting and renaming records in compressed (and possibly encrypted) archive; Zlib is used for data compression, CRC32 is used for data integrity checks and Asphyre's native 128-bit XTEA cipher is used for data encryption.^ <br> <br> Note that this implementation is not meant for concurrent access so modifying archives from different threads and/or applications simultaneously is not supported. The data can be read by different threads/applications only if it is not being written/updated at the same time and it is the application's responsibility to ensure this. ^0"
s[2] = "Asphyre.Archives.TAsphyreArchive.IndexOf^Asphyre.Archives.TAsphyreArchive.html#IndexOf^Returns index of the record that has the specified key.^ If no record with such key exists, the returned value is -1.    ^0"
s[3] = "Asphyre.Archives.TAsphyreArchive.OpenFile^Asphyre.Archives.TAsphyreArchive.html#OpenFile^Opens the specified file and refreshes the record list.^ If the specified file is already open, this method does nothing (in this case, <a class=\"normal\"  href=\"Asphyre.Archives.TAsphyreArchive.html#Refresh\">Refresh</a> can be called to explicitly refresh the record list).    ^0"
s[4] = "Asphyre.Archives.TAsphyreArchive.ReadMemStream^Asphyre.Archives.TAsphyreArchive.html#ReadMemStream^Reads existing record from archive with the given key to the specified &quot;memory&quot; stream.^ The difference between this method and <a class=\"normal\"  href=\"Asphyre.Archives.TAsphyreArchive.html#ReadStream\">ReadStream</a> is the explicit use of <i>TMemoryStream</i> making this method faster to execute. The entire contents of the given stream are overwritten. If the method succeeds, <code>True</code> is returned and the specified stream will contain the record's data block with position set to zero. If the method fails, <code>False</code> is returned and the stream will be empty.    ^0"
s[5] = "Asphyre.Archives.TAsphyreArchive.ReadRecord^Asphyre.Archives.TAsphyreArchive.html#ReadRecord^Reads existing record with the specified key from the archive and returns its raw data.^ The memory is allocated within this method and it's the caller responsibility to release the memory after it is no longer being used by using <code>FreeNullMem(Data)</code>. If the method succeeds, <code>True</code> is returned; if the method fails, <code>False</code> is returned, <i>Data</i> is set to <code>Nil</code> and <i>DataSize</i> is set to zero.    ^0"
s[6] = "Asphyre.Archives.TAsphyreArchive.ReadStream^Asphyre.Archives.TAsphyreArchive.html#ReadStream^Reads existing record from archive with the given key to the specified stream.^ If the method succeeds, <code>True</code> is returned and the data block will be written to stream at current position. If the method fails, <code>False</code> is returned and the stream remains unchanged.    ^0"
s[7] = "Asphyre.Archives.TAsphyreArchive.RemoveRecord^Asphyre.Archives.TAsphyreArchive.html#RemoveRecord^Removes the given record from archive.^ The returned value is <code>True</code> if the method succeeds and <code>False</code> otherwise.    ^0"
s[8] = "Asphyre.Archives.TAsphyreArchive.RenameRecord^Asphyre.Archives.TAsphyreArchive.html#RenameRecord^Changes the name of the given record updating the record table and writing it to disk.^ The returned value is <code>True</code> if the method succeeds and <code>False</code> otherwise.    ^0"
s[9] = "Asphyre.Archives.TAsphyreArchive.WriteRecord^Asphyre.Archives.TAsphyreArchive.html#WriteRecord^Writes a new record with the specified key and data.^ If a record with the same name exists, it will be removed first. If the specified date/time is zero or no date/time is specified, the current date and time will be used instead. The method returns <code>True</code> if the record has been written successfully or <code>False</code> if there was a problem.    ^0"
s[10] = "Asphyre.Archives.TAsphyreArchive.WriteStream^Asphyre.Archives.TAsphyreArchive.html#WriteStream^Writes a new record with the specified key from the given stream.^ The stream's current position is used and the remaining data is read; therefore, to use the entire stream, make sure to call <code>Stream.Seek(0, soFromBeginning)</code> first. If a record with the same name exists, it will be removed first. If the specified date/time is zero or no date/time is specified, the current date and time will be used instead. The method returns <code>True</code> if the record has been written successfully or <code>False</code> if there was a problem.    ^0"
s[11] = "Asphyre.Archives.TAsphyreArchive.Refresh^Asphyre.Archives.TAsphyreArchive.html#Refresh^Reloads the record table for the given archive, updating the list of records.^ This can be used to ensure that the list of records is current.    ^0"
s[12] = "Asphyre.Archives.TAsphyreArchive.FileName^Asphyre.Archives.TAsphyreArchive.html#FileName^The file name of the archive.^ This can be interpreted differently depending how the global variable <a class=\"normal\"  href=\"Asphyre.Archives.html#ArchiveTypeAccess\">ArchiveTypeAccess</a> is set. Setting this property may cause the list of records to be refreshed when a different file name is being set; <a class=\"normal\"  href=\"Asphyre.Archives.TAsphyreArchive.html#Ready\">Ready</a> property will also be updated as well. For a more flexible and controlled approach, consider using <a class=\"normal\"  href=\"Asphyre.Archives.TAsphyreArchive.html#OpenFile\">OpenFile</a> method instead. ^0"
s[13] = "Asphyre.Archives.TAsphyreArchive.FileSize^Asphyre.Archives.TAsphyreArchive.html#FileSize^Physical size of the archive on disk.^ ^0"
s[14] = "Asphyre.Archives.TAsphyreArchive.OpenMode^Asphyre.Archives.TAsphyreArchive.html#OpenMode^How the file should be handled and accessed.^ ^0"
s[15] = "Asphyre.Archives.TAsphyreArchive.Password^Asphyre.Archives.TAsphyreArchive.html#Password^128-bit password that will be used for reading and writing encrypted records within archive.^ If set to <code>Nil</code> (by default), the data is stored unsecurely. Secure records require this password to be set, trying to read them without password will fail. The data pointed by this property should have 16 bytes or 128 bits, the encryption uses Asphyre's native 128-bit XTEA cipher. ^0"
s[16] = "Asphyre.Archives.TAsphyreArchive.Ready^Asphyre.Archives.TAsphyreArchive.html#Ready^Indicates whether the archive with name set in <a class=\"normal\"  href=\"Asphyre.Archives.TAsphyreArchive.html#FileName\">FileName</a> has been opened property and can be used for reading and/or writing records.^ ^0"
s[17] = "Asphyre.Archives.TAsphyreArchive.RecordChecksum^Asphyre.Archives.TAsphyreArchive.html#RecordChecksum^Returns the record's CRC32 Checksum for the given index.^ If the index is outside of [0..(RecordCount - 1)] range, the returned value is zero. ^0"
s[18] = "Asphyre.Archives.TAsphyreArchive.RecordCount^Asphyre.Archives.TAsphyreArchive.html#RecordCount^Number of existing records in the archive.^ ^0"
s[19] = "Asphyre.Archives.TAsphyreArchive.RecordDate^Asphyre.Archives.TAsphyreArchive.html#RecordDate^Returns the record date and time for the given index.^ If the index is outside of [0..(RecordCount - 1)] range, the returned value is zero. ^0"
s[20] = "Asphyre.Archives.TAsphyreArchive.RecordKey^Asphyre.Archives.TAsphyreArchive.html#RecordKey^Returns key of the record specified by the given index, which should be in range of [0..(RecordCount - 1)].^ If the index is outside of valid range, empty string will be returned. ^0"
s[21] = "Asphyre.Archives.TAsphyreArchive.RecordOrigSize^Asphyre.Archives.TAsphyreArchive.html#RecordOrigSize^Returns the original (uncompressed) record's size for the given index.^ If the index is outside of [0..(RecordCount - 1)] range, the returned size is zero. ^0"
s[22] = "Asphyre.Archives.TAsphyreArchive.RecordPhysSize^Asphyre.Archives.TAsphyreArchive.html#RecordPhysSize^Returns the physical record's size on disk for the given index, which does not include its internal header or space used in record table.^ If the index is outside of [0..(RecordCount - 1)] range, the returned size is zero. ^0"
s[23] = "Asphyre.Archives.TAsphyreArchive.RecordSecure^Asphyre.Archives.TAsphyreArchive.html#RecordSecure^Returns whether the record at the specified index is encrypted or not.^ If the index is outside of [0..(RecordCount - 1)] range, the returned value is <code>False</code>. ^0"
s[24] = "Asphyre.Archives.TAsphyreArchive.RecordType^Asphyre.Archives.TAsphyreArchive.html#RecordType^Returns the record type for the given index.^ If the index is outside of [0..(RecordCount - 1)] range, the returned type is <code>artFile</code>. ^0"
s[25] = "Asphyre.Archives.TArchiveOpenMode^Asphyre.Archives.html#TArchiveOpenMode^Handling mode for Asphyre archives that indicates possible usage scenarios and limitations.^  aomUpdate The archive will be used both for reading and writing.  <br> <br>  aomReadOnly The archive will be used for reading data.  No modifications are allowed. <br> <br>  aomOverwrite The archive will be overwritten with blank new file; once this is accomplished, the mode will be changed to <code>aomUpdate</code>.  <br> <br> ^0"
s[26] = "Asphyre.Archives.TArchiveRecordType^Asphyre.Archives.html#TArchiveRecordType^Explicit type of the archive's record, which determines how the data should be interpreted.^  artFile The record is a file or binary data.  <br> <br>  artImage The record is a native Asphyre image that has been prepared and pre-formatted for loading directly to hardware's memory.  <br> <br>  artFont The record is a binary Asphyre font that has been optimized for performance and has its accompanying image data prepared to be loaded to hardware's memory.  <br> <br> ^0"
s[27] = "Asphyre.Archives.TArchiveTypeAccess^Asphyre.Archives.html#TArchiveTypeAccess^File access type when handled by Asphyre, indicating how the archive's file name should be interpreted.^  ataAnyFile The file name is a typical name as used by the underlying OS, which should include its full path.  <br> <br>  ataResource The file name is the name of resource that is integrated directly to the application's executable.  Only the actual name will be used for resource name, any existing paths from the name will be stripped. <br> <br>  ataPackaged The file name which is distributed in the same folder as the application's executable or within the same bundle on Mac OS.  The file name will be treated as regular file name with any existing paths stripped and the path to the executable added. <br> <br> ^0"
s[28] = "Asphyre.Archives.ArchiveHInstance^Asphyre.Archives.html#ArchiveHInstance^The instance handle of the application's thread.^ This parameter must be specified when <a class=\"normal\"  href=\"Asphyre.Archives.html#ArchiveTypeAccess\">ArchiveTypeAccess</a> is set to <code>ataResource</code> for reading data from resources. Typically, it should be set to application's <i>hInstance</i>. ^0"
s[29] = "Asphyre.Archives.ArchiveTypeAccess^Asphyre.Archives.html#ArchiveTypeAccess^Global access type for any instance of <a class=\"normal\"  href=\"Asphyre.Archives.TAsphyreArchive.html\">TAsphyreArchive</a>, controlling how the archive's file name is interpreted.^ ^0"
s[30] = "Asphyre.Archives.Auth^Asphyre.Archives.Auth.html^Archive password authentication management, where passwords are provided for encrypted Asphyre archives.^ ^0"
s[31] = "Asphyre.Archives.Auth.TAsphyreAuth^Asphyre.Archives.Auth.TAsphyreAuth.html^Archive password authentication class that implements observer pattern for providing passwords to archives for encrypting and decrypting sensitive information.^ ^0"
s[32] = "Asphyre.Archives.Auth.TAsphyreAuth.Authorize^Asphyre.Archives.Auth.TAsphyreAuth.html#Authorize^Provides password authentication to the provided Asphyre archive by calling existing callback functions to provide the password.^ If the password has been provided, the returned value is <code>True</code> and <code>False</code> otherwise.    ^0"
s[33] = "Asphyre.Archives.Auth.TAsphyreAuth.Subscribe^Asphyre.Archives.Auth.TAsphyreAuth.html#Subscribe^Subscribes a new callback function that will provide secure password authentication to Asphyre archives.^ The returned ID can be used to unsubscribe the callback function.    ^0"
s[34] = "Asphyre.Archives.Auth.TAsphyreAuth.ProvideKey^Asphyre.Archives.Auth.TAsphyreAuth.html#ProvideKey^Provides the password to the archive that is currently being authenticated.^ The <code>Key</code> parameter should point to a valid memory block of 16 bytes that contain 128-bit password.    ^0"
s[35] = "Asphyre.Archives.Auth.TAsphyreAuth.Unauthorize^Asphyre.Archives.Auth.TAsphyreAuth.html#Unauthorize^Removes and burns the provided password for the existing Asphyre archive so that the password cannot be acquired by a third party.^    ^0"
s[36] = "Asphyre.Archives.Auth.TAsphyreAuth.Unsubscribe^Asphyre.Archives.Auth.TAsphyreAuth.html#Unsubscribe^Removes the subscribed callback function from the list.^    ^0"
s[37] = "Asphyre.Archives.Auth.TAuthCallback^Asphyre.Archives.Auth.html#TAuthCallback^Archive password authentication callback function.^ In this event it is necessary to call <code>ProvideKey</code> function of <a class=\"normal\"  href=\"Asphyre.Archives.Auth.TAsphyreAuth.html\">TAsphyreAuth</a> to provide the password for archive access.      Sender Sender class that requires secure access to sensitive content in Asphyre archive. Auth Reference to authentication class that handles the transaction. Archive Reference to Asphyre's archive class that is currently being accessed. AuthType The required authentication type.  ^0"
s[38] = "Asphyre.Archives.Auth.TAuthType^Asphyre.Archives.Auth.html#TAuthType^Password authentication type for Asphyre archives.^  atProvideKey Indicates that the secure key should be provided for decrypting sensitive content.  <br> <br>  atBurnKey Indicates that the secure key should be destroyed as it is no longer necessary to prevent third party from acquiring it.  The memory used to store the key should be replaced with zeros or other random data. ^0"
s[39] = "Asphyre.Archives.Auth.Auth^Asphyre.Archives.Auth.html#Auth^Instance of <a class=\"normal\"  href=\"Asphyre.Archives.Auth.TAsphyreAuth.html\">TAsphyreAuth</a> that is used by Asphyre components for providing passwords to Asphyre archives for encrypting and decrypting secure information.^ ^0"
s[40] = "Asphyre.Canvas^Asphyre.Canvas.html^2D rendering canvas specification and functions for drawing lines, filled shapes and images using gradient colors and alpha transparency.^ ^0"
s[41] = "Asphyre.Canvas.TAsphyreCanvas^Asphyre.Canvas.TAsphyreCanvas.html^2D canvas specification for rendering points, lines, filled shapes and images using gradient color fills, different blending effects, and alpha transparency.^ ^0"
s[42] = "Asphyre.Canvas.TAsphyreCanvas.Circle^Asphyre.Canvas.TAsphyreCanvas.html#Circle^Draws circle at the given position, radius and color.^ This routine uses <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#Line\">Line</a> routine. <code>Steps</code> parameter indicates the number of divisions in the circle.    ^0"
s[43] = "Asphyre.Canvas.TAsphyreCanvas.DrawIndexedTriangles^Asphyre.Canvas.TAsphyreCanvas.html#DrawIndexedTriangles^Draws multiple filled triangles using the specified vertices, vertex colors and index buffers.^ This is a low-level routine and can be used for drawing complex shapes quickly and efficiently.    ^0"
s[44] = "Asphyre.Canvas.TAsphyreCanvas.Ellipse^Asphyre.Canvas.TAsphyreCanvas.html#Ellipse^Draws ellipse at the given position, radius and color.^ This routine uses <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#Line\">Line</a> routine. <code>Steps</code> parameter indicates the number of divisions in the ellipse.    ^0"
s[45] = "Asphyre.Canvas.TAsphyreCanvas.FillArc^Asphyre.Canvas.TAsphyreCanvas.html#FillArc^Draws filled arc at the given coordinates and radius.^ The arc begins at <code>InitPhi</code> and ends at <code>EndPhi</code> (in radians), subdivided into a number of triangles specified in <code>Steps</code>. The arc's shape is filled with 4-color gradient.    ^0"
s[46] = "Asphyre.Canvas.TAsphyreCanvas.FillArc^Asphyre.Canvas.TAsphyreCanvas.html#FillArc^Draws filled arc at the given position and radius.^ The arc begins at <code>InitPhi</code> and ends at <code>EndPhi</code> (in radians), subdivided into a number of triangles specified in <code>Steps</code>. The arc's shape is filled with 4-color gradient.    ^0"
s[47] = "Asphyre.Canvas.TAsphyreCanvas.FillCircle^Asphyre.Canvas.TAsphyreCanvas.html#FillCircle^Draws filled circle at the given position and radius.^ The circle is subdivided into a number of triangles specified in <code>Steps</code>. The shape of circle is filled with 4-color gradient.    ^0"
s[48] = "Asphyre.Canvas.TAsphyreCanvas.FillEllipse^Asphyre.Canvas.TAsphyreCanvas.html#FillEllipse^Draws filled ellipse at the given position and radius.^ The ellipse is subdivided into a number of triangles specified in <code>Steps</code>. The shape of ellipse is filled with 4-color gradient.    ^0"
s[49] = "Asphyre.Canvas.TAsphyreCanvas.FillHexagon^Asphyre.Canvas.TAsphyreCanvas.html#FillHexagon^Draws hexagon where vertices are spaced 0.5 pixels apart from its center (so diameter is 1) in all directions, multiplied by the given matrix and filled with gradient of six colors at the corresponding vertices.^ The size, position and rotation of hexagon can be given using one or a combination of several 3x3 matrices multiplied together.    ^0"
s[50] = "Asphyre.Canvas.TAsphyreCanvas.FillQuad^Asphyre.Canvas.TAsphyreCanvas.html#FillQuad^Draws filled quad between the specified vertices and vertex colors.^    ^0"
s[51] = "Asphyre.Canvas.TAsphyreCanvas.FillRect^Asphyre.Canvas.TAsphyreCanvas.html#FillRect^Draws rectangle at the given coordinates filled with solid color.^    ^0"
s[52] = "Asphyre.Canvas.TAsphyreCanvas.FillRect^Asphyre.Canvas.TAsphyreCanvas.html#FillRect^Draws rectangle filled with the specified 4-color gradient.^    ^0"
s[53] = "Asphyre.Canvas.TAsphyreCanvas.FillRect^Asphyre.Canvas.TAsphyreCanvas.html#FillRect^Draws rectangle filled with solid color.^    ^0"
s[54] = "Asphyre.Canvas.TAsphyreCanvas.FillRibbon^Asphyre.Canvas.TAsphyreCanvas.html#FillRibbon^Draws filled ribbon at the given position between inner and outer radiuses.^ The ribbon begins at <code>InitPhi</code> and ends at <code>EndPhi</code> (in radians), subdivided into a number of triangles specified in <code>Steps</code>. The ribbons's shape is filled with 4-color gradient.    ^0"
s[55] = "Asphyre.Canvas.TAsphyreCanvas.FillRibbon^Asphyre.Canvas.TAsphyreCanvas.html#FillRibbon^Draws filled ribbon at the given position between inner and outer radiuses.^ The ribbon begins at <code>InitPhi</code> and ends at <code>EndPhi</code> (in radians), subdivided into a number of triangles specified in <code>Steps</code>. The ribbons's shape is filled with continuous gradient set by three pairs of inner and outer colors.    ^0"
s[56] = "Asphyre.Canvas.TAsphyreCanvas.FillTri^Asphyre.Canvas.TAsphyreCanvas.html#FillTri^Draws filled triangle between the specified vertices and vertex colors.^    ^0"
s[57] = "Asphyre.Canvas.TAsphyreCanvas.Flush^Asphyre.Canvas.TAsphyreCanvas.html#Flush^Flushes the canvas cache and presents the pending primitives on the screen or render target.^ This can be useful to make sure that nothing remains in canvas cache before starting to draw, for instance, a 3D scene.    ^0"
s[58] = "Asphyre.Canvas.TAsphyreCanvas.FrameHexagon^Asphyre.Canvas.TAsphyreCanvas.html#FrameHexagon^Draws lines between each vertex in hexagon.^ The vertices are spaced 0.5 pixels apart from its center (so diameter is 1) in all directions, multiplied by the given matrix and filled with gradient of six colors at the corresponding vertices. The size, position and rotation of hexagon can be given using one or a combination of several 3x3 matrices multiplied together.    ^0"
s[59] = "Asphyre.Canvas.TAsphyreCanvas.FrameRect^Asphyre.Canvas.TAsphyreCanvas.html#FrameRect^Draws lines that form the specified rectangle using colors from the given 4-color gradient.^ This primitive uses filled shapes and not actual lines for pixel-perfect mapping.    ^0"
s[60] = "Asphyre.Canvas.TAsphyreCanvas.FrameRect^Asphyre.Canvas.TAsphyreCanvas.html#FrameRect^Draws lines between four corners of the given rectangle where the lines are filled using 4-color gradient.^ This method uses filled shapes instead of line primitives for pixel-perfect mapping but assumes that the four vertex points are aligned to form rectangle.    ^0"
s[61] = "Asphyre.Canvas.TAsphyreCanvas.HorizLine^Asphyre.Canvas.TAsphyreCanvas.html#HorizLine^Draws horizontal line using the specified coordinates and filled with solid color.^ This primitive uses a filled shape and not line primitive for pixel-perfect mapping.    ^0"
s[62] = "Asphyre.Canvas.TAsphyreCanvas.HorizLine^Asphyre.Canvas.TAsphyreCanvas.html#HorizLine^Draws horizontal line using the specified coordinates and filled with two color gradient.^ This primitive uses a filled shape and not line primitive for pixel-perfect mapping.    ^0"
s[63] = "Asphyre.Canvas.TAsphyreCanvas.Line^Asphyre.Canvas.TAsphyreCanvas.html#Line^Draws line between the two specified 2D floating-point vectors using solid color.^    ^0"
s[64] = "Asphyre.Canvas.TAsphyreCanvas.Line^Asphyre.Canvas.TAsphyreCanvas.html#Line^Draws line between the specified coordinates using solid color.^    ^0"
s[65] = "Asphyre.Canvas.TAsphyreCanvas.Line^Asphyre.Canvas.TAsphyreCanvas.html#Line^Draws line between the two specified 2D floating-point vectors using gradient of two colors.^    ^0"
s[66] = "Asphyre.Canvas.TAsphyreCanvas.LineArray^Asphyre.Canvas.TAsphyreCanvas.html#LineArray^Draws series of lines between specified vertices using solid color.^    ^0"
s[67] = "Asphyre.Canvas.TAsphyreCanvas.PutPixel^Asphyre.Canvas.TAsphyreCanvas.html#PutPixel^Draws a single pixel on the screen or render target using the specified 2D floating-point vector.^    ^0"
s[68] = "Asphyre.Canvas.TAsphyreCanvas.PutPixel^Asphyre.Canvas.TAsphyreCanvas.html#PutPixel^Draws a single pixel on the screen or render target using the specified coordinates.^    ^0"
s[69] = "Asphyre.Canvas.TAsphyreCanvas.QuadHole^Asphyre.Canvas.TAsphyreCanvas.html#QuadHole^Draws a filled rectangle at the given position and size with a hole (in form of ellipse) inside at the given center and radius.^ The quality of the hole is defined by the value of <code>Steps</code> in number of subdivisions. This entire shape is filled with gradient starting from outer color at the edges of rectangle and inner color ending at the edge of hole. This shape can be particularly useful for highlighting items on the screen by darkening the entire area except the one inside the hole.    ^0"
s[70] = "Asphyre.Canvas.TAsphyreCanvas.ResetStates^Asphyre.Canvas.TAsphyreCanvas.html#ResetStates^Resets all the states necessary for canvas operation.^ This can be useful when custom state changes have been made (for instance, in a 3D scene) so to restore the canvas to its working condition this method should be called.    ^0"
s[71] = "Asphyre.Canvas.TAsphyreCanvas.TexMap^Asphyre.Canvas.TAsphyreCanvas.html#TexMap^Draws textured rectangle at the given vertices and multiplied by the specified 4-color gradient.^ The texture must be set prior to this call by one of <code>UseTexture[...]</code> or <code>UseImage[...]</code> calls. For every call of <code>TexMap</code> there must be a corresponding <code>UseTexture[...]</code> or <code>UseImage[...]</code> call to specify the image or texture. All pixels of the rendered texture are multiplied by the gradient color before applying alpha-blending. If the texture has no alpha-channel present, alpha value of the gradient will be used instead.    ^0"
s[72] = "Asphyre.Canvas.TAsphyreCanvas.UseImage^Asphyre.Canvas.TAsphyreCanvas.html#UseImage^Defines the specified image with one of its textures to be used in next call to <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#TexMap\">TexMap</a>.^ The coordinates inside the texture are defined in logical units in range of [0..1].    ^0"
s[73] = "Asphyre.Canvas.TAsphyreCanvas.UseImagePt^Asphyre.Canvas.TAsphyreCanvas.html#UseImagePt^Defines the specified image with one of its patterns to be used in next call to <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#TexMap\">TexMap</a>.^ If the image has none or just one pattern, the value of <code>Pattern</code> should be set to zero; in this case, the entire texture is used instead of pattern.    ^0"
s[74] = "Asphyre.Canvas.TAsphyreCanvas.UseImagePt^Asphyre.Canvas.TAsphyreCanvas.html#UseImagePt^Defines the specified image with one of its patterns to be used in next call to <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#TexMap\">TexMap</a>.^ Only part of pattern is used for rendering defined by the given coordinates; these coordinates can also be mirrored horizontally and/or flipped vertically, if needed. If the image has no or just one pattern, the value of <code>Pattern</code> should be set to zero; in this case, the entire texture is used instead of pattern.    ^0"
s[75] = "Asphyre.Canvas.TAsphyreCanvas.UseImagePx^Asphyre.Canvas.TAsphyreCanvas.html#UseImagePx^Defines the specified image with one of its textures to be used in next call to <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#TexMap\">TexMap</a>.^ The coordinates inside the texture are defined in pixels using floating-point coordinates.    ^0"
s[76] = "Asphyre.Canvas.TAsphyreCanvas.UseTexture^Asphyre.Canvas.TAsphyreCanvas.html#UseTexture^Defines the specified texture to be used in next call to <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#TexMap\">TexMap</a>.^ The coordinates inside the texture are defined in logical units in range of [0..1].    ^0"
s[77] = "Asphyre.Canvas.TAsphyreCanvas.UseTexturePx^Asphyre.Canvas.TAsphyreCanvas.html#UseTexturePx^Defines the specified texture to be used in next call to <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#TexMap\">TexMap</a>.^ The coordinates inside the texture are defined in pixels using floating-point coordinates.    ^0"
s[78] = "Asphyre.Canvas.TAsphyreCanvas.VertLine^Asphyre.Canvas.TAsphyreCanvas.html#VertLine^Draws vertical line using the specified coordinates and filled with two color gradient.^ This primitive uses a filled shape and not line primitive for pixel-perfect mapping.    ^0"
s[79] = "Asphyre.Canvas.TAsphyreCanvas.VertLine^Asphyre.Canvas.TAsphyreCanvas.html#VertLine^Draws vertical line using the specified coordinates and filled with solid color.^ This primitive uses a filled shape and not line primitive for pixel-perfect mapping.    ^0"
s[80] = "Asphyre.Canvas.TAsphyreCanvas.WireQuad^Asphyre.Canvas.TAsphyreCanvas.html#WireQuad^Draws lines between the specified vertices (making it a wireframe quad) and vertex colors.^    ^0"
s[81] = "Asphyre.Canvas.TAsphyreCanvas.WuLine^Asphyre.Canvas.TAsphyreCanvas.html#WuLine^Draws antialiased &quot;wu-line&quot; using <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#PutPixel\">PutPixel</a> primitive between the specified 2D floating-point vectors using two color gradient.^    ^0"
s[82] = "Asphyre.Canvas.TAsphyreCanvas.Antialias^Asphyre.Canvas.TAsphyreCanvas.html#Antialias^Determines whether antialiasing should be used when stretching images and textures.^ If this parameter is set to <code>False</code>, no antialiasing will be made and stretched images will appear pixelated. There is little to none performance gain from not using antialiasing, so this parameter should typically be set to <code>True</code>. ^0"
s[83] = "Asphyre.Canvas.TAsphyreCanvas.CacheStall^Asphyre.Canvas.TAsphyreCanvas.html#CacheStall^Number of times the rendering cache was reseted during last rendering frame.^ Each cache reset is typically a time-consuming operation so high number of such events could be detrimental to the application's rendering performance. If this parameter happens to be considerably high (above 20) in the rendered scene, the rendering code should be revised for better grouping of images, shapes and blending types. ^0"
s[84] = "Asphyre.Canvas.TAsphyreCanvas.ClipRect^Asphyre.Canvas.TAsphyreCanvas.html#ClipRect^The clipping rectangle in which the rendering will be made.^ This can be useful for restricting the rendering to a certain part of screen. ^0"
s[85] = "Asphyre.Canvas.TAsphyreCanvas.DeviceScale^Asphyre.Canvas.TAsphyreCanvas.html#DeviceScale^Determines the current scale of device to be rendered on.^ This value should be typically taken from <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html\">TAsphyreDevice</a> when rendering on the screen, or set to 1.0 when rendering on render target. Additionally, this value can be set to other values to compensate for screen's DPI. ^0"
s[86] = "Asphyre.Canvas.TAsphyreCanvas.ExternalScale^Asphyre.Canvas.TAsphyreCanvas.html#ExternalScale^Determines the scale that user (or application) uses for rendering on this canvas.^ If this scale matches <a class=\"normal\"  href=\"Asphyre.Canvas.TAsphyreCanvas.html#DeviceScale\">DeviceScale</a>, then pixel to pixel mapping is achieved. ^0"
s[87] = "Asphyre.Canvas.TAsphyreCanvas.MipMapping^Asphyre.Canvas.TAsphyreCanvas.html#MipMapping^Determines whether mipmapping should be used when rendering images and textures.^ Mipmapping can improve visual quality when extreme shrinking of original images is made at the expense of performance. ^0"
s[88] = "Asphyre.Canvas.TBlendingEffect^Asphyre.Canvas.html#TBlendingEffect^The blending effect that should be applied when drawing 2D primitives.^  beUnknown Undefined blending effect.  This effect type is used internally and should not be used elsewhere. <br> <br>  beNormal Normal blending effect.  If drawing primitive has alpha-channel supplied, it will be alpha-blended to the destination depending on alpha transparency. <br> <br>  beShadow Shadow drawing effect.  The screen (or render target) will be multiplied by alpha-channel of the source primitive; thus, the rendered image will look like a shadow. <br> <br>  beAdd Addition blending effect.  The source primitive will be multiplied by its alpha-channel and then added to the destination using saturation. <br> <br>  beMultiply Multiplication blending effect.  The screen (or render target) will be multiplied by the source primitive. <br> <br>  beInvMultiply Inverse multiplication effect.  The screen (or render target) will be multiplied by an inverse of the source primitive. <br> <br>  beSrcColor Source color blending effect.  Instead of using alpha-channel, the grayscale value of source primitive's pixels will be used as an alpha value for blending on destination. <br> <br>  beSrcColorAdd Source color addition effect.  Instead of using alpha-channel, the grayscale value of source primitive's pixels will be used as an alpha value for multiplying source pixels, which will then be added to destination using saturation. <br> <br> ^0"
s[89] = "Asphyre.Colors^Asphyre.Colors.html^Types, classes and utility routines working with colors defined using floating-point numbers.^ ^0"
s[90] = "Asphyre.Colors.TAsphyreColor^Asphyre.Colors.TAsphyreColor.html^High-fidelity color type using floating-point numbers.^     ^0"
s[91] = "Asphyre.Colors.TAsphyreColor.r^Asphyre.Colors.TAsphyreColor.html#r^Red component typically in [0, 1] range.^ ^0"
s[92] = "Asphyre.Colors.TAsphyreColor.g^Asphyre.Colors.TAsphyreColor.html#g^Green component typically in [0, 1] range.^ ^0"
s[93] = "Asphyre.Colors.TAsphyreColor.b^Asphyre.Colors.TAsphyreColor.html#b^Blue component typically in [0, 1] range.^ ^0"
s[94] = "Asphyre.Colors.TAsphyreColor.a^Asphyre.Colors.TAsphyreColor.html#a^Alpha-channel component typically in [0, 1] range.^ ^0"
s[95] = "Asphyre.Colors.TAsphyreColors^Asphyre.Colors.TAsphyreColors.html^List of high-fidelity color types that use floating-point numbers.^ ^0"
s[96] = "Asphyre.Colors.TAsphyreColors.Add^Asphyre.Colors.TAsphyreColors.html#Add^Adds the given color to the list.^    ^0"
s[97] = "Asphyre.Colors.TAsphyreColors.AddFrom^Asphyre.Colors.TAsphyreColors.html#AddFrom^Adds all elements from the source list to this one.^    ^0"
s[98] = "Asphyre.Colors.TAsphyreColors.CopyFrom^Asphyre.Colors.TAsphyreColors.html#CopyFrom^Copies the entire contents from the source list to this one, creating an exact copy.^    ^0"
s[99] = "Asphyre.Colors.TAsphyreColors.Remove^Asphyre.Colors.TAsphyreColors.html#Remove^Removes one element from the list given by its index, which should be in range of [0..(Count - 1)].^ If the index is outside of valir range, this method does nothing.    ^0"
s[100] = "Asphyre.Colors.TAsphyreColors.RemoveAll^Asphyre.Colors.TAsphyreColors.html#RemoveAll^Removes all elements from the list.^    ^0"
s[101] = "Asphyre.Colors.TAsphyreColors.Count^Asphyre.Colors.TAsphyreColors.html#Count^The number of elements in the list.^ ^0"
s[102] = "Asphyre.Colors.TAsphyreColors.Items^Asphyre.Colors.TAsphyreColors.html#Items^Provides access to individual colors in the list by using each item's index, which should be in range of [0..(Count - 1)].^ If the index is outside of valid range, the returned value is <code>Nil</code>. ^0"
s[103] = "Asphyre.Colors.TAsphyreColors.MemAddr^Asphyre.Colors.TAsphyreColors.html#MemAddr^Pointer to the first element in the list.^ If the list is empty, the returned value is <code>Nil</code>. ^0"
s[104] = "Asphyre.Colors.cBlend^Asphyre.Colors.html#cBlend^Interpolates between two given colors producing the resulting mixture.^ <code>Alpha</code> should be specified in [0..255] range.    ^0"
s[105] = "Asphyre.Colors.cClamp^Asphyre.Colors.html#cClamp^Clamps the individual components of the given color so that the resulting color has all its components within [0..1] range.^    ^0"
s[106] = "Asphyre.Colors.cColor^Asphyre.Colors.html#cColor^Constructs <a class=\"normal\"  href=\"Asphyre.Colors.TAsphyreColor.html\">TAsphyreColor</a> using individual components.^    ^0"
s[107] = "Asphyre.Colors.cColor^Asphyre.Colors.html#cColor^Constructs <a class=\"normal\"  href=\"Asphyre.Colors.TAsphyreColor.html\">TAsphyreColor</a> where red, green and blue components are set to the given grayscale value and alpha-channel specified separately.^    ^0"
s[108] = "Asphyre.Colors.cColor^Asphyre.Colors.html#cColor^Constructs <a class=\"normal\"  href=\"Asphyre.Colors.TAsphyreColor.html\">TAsphyreColor</a> where red, green and blue components are set to the given grayscale value and alpha-channel set to one.^    ^0"
s[109] = "Asphyre.Colors.cCubic^Asphyre.Colors.html#cCubic^Computes cubic interpolation between four colors for each individual components using Catmull-Rom interpolation.^ <code>Theta</code> should be specified in [0..1] range.    ^0"
s[110] = "Asphyre.Colors.cDarken^Asphyre.Colors.html#cDarken^Multiplies red, green and blue channels of the given color by the specified coefficient and returns the result.^    ^0"
s[111] = "Asphyre.Colors.cGrayValue^Asphyre.Colors.html#cGrayValue^Calculates the gray value that appear in perceptual terms from the source color.^    ^0"
s[112] = "Asphyre.Colors.cLerp^Asphyre.Colors.html#cLerp^Interpolates between two given colors producing the resulting mixture.^ <code>Alpha</code> should be specified in [0..1] range.    ^0"
s[113] = "Asphyre.Colors.cModulateAlpha^Asphyre.Colors.html#cModulateAlpha^Multiplies alpha-channel from the given color by the specified coefficient and returns the resulting color with red, green and blue components unchanged.^    ^0"
s[114] = "Asphyre.Colors.cNegative^Asphyre.Colors.html#cNegative^Computes negative color from the source by subtracting each individual component from one.^    ^0"
s[115] = "Asphyre.Colors.cNoAlpha^Asphyre.Colors.html#cNoAlpha^This function takes the source color and returns the same color but with alpha-channel set to one.^    ^0"
s[116] = "Asphyre.Colors.cWrap^Asphyre.Colors.html#cWrap^Similar to <a class=\"normal\"  href=\"Asphyre.Colors.html#cClamp\">cClamp</a> this function makes sure that all components stay within the range of [0..1].^ However, if one of the components overpasses the limit, it will be &quot;wrapped&quot; from the limit; for example, value of 1.2 becomes 0.8, 1.1 becomes 0.9, -0.3 becomes 0.3, -1.25 becomes 0.25 and so on.    ^0"
s[117] = "Asphyre.Colors.PAsphyreColor^Asphyre.Colors.html#PAsphyreColor^Pointer to <a class=\"normal\"  href=\"Asphyre.Colors.TAsphyreColor.html\">TAsphyreColor</a> to pass the structure by reference.^ ^0"
s[118] = "Asphyre.Data^Asphyre.Data.html^Utility routines for working with binary data including compression, encryption and checksum calculation.^ ^0"
s[119] = "Asphyre.Data.Base64Binary^Asphyre.Data.html#Base64Binary^Decodes Base-64 encoded text back into binary form and copies it to the destination buffer, returning the number of bytes actually written.^    ^0"
s[120] = "Asphyre.Data.Base64String^Asphyre.Data.html#Base64String^Encodes the specified binary buffer into Base-64 readable text and returns the resulting string.^    ^0"
s[121] = "Asphyre.Data.CipherDataXTEA^Asphyre.Data.html#CipherDataXTEA^Encrypts data using 128-bit XTEA cipher in CBC chaining mode and residual block termination (in case the data buffer is not multiple of 8 bytes).^    ^0"
s[122] = "Asphyre.Data.CompressData^Asphyre.Data.html#CompressData^Compresses data block from the source buffer to destination buffer.^ The memory for both buffers must be allocated. <i>MaxDestSize</i> can be used to specify the maximum data length that can be saved at the destination buffer to prevent overflow.    ^0"
s[123] = "Asphyre.Data.ComputeCRC32^Asphyre.Data.html#ComputeCRC32^Calculates CRC32 checksum from the specified data.^ This checkum can be used in integrity tests to verify that the data has not been modified.    ^0"
s[124] = "Asphyre.Data.DecipherDataXTEA^Asphyre.Data.html#DecipherDataXTEA^Decrypts data using 128-bit XTEA cipher in CBC chaining mode and residual block termination (in case the data buffer is not multiple of 8 bytes).^    ^0"
s[125] = "Asphyre.Data.DecodeBase64^Asphyre.Data.html#DecodeBase64^Decodes the Base-64 readable text back into the binary format.^    ^0"
s[126] = "Asphyre.Data.DecompressData^Asphyre.Data.html#DecompressData^Decompresses data block from the source buffer to destination buffer.^ The memory for both buffers must be allocated. <i>MaxDestSize</i> can be used to specify the maximum data length that can be saved at the destination buffer to prevent overflow.    ^0"
s[127] = "Asphyre.Data.EncodeBase64^Asphyre.Data.html#EncodeBase64^Encodes the binary source into Base-64 readable text.^ This effectively increases the size by 4/3 (rounded up). If the source is not divisible by 3, it will be padded with zeros.    ^0"
s[128] = "Asphyre.Data.MD5Checksum^Asphyre.Data.html#MD5Checksum^Calculates and returns 128-bit MD5 checksum of the given data block.^ The resulting checksum occupies 16 bytes of memory, which should be previously allocated. This checksum can be used as a signature to verify that the data has not been altered in any way.    ^0"
s[129] = "Asphyre.Data.PBlock64^Asphyre.Data.html#PBlock64^Pointer to <a class=\"normal\"  href=\"Asphyre.Data.html#TBlock64\">TBlock64</a> to pass that structure by reference.^ ^0"
s[130] = "Asphyre.Data.PKey128^Asphyre.Data.html#PKey128^Pointer to <a class=\"normal\"  href=\"Asphyre.Data.html#TKey128\">TKey128</a> to pass that structure by reference.^ ^0"
s[131] = "Asphyre.Data.TBlock64^Asphyre.Data.html#TBlock64^64-bit data block commonly used as init-vector for XTEA cipher.^ ^0"
s[132] = "Asphyre.Data.TCompressionLevel^Asphyre.Data.html#TCompressionLevel^The level of compression used when compressing data blocks.^  clLowest Lowest level of compression but fastest performance.   clNormal A balanced approach using average compression and performance.   clHighest The best possible compression at the expense of decreased performance.  ^0"
s[133] = "Asphyre.Data.TKey128^Asphyre.Data.html#TKey128^128-bit data block commonly used as password XTEA cipher.^ ^0"
s[134] = "Asphyre.Devices^Asphyre.Devices.html^Hardware device specification that handles creation of back buffers, swap chains and other administrative tasks.^ This device plays primordial part in communication between the application and hardware-specific implementation of each particular provider. ^0"
s[135] = "Asphyre.Devices.TAsphyreDevice^Asphyre.Devices.TAsphyreDevice.html^Hardware device wrapper that handles communication between application and the video card.^ The device must be created from Asphyre factory and is one of the first objects that needs to be initialized before working with any other components. ^0"
s[136] = "Asphyre.Devices.TAsphyreDevice.Connect^Asphyre.Devices.TAsphyreDevice.html#Connect^In native Windows applications, this function initializes the device in the same fashion as <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#Initialize\">Initialize</a>.^ In FireMonkey applications, this function hooks the device into FireMonkey's context so Asphyre can use it for its own rendering.    ^0"
s[137] = "Asphyre.Devices.TAsphyreDevice.Initialize^Asphyre.Devices.TAsphyreDevice.html#Initialize^Initializes the device using the swap chain information provided in <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#SwapChains\">SwapChains</a> and prepares it for rendering.^ If the call succeeds, <code>True</code> is returned and <code>False</code> otherwise. This method should be used in native Windows applications only. For FireMonkey applications, <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#Connect\">Connect</a> should be used instead.    ^0"
s[138] = "Asphyre.Devices.TAsphyreDevice.IsAtFault^Asphyre.Devices.TAsphyreDevice.html#IsAtFault^Returns <code>True</code> if the device either failed to initialize or is in run-time fault state.^ If the device is working properly or has not yet been initialized, <code>False</code> is returned.    ^0"
s[139] = "Asphyre.Devices.TAsphyreDevice.Resize^Asphyre.Devices.TAsphyreDevice.html#Resize^Changes size of the back-buffer tied to swap chain identified by the given index.^ The first swap chain has index of zero. If the index is outside of valid range or the swap chain cannot be resized, the returned value is <code>False</code> and the size of swap chain remains unchanged. If this method succeeds, the swap chain will have its size updated and <code>True</code> will be returned. In some providers this may cause device to be reset and some resources to be recreated, so any resources that are not handled by Asphyre should be released before calling this; the best way to handle this scenario is to subscribe to <code>EventDeviceReset</code> and <code>EventDeviceLost</code> events provided in <code>Asphyre.Events.pas</code>.    ^0"
s[140] = "Asphyre.Devices.TAsphyreDevice.ClearStates^Asphyre.Devices.TAsphyreDevice.html#ClearStates^Clears all textures, shaders and states currently bound to the device.^ This method works only on some modern providers.    ^0"
s[141] = "Asphyre.Devices.TAsphyreDevice.Disconnect^Asphyre.Devices.TAsphyreDevice.html#Disconnect^In native Windows applications, this function finalizes the device in the same fashion as <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#Finalize\">Finalize</a>.^ In FireMonkey applications, this function unhooks the device from FireMonkey's context. Any created resources that are not handled by Asphyre should be released before calling this.    ^0"
s[142] = "Asphyre.Devices.TAsphyreDevice.Finalize^Asphyre.Devices.TAsphyreDevice.html#Finalize^Finalizes the device releasing all its resources and handles.^ User-created content that is not handled automatically by Asphyre should be released before calling this method.    ^0"
s[143] = "Asphyre.Devices.TAsphyreDevice.Render^Asphyre.Devices.TAsphyreDevice.html#Render^Begins rendering scene to the first swap chain described in <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#SwapChains\">SwapChains</a>, clears the back-buffer with the given background color and values stored in <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#FillDepthValue\">FillDepthValue</a>/<a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#FillStencilValue\">FillStencilValue</a>, and calls the provided event handler, where the actual rendering should be made.^    ^0"
s[144] = "Asphyre.Devices.TAsphyreDevice.Render^Asphyre.Devices.TAsphyreDevice.html#Render^Begins rendering scene to the swap chain identified by its index described in <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#SwapChains\">SwapChains</a>, clears the back-buffer with the given background color and values stored in <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#FillDepthValue\">FillDepthValue</a>/<a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#FillStencilValue\">FillStencilValue</a>, and calls the provided event handler, where the actual rendering should be made.^ The first swap chain has index of zero. If the provided index is outside of valid range, this method does nothing.    ^0"
s[145] = "Asphyre.Devices.TAsphyreDevice.RenderTo^Asphyre.Devices.TAsphyreDevice.html#RenderTo^Begins rendering scene on the specified render target texture.^ If <code>FillBk</code> is set to <code>True</code>, the render target is cleared using the given background color and values stored in <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#FillDepthValue\">FillDepthValue</a>/<a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#FillStencilValue\">FillStencilValue</a>. This method calls the provided event handler, where the actual rendering should be made. The render target texture must be property created and initialized before calling this method. If there is a problem starting the rendering to the given render target, this method will silently fail and the given event handler will not be called.    ^0"
s[146] = "Asphyre.Devices.TAsphyreDevice.ResetInitFailed^Asphyre.Devices.TAsphyreDevice.html#ResetInitFailed^Resets the failed state of the device, which is usually set when the initialization has failed.^ This must be done explicitly to acknowledge that the application is aware of the situation.    ^0"
s[147] = "Asphyre.Devices.TAsphyreDevice.DeviceScale^Asphyre.Devices.TAsphyreDevice.html#DeviceScale^Indicates the current scale of device display.^ This is typically used on Retina displays to provide mapping between logical and pixel units. For example, if DisplayScale is 2, then the screen has twice pixel density for each logical unit. ^0"
s[148] = "Asphyre.Devices.TAsphyreDevice.FillDepthValue^Asphyre.Devices.TAsphyreDevice.html#FillDepthValue^The value that should be used for setting depth buffer either on the screen or the currently used rendering target.^ ^0"
s[149] = "Asphyre.Devices.TAsphyreDevice.FillStencilValue^Asphyre.Devices.TAsphyreDevice.html#FillStencilValue^The value that should be used for setting stencil buffer either on the screen or the currently used rendering target.^ ^0"
s[150] = "Asphyre.Devices.TAsphyreDevice.State^Asphyre.Devices.TAsphyreDevice.html#State^The current state of the device.^ If the device is not in working state, any rendering calls may fail either silently or returning <code>False</code>. ^0"
s[151] = "Asphyre.Devices.TAsphyreDevice.SwapChains^Asphyre.Devices.TAsphyreDevice.html#SwapChains^The list of swap chains that will be used for rendering into.^ In a typical scenario at least one swap chain must be added to this list for device initialization to succeed. In FireMonkey applications the swap chains are not used and will be ignored by the device. ^0"
s[152] = "Asphyre.Devices.TAsphyreDevice.TechFeatureVersion^Asphyre.Devices.TAsphyreDevice.html#TechFeatureVersion^Indicates the feature level version of current technology that is currently being used.^ The difference between this parameter and <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#TechVersion\">TechVersion</a> is that the second parameter indicates type of technology being used (for example, DirectX 10), while this one indicates the level of features available (for example, DirectX 9.0c). The values here are specified in hexadecimal format. That is, a value of $213 would indicate version 2.1.3. ^0"
s[153] = "Asphyre.Devices.TAsphyreDevice.Technology^Asphyre.Devices.TAsphyreDevice.html#Technology^Indicates the type of technology that is currently being used.^ ^0"
s[154] = "Asphyre.Devices.TAsphyreDevice.TechVersion^Asphyre.Devices.TAsphyreDevice.html#TechVersion^Indicates the version of current technology that is currently being used.^ The values are specified in hexadecimal format. That is, a value of $100 indicates version 1.0, while a value of $247 would indicate version 2.4.7. This value is used in combination with <a class=\"normal\"  href=\"Asphyre.Devices.TAsphyreDevice.html#Technology\">Technology</a>, so if <code>Technology</code> is set to <i>adtDirectX</i> and this value is set to $A10, it means that <i>DirectX 10.1</i> is being used. ^0"
s[155] = "Asphyre.Devices.DeviceTechnologyToString^Asphyre.Devices.html#DeviceTechnologyToString^Returns a readable text string with the name of the specified device technology.^    ^0"
s[156] = "Asphyre.Devices.DeviceVersionToString^Asphyre.Devices.html#DeviceVersionToString^Converts device version value originally specified in hexadecimal format (e.g.^ $324) into a readable text string describing that version (e.g. &quot;3.2.4&quot;). If <i>CompactForm</i> form parameter is set to <code>True</code>, the version text is reduced for trailing zeros, so a text like &quot;3.0&quot; becomes just &quot;3&quot;.    ^0"
s[157] = "Asphyre.Devices.GetFullDeviceTechString^Asphyre.Devices.html#GetFullDeviceTechString^Returns a readable text string that describes the current device's technology, technology version and feature level version.^ This information can be used for informative purposes.    ^0"
s[158] = "Asphyre.Devices.TAsphyreDeviceState^Asphyre.Devices.html#TAsphyreDeviceState^The current state of the device.^  adsNotActive The device has not yet been initialized.  <br> <br>  adsActive The device has been initialized and is working properly.  <br> <br>  adsInitFailed Initialization was attempted for this device but failed.  Before attempting another initialization, <code>ResetInitFailed</code> must be called first. <br> <br>  adsRunTimeFault Run-time failure occurred while working with the device.  The device is no longer in stable state and should be finalized as soon as possible to prevent major issues from occurring. <br> <br>  adsCreating The device is currently being initialized.  This state can be detected inside device's creation events and it means that the device has not finished initialization phase yet. The application must be very cautious with any device-related calls while the device is in this state. ^0"
s[159] = "Asphyre.Devices.TAsphyreDeviceTechnology^Asphyre.Devices.html#TAsphyreDeviceTechnology^Type of technology that is being used in Asphyre device.^  adtUnknown The technology has not yet been established.   adtDirectX Microsoft DirectX technology is being used.   adtOpenGL OpenGL by Khronos Group is being used.   adtOpenGL_ES OpenGL ES by Khronos Group is being used.   adtPropietary Private propietary technology is being used.  ^0"
s[160] = "Asphyre.Events^Asphyre.Events.html^Common Asphyre events that deal with device creation, resource initialization and GUI management.^ ^0"
s[161] = "Asphyre.Events.EventAsphyreCreate^Asphyre.Events.html#EventAsphyreCreate^Asphyre creation event, where all Asphyre components should be created.^ ^0"
s[162] = "Asphyre.Events.EventAsphyreDestroy^Asphyre.Events.html#EventAsphyreDestroy^Asphyre release event, where all Asphyre components should be released.^ ^0"
s[163] = "Asphyre.Events.EventAudioCreate^Asphyre.Events.html#EventAudioCreate^Sound device creation event, which occurs right after the audio device has been initialized.^ In this event it is possible to load some essential sound samples and music. ^0"
s[164] = "Asphyre.Events.EventAudioDestroy^Asphyre.Events.html#EventAudioDestroy^Sound device finalization event, which occurs right before the audio device is to be finalized to release all other device-dependant sound resources such as samples and music.^ ^0"
s[165] = "Asphyre.Events.EventBeginScene^Asphyre.Events.html#EventBeginScene^Start of rendering scene event, which occurs when the scene is being prepared to be rendered.^ In this event the necessary device states can be updated. ^0"
s[166] = "Asphyre.Events.EventButtonClick^Asphyre.Events.html#EventButtonClick^Button click event, which occurs when one of GUI buttons have been clicked.^ Typically, <a class=\"normal\"  href=\"Asphyre.Events.html#EventControlName\">EventControlName</a> and <a class=\"normal\"  href=\"Asphyre.Events.html#EventControlForm\">EventControlForm</a> are set to define what control on which form has been clicked. ^0"
s[167] = "Asphyre.Events.EventControlForm^Asphyre.Events.html#EventControlForm^This variable usually contains the name of the form, which contained the control that sent the latest event notification, such as button click.^ ^0"
s[168] = "Asphyre.Events.EventControlName^Asphyre.Events.html#EventControlName^This variable usually contains the name of the control that has sent the latest event notification, such as button click.^ ^0"
s[169] = "Asphyre.Events.EventDeviceCreate^Asphyre.Events.html#EventDeviceCreate^Device creation event, which occurs right after the device has been initialized.^ In this event it is possible to load some essential artwork and fonts. ^0"
s[170] = "Asphyre.Events.EventDeviceDestroy^Asphyre.Events.html#EventDeviceDestroy^Device finalization event, which occurs right before the device is to be finalized to release all other device-dependant resources such as images and fonts.^ ^0"
s[171] = "Asphyre.Events.EventDeviceInit^Asphyre.Events.html#EventDeviceInit^Device initialization event, where device and swap chain configuration should be specified.^ This event occurs right before Asphyre device is about to be initialized. ^0"
s[172] = "Asphyre.Events.EventDeviceLost^Asphyre.Events.html#EventDeviceLost^Device lost event, which occurs either before the device is to be finalized or when the device has been lost.^ In this event all volatile device-dependant resources should be released. ^0"
s[173] = "Asphyre.Events.EventDeviceReset^Asphyre.Events.html#EventDeviceReset^Device reset event, which occurs either after device has been initialized or recovered from lost scenario.^ In this event all volatile device-dependant resources should be created. ^0"
s[174] = "Asphyre.Events.EventEndScene^Asphyre.Events.html#EventEndScene^End of rendering scene event, which occurs when the scene has finished rendering and is about to be presented on the screen (or render target).^ In this event it is necessary to finish all cached rendering processes. ^0"
s[175] = "Asphyre.Events.EventTimerReset^Asphyre.Events.html#EventTimerReset^Timer reset event, which occurs when a time-consuming operation has taken place so it is necessary to reset the timer to prevent stalling.^ ^0"
s[176] = "Asphyre.Events.Types^Asphyre.Events.Types.html^Event foundations for Asphyre based on observer pattern using subscription mechanism.^ ^0"
s[177] = "Asphyre.Events.Types.TEventProvider^Asphyre.Events.Types.TEventProvider.html^Event subscription class implementing observer pattern.^ Recipient classes are added to the subscriber list to receive notifactions of events sent by other classes. ^0"
s[178] = "Asphyre.Events.Types.TEventProvider.Notify^Asphyre.Events.Types.TEventProvider.html#Notify^Send event notification to all subscribed classes and their callback functions, filtered through <a class=\"normal\"  href=\"Asphyre.Events.Types.TEventProvider.html#EventValidator\">EventValidator</a> event.^    ^0"
s[179] = "Asphyre.Events.Types.TEventProvider.SetClassPriority^Asphyre.Events.Types.TEventProvider.html#SetClassPriority^Sets the secondary priority of all event callback functions registered to the specified class.^ This secondary priority is used after the first primary priority is applied (the one passed to <a class=\"normal\"  href=\"Asphyre.Events.Types.TEventProvider.html#Subscribe\">Subscribe</a> function).    ^0"
s[180] = "Asphyre.Events.Types.TEventProvider.Subscribe^Asphyre.Events.Types.TEventProvider.html#Subscribe^Subscribes the given class and its event handling callback to receive all events sent from this provider.^ If the priority is set, the class will receive events depending on the list of priorities either after or before other events depending on priority settings. This function returns the identification number of the subscribed function, which can later be used to unsubscribe from this provider using <a class=\"normal\"  href=\"Asphyre.Events.Types.TEventProvider.html#Unsubscribe\">Unsubscribe</a> method.    ^0"
s[181] = "Asphyre.Events.Types.TEventProvider.MarkEventListDirty^Asphyre.Events.Types.TEventProvider.html#MarkEventListDirty^Marks the priority list of all event callback functions dirty, so it is refreshed next time an event occurs.^ This should be called after changing the priority of some class.    ^0"
s[182] = "Asphyre.Events.Types.TEventProvider.Unsubscribe^Asphyre.Events.Types.TEventProvider.html#Unsubscribe^Unsubscribes the event callback function registered using the specified ID, which is usually returned by <a class=\"normal\"  href=\"Asphyre.Events.Types.TEventProvider.html#Subscribe\">Subscribe</a> function.^    ^0"
s[183] = "Asphyre.Events.Types.TEventProvider.UnsubscribeClass^Asphyre.Events.Types.TEventProvider.html#UnsubscribeClass^Unsubscribes all event callbacks registered to the specified class.^    ^0"
s[184] = "Asphyre.Events.Types.TEventProvider.EventValidator^Asphyre.Events.Types.TEventProvider.html#EventValidator^Event validation callback that filters which events should be received by which classes depending on different circumstances.^ ^0"
s[185] = "Asphyre.Events.Types.TEventProvider.Owner^Asphyre.Events.Types.TEventProvider.html#Owner^The owner class that contains the list of all existing providers.^ ^0"
s[186] = "Asphyre.Events.Types.TEventProviders^Asphyre.Events.Types.TEventProviders.html^List of all available event providers based on observer pattern where subscriber classes are notified of the events sent by other classes.^ ^0"
s[187] = "Asphyre.Events.Types.TEventProviders.Add^Asphyre.Events.Types.TEventProviders.html#Add^Adds a new provider to the end of the list and returns the reference to its class.^    ^0"
s[188] = "Asphyre.Events.Types.TEventProviders.IndexOf^Asphyre.Events.Types.TEventProviders.html#IndexOf^Returns the index of the specified provider in the list.^    ^0"
s[189] = "Asphyre.Events.Types.TEventProviders.Insert^Asphyre.Events.Types.TEventProviders.html#Insert^Inserts a new provider to the end of the list and returns its index.^    ^0"
s[190] = "Asphyre.Events.Types.TEventProviders.AddExecOrder^Asphyre.Events.Types.TEventProviders.html#AddExecOrder^Defines the next execution order for all event callback functions of in all existing providers for the given class.^ This method should be called in a sequence for all registered classes to define in which order they should receive events.    ^0"
s[191] = "Asphyre.Events.Types.TEventProviders.Clear^Asphyre.Events.Types.TEventProviders.html#Clear^Removes all providers from the list.^    ^0"
s[192] = "Asphyre.Events.Types.TEventProviders.ClearExecOrder^Asphyre.Events.Types.TEventProviders.html#ClearExecOrder^Clears all the event ordering initially specified by <a class=\"normal\"  href=\"Asphyre.Events.Types.TEventProviders.html#AddExecOrder\">AddExecOrder</a> for all classes and callback functions.^    ^0"
s[193] = "Asphyre.Events.Types.TEventProviders.MarkEventListsDirty^Asphyre.Events.Types.TEventProviders.html#MarkEventListsDirty^Notifies all providers that their event priority list is dirty and should be updated the next time an event occurs.^ This can occur when the ordering list has been changed.    ^0"
s[194] = "Asphyre.Events.Types.TEventProviders.Remove^Asphyre.Events.Types.TEventProviders.html#Remove^Removes provider at the specified index from the list.^    ^0"
s[195] = "Asphyre.Events.Types.TEventProviders.Unsubscribe^Asphyre.Events.Types.TEventProviders.html#Unsubscribe^Unsubscribes all existing event callback functions for the specified class from all existing providers.^    ^0"
s[196] = "Asphyre.Events.Types.TEventProviders.ItemCount^Asphyre.Events.Types.TEventProviders.html#ItemCount^Number of registered provider classes in the list.^ ^0"
s[197] = "Asphyre.Events.Types.TEventProviders.Items^Asphyre.Events.Types.TEventProviders.html#Items^Access to individual provider classes in the list.^ ^0"
s[198] = "Asphyre.Events.Types.TEventCallbackType^Asphyre.Events.Types.html#TEventCallbackType^Event callback function used by the majority of Asphyre events.^     Sender Sender class used in event invocation, in certain situations this parameter may be set to <code>Nil</code>. Param Event-specific parameter that may be optionally passed by the notifier class. In most cases this parameter has value of <code>Nil</code>. Handled Determines whether to continue sending event to all other subscribed classes. If this parameter is set to <code>True</code>, the event handling will be finished and further subscribers will not be notified.  ^0"
s[199] = "Asphyre.Events.Types.TEventValidatorType^Asphyre.Events.Types.html#TEventValidatorType^Event validation callback function.^ This function is called to filter subscribers that should or should not receive the current event. For instance, when some button is clicked, only the class handling the active window should receive and handle the event; such validation should be done inside this event.       Provider Reference to the provider that was used in event invocation. Sender Sender class that called the event. For instance, when a button is clicked, the sender will be the button class itself. In some cases, this parameter may be <code>Nil</code>. Param Application-specific parameter sent by the caller class. This parameter is typically set to <code>Nil</code>. ClassName The name of the subscriber class that is currently being validated to receive the event. Allowed Determines whether the class that is currently being validated should receive the event or not. This parameter is by default set to <code>True</code>; setting it to <code>False</code> inside this event will skip the class identified by <code>ClassName</code> for the current event.  ^0"
s[200] = "Asphyre.Events.Types.EventProviders^Asphyre.Events.Types.html#EventProviders^List of all existing Asphyre event providers implementing observer pattern.^ This class is an instance of <a class=\"normal\"  href=\"Asphyre.Events.Types.TEventProviders.html\">TEventProviders</a> which is ready to use in the application. ^0"
s[201] = "Asphyre.FeedTimers^Asphyre.FeedTimers.html^Event-based multimedia timer for Asphyre using high-precision calculations on a variety of platforms including Windows, Mac OS and iOS.^ ^0"
s[202] = "Asphyre.FeedTimers.TAsphyreBridgedTimer^Asphyre.FeedTimers.TAsphyreBridgedTimer.html^The implementation of Asphyre's event-based multimedia timer running on a variety of platforms including Windows, Mac OS and iOS.^ This class is not independent, it requires the application to call <code>NotifyIdle</code> method, which will provide similar functionality of <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html\">TAsphyreTimer</a> class. ^0"
s[203] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.NotifyIdle^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#NotifyIdle^This event should be called as fast as possible from within the main application for the timer to work.^ It can be either called when idle event occurs or from within system timer event.    ^0"
s[204] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.Process^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Process^This method should only be called from within <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> event to do constant object movement and animation control.^ Each time this method is called, <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnProcess\">OnProcess</a> event may (or may not) occur depending on the current rendering frame rate (see <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#FrameRate\">FrameRate</a>) and the desired processing speed (see <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Speed\">Speed</a>). The only thing that is assured is that <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnProcess\">OnProcess</a> event will occur exactly <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Speed\">Speed</a> times per second no matter how fast <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> occurs (that is, the value of <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#FrameRate\">FrameRate</a>).    ^0"
s[205] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.Reset^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Reset^Resets internal structures of the timer and starts over the timing calculations.^ This can be useful when a very time-consuming task was executed inside <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> event that only occurs once. Normally, it would stall the timer making it think that the processing takes too long or the rendering is too slow; calling this method will tell the timer that it should ignore the situation and prevent the stall.    ^0"
s[206] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.Delta^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Delta^Movement differential between the current frame rate and the requested <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Speed\">Speed</a>.^ Object movement and animation control can be made inside <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> event if all displacements are multiplied by this coefficient. For instance, if frame rate is 30 FPS and speed is set to 60, this coefficient will equal to 2.0, so objects moving at 30 FPS will have double displacement to match 60 FPS speed; on the other hand, if frame rate is 120 FPS with speed set to 60, this coefficient will equal to 0.5, to move objects two times slower. An easier and more straight-forward approach can be used with <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnProcess\">OnProcess</a> event, where using this coefficient is not necessary. ^0"
s[207] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.Enabled^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Enabled^Determines whether the timer is enabled or not.^ The internal processing may still be occurring independently of this value, but it controls whether <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> event occurs or not. ^0"
s[208] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.FrameRate^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#FrameRate^The current frame rate in frames per second.^ This value is calculated approximately two times per second and can only be used for informative purposes (e.g. displaying frame rate in the application). For precise real-time indications it is recommended to use <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Latency\">Latency</a> property instead. ^0"
s[209] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.Latency^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Latency^The time (in milliseconds) calculated between previous frame and the current one.^ This can be a direct indicator of rendering performance as it indicates how much time it took to render (and possibly process) the frame. ^0"
s[210] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.MaxFPS^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#MaxFPS^The maximum allowed frame rate at which <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> should be executed.^ This value is an approximate and the resulting frame rate may be quite different (the resolution can be as low as 10 ms). It should be used with reasonable values to prevent the application from using 100% of CPU and GPU with unnecessarily high frame rates such as 1000 FPS. A reasonable and default value for this property is 200. ^0"
s[211] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.OnProcess^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnProcess^This event occurs when calling <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Process\">Process</a> method inside <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> event.^ In this event all constant object movement and animation control should be made. This event can occur more than once for each call to <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Process\">Process</a> or may not occur, depending on the current <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#FrameRate\">FrameRate</a> and <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Speed\">Speed</a>. For instance, when frame rate is 120 FPS and speed set to 60, this event will occur for each second call to <code>Process</code>; on the other hand, if frame rate is 30 FPS with speed set to 60, this event will occur twice for each call to <code>Process</code> to maintain constant processing. An alternative to this is doing processing inside <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer\">OnTimer</a> event using <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Delta\">Delta</a> as coefficient for object movement. If the processing takes too much time inside this event so that the target speed cannot be achieved, the timer may stall (that is, reduce number of occurences of this event until the balance is restored). ^0"
s[212] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.OnTimer^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnTimer^This event occurs when <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Enabled\">Enabled</a> is set to <code>True</code> and as fast as possible (only limited approximately by <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#MaxFPS\">MaxFPS</a>).^ In this event, all rendering should be made. Inside this event, at some location it is recommended to call <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Process\">Process</a> method, which will invoke <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnProcess\">OnProcess</a> event for constant object movement and animation control. The idea is to render graphics as fast as possible while moving objects and controlling animation at constant speed. Note that for this event to occur, it is necessary to call <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#NotifyIdle\">NotifyIdle</a> at some point in the application for this timer to do the required calculations. ^0"
s[213] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.SingleCallOnly^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#SingleCallOnly^If this property is set to <code>True</code>, it will prevent the timer from trying to fix situations where the rendering speed is slower than the processing speed (that is, <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#FrameRate\">FrameRate</a> is lower than <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Speed\">Speed</a>).^ Therefore, faster rendering produces constant speed, while slower rendering slows the processing down. This is particularly useful for dedicated servers that do no rendering but only processing; in this case, the processing cannot be technically any faster than it already is. ^0"
s[214] = "Asphyre.FeedTimers.TAsphyreBridgedTimer.Speed^Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Speed^The speed of constant processing and animation control in frames per second.^ This affects both <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#Delta\">Delta</a> property and occurence of <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html#OnProcess\">OnProcess</a> event. ^0"
s[215] = "Asphyre.FeedTimers.Timer^Asphyre.FeedTimers.html#Timer^Instance of <a class=\"normal\"  href=\"Asphyre.FeedTimers.TAsphyreBridgedTimer.html\">TAsphyreBridgedTimer</a> that is ready to use in applications without having to create that class explicitly.^ ^0"
s[216] = "Asphyre.Fonts^Asphyre.Fonts.html^Bitmap fonts used natively in Asphyre supporting Unicode, pre-rendered text effects such as border and shadow, customized spacing between individual letter pairs, rendering using vertical color gradient and formatted text.^ ^0"
s[217] = "Asphyre.Fonts.TAsphyreFont^Asphyre.Fonts.TAsphyreFont.html^Asphyre native font implementation that supports Unicode, pre-rendered text effects such as border and shadow, customized spacing between individual letter pairs, rendering using vertical color gradient and formatted text.^ ^0"
s[218] = "Asphyre.Fonts.TAsphyreFont.ParseLink^Asphyre.Fonts.TAsphyreFont.html#ParseLink^Loads the font description from the specified link, which can point either to Asphyre archive (e.g.^ &quot;MyMedia.asvf | SomeFont.xml&quot;) or external file on disk.    ^0"
s[219] = "Asphyre.Fonts.TAsphyreFont.TexExtent^Asphyre.Fonts.TAsphyreFont.html#TexExtent^Calculates the vertical size of the provided text that will be occupied when this text is rendered on the screen.^ The resulting size is rounded to the nearest integer. If more precision is required, <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#TextExtent\">TextExtent</a> should be used instead.    ^0"
s[220] = "Asphyre.Fonts.TAsphyreFont.TexHeight^Asphyre.Fonts.TAsphyreFont.html#TexHeight^Calculates the vertical size of the provided text that will be occupied when this text is rendered on the screen.^ The result is rounded to the nearest integer. If more precision is required, <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#TextHeight\">TextHeight</a> should be used instead.    ^0"
s[221] = "Asphyre.Fonts.TAsphyreFont.TextExtent^Asphyre.Fonts.TAsphyreFont.html#TextExtent^Calculates horizontal and vertical dimensions of the provided text that will be occupied when drawing this text on the screen.^    ^0"
s[222] = "Asphyre.Fonts.TAsphyreFont.TextHeight^Asphyre.Fonts.TAsphyreFont.html#TextHeight^Calculates the vertical size of the provided text that will be occupied when this text is rendered on the screen.^    ^0"
s[223] = "Asphyre.Fonts.TAsphyreFont.TextWidth^Asphyre.Fonts.TAsphyreFont.html#TextWidth^Calculates the horizontal size of the provided text that will be occupied when this text is rendered on the screen.^    ^0"
s[224] = "Asphyre.Fonts.TAsphyreFont.TexWidth^Asphyre.Fonts.TAsphyreFont.html#TexWidth^Calculates the horizontal size of the provided text that will be occupied when this text is rendered on the screen.^ The result is rounded to the nearest integer. If more precision is required, <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#TextWidth\">TextWidth</a> should be used instead.    ^0"
s[225] = "Asphyre.Fonts.TAsphyreFont.ClearStates^Asphyre.Fonts.TAsphyreFont.html#ClearStates^Removes all states that were previously saved by <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#SaveState\">SaveState</a>.^ This can be useful in certain circumstances where the stack should be cleared.    ^0"
s[226] = "Asphyre.Fonts.TAsphyreFont.CustomOut^Asphyre.Fonts.TAsphyreFont.html#CustomOut^Custom font drawing function that calls the specified event for every letter that should be drawn.^ The text is supposedly drawn at the given top-left position with the specified alpha-transparency and vertical color gradient. The provided event is actually responsible for drawing each of the letters.    ^0"
s[227] = "Asphyre.Fonts.TAsphyreFont.RestoreState^Asphyre.Fonts.TAsphyreFont.html#RestoreState^Restores the state of most font properties such as scale, kerning and so on that were previously saved by <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#SaveState\">SaveState</a> method.^    ^0"
s[228] = "Asphyre.Fonts.TAsphyreFont.SaveState^Asphyre.Fonts.TAsphyreFont.html#SaveState^Saves the state of most font properties such as scale, kerning and so on.^ This can be useful when modifying font parameters for drawing text so that they can be later restored without breaking the rest of text rendering code that relies on default font parameters.    ^0"
s[229] = "Asphyre.Fonts.TAsphyreFont.TextMid^Asphyre.Fonts.TAsphyreFont.html#TextMid^Draws the text centered both horizontally and vertically at the given position with the specified alpha-transparency and vertical color gradient.^    ^0"
s[230] = "Asphyre.Fonts.TAsphyreFont.TextMidF^Asphyre.Fonts.TAsphyreFont.html#TextMidF^Draws the text centered both horizontally and vertically at the given position with the specified alpha-transparency and vertical color gradient.^ The provided 2D floating-point vector is rounded to nearest integer to avoid drawing blurred text; to prevent this, use <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#TextMidFF\">TextMidFF</a> instead.    ^0"
s[231] = "Asphyre.Fonts.TAsphyreFont.TextMidFF^Asphyre.Fonts.TAsphyreFont.html#TextMidFF^Draws the text centered both horizontally and vertically at the given position with the specified alpha-transparency and vertical color gradient.^ The text is drawn at the given 2D floating-point position.    ^0"
s[232] = "Asphyre.Fonts.TAsphyreFont.TextMidH^Asphyre.Fonts.TAsphyreFont.html#TextMidH^Draws the text centered horizontally at the given position with the specified alpha-transparency and vertical color gradient.^ The text is not centered vertically, it starts from the top of the given position.    ^0"
s[233] = "Asphyre.Fonts.TAsphyreFont.TextOut^Asphyre.Fonts.TAsphyreFont.html#TextOut^Draws the text starting at the given top-left position with the specified alpha-transparency and vertical color gradient.^    ^0"
s[234] = "Asphyre.Fonts.TAsphyreFont.TextRect^Asphyre.Fonts.TAsphyreFont.html#TextRect^Draws formatted text that is justified horizontally using variable horizontal spacing between individual words (using separation characters set in <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#DivSet\">DivSet</a>.^ The text is fitted to the provided rectangle. If a paragraph character is found (as defined by <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#ParaSet\">ParaSet</a>, the text is rendered from the next line with paragraph space added both vertically and horizontally. The rendering stops when the requested text reaches the bottom of the rendered rectangle.    ^0"
s[235] = "Asphyre.Fonts.TAsphyreFont.TextRects^Asphyre.Fonts.TAsphyreFont.html#TextRects^Estimates the size and position of individual letter rectangles if they are rendered on the screen.^ The resulting rectangles are saved to the specified list. If the text is empty, the list will also be empty.    ^0"
s[236] = "Asphyre.Fonts.TAsphyreFont.DivSet^Asphyre.Fonts.TAsphyreFont.html#DivSet^The list of dividing characters used to split text into words when using <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#TextRect\">TextRect</a> for drawing formatted text.^ ^0"
s[237] = "Asphyre.Fonts.TAsphyreFont.FontSize^Asphyre.Fonts.TAsphyreFont.html#FontSize^The maximum size of letter box that covers all letters.^ This is originally set in Asphyre's FontTool and is used for rendering vertical text gradients properly. ^0"
s[238] = "Asphyre.Fonts.TAsphyreFont.ImageIndex^Asphyre.Fonts.TAsphyreFont.html#ImageIndex^The index of image that contains letters to be rendered on the screen.^ This index refers to <code>Images</code> property of the owner and must be property specified for displaying text. ^0"
s[239] = "Asphyre.Fonts.TAsphyreFont.Kerning^Asphyre.Fonts.TAsphyreFont.html#Kerning^This value is an additional space (in pixels) added to every character's width; it can be used to compress or expand the rendered text.^ ^0"
s[240] = "Asphyre.Fonts.TAsphyreFont.Kernings^Asphyre.Fonts.TAsphyreFont.html#Kernings^The list of spacings between the individual letter pairs for pixel-perfect text rendering.^ ^0"
s[241] = "Asphyre.Fonts.TAsphyreFont.Linespace^Asphyre.Fonts.TAsphyreFont.html#Linespace^The space added between individual text lines drawn using <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#TextRect\">TextRect</a> when drawing formatted text.^ ^0"
s[242] = "Asphyre.Fonts.TAsphyreFont.Name^Asphyre.Fonts.TAsphyreFont.html#Name^The unique name of the font that will be used for accessing this font from the owner list by using its name.^ ^0"
s[243] = "Asphyre.Fonts.TAsphyreFont.Owner^Asphyre.Fonts.TAsphyreFont.html#Owner^The owner of current font that points to the valid instance of <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFonts.html\">TAsphyreFonts</a> where shared data such as color tags will be taken from.^ ^0"
s[244] = "Asphyre.Fonts.TAsphyreFont.ParaSet^Asphyre.Fonts.TAsphyreFont.html#ParaSet^The list of paragraph-identifying characters that indicate the beginning of new paragraph when using <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFont.html#TextRect\">TextRect</a> for drawing formatted text.^ ^0"
s[245] = "Asphyre.Fonts.TAsphyreFont.Scale^Asphyre.Fonts.TAsphyreFont.html#Scale^The scale of the rendered font, specifying how big the letters should appear.^ By default this parameter is set to one; using other values will make the text appear bigger or smaller, but the result may be blurred because of letter image stretching. ^0"
s[246] = "Asphyre.Fonts.TAsphyreFont.Whitespace^Asphyre.Fonts.TAsphyreFont.html#Whitespace^The width in pixels that should be used for blank characters (space is one of them).^ ^0"
s[247] = "Asphyre.Fonts.TAsphyreFonts^Asphyre.Fonts.TAsphyreFonts.html^The list of Asphyre native bitmap fonts supporting Unicode, pre-rendered text effects such as border and shadow, customized spacing between individual letter pairs, rendering using vertical color gradient and formatted text.^ ^0"
s[248] = "Asphyre.Fonts.TAsphyreFonts.IndexOf^Asphyre.Fonts.TAsphyreFonts.html#IndexOf^Returns the index of the font having the specified name (not case sensitive) in the list.^ This function uses binary search for quickly locating the wanted font. If the font with given name is not found, -1 is returned.    ^0"
s[249] = "Asphyre.Fonts.TAsphyreFonts.Insert^Asphyre.Fonts.TAsphyreFonts.html#Insert^Adds a new font to the list and loads its letter data from the specified link that can be either Asphyre archive (e.g.^ &quot;MyMedia.asvf | SomeFont.xml&quot;) or external file, with the specified image name. The image must be loaded before this function is used. <code>Resolve</code> method is used for obtaining the image, so meta-data can be used for loading font images on request. If the method succeeds, the index of newly added font is returned; otherwise, the returned value will be -1.    ^0"
s[250] = "Asphyre.Fonts.TAsphyreFonts.Resolve^Asphyre.Fonts.TAsphyreFonts.html#Resolve^Resolves the unique font name and returns its index in the list.^ This function uses meta-data describing all fonts available to the application and if the specified font name is not found among the existing fonts, the font is loaded from disk using its meta-data specification. <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFonts.html#OnItemLoad\">OnItemLoad</a> event is called when the font is about to be loaded and <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFonts.html#OnItemFail\">OnItemFail</a> is called when the font is either not found in the meta-data or cannot be loaded with the specified information. If the method succeeds, the index of existing (or loaded) font is returned and -1 is returned otherwise.    ^0"
s[251] = "Asphyre.Fonts.TAsphyreFonts.InsertTag^Asphyre.Fonts.TAsphyreFonts.html#InsertTag^Inserts new font color tag with the given name to local registry.^ The color tag can be used when drawing text using &lt;tagname&gt;&lt;/&gt; tags (e.g. &quot;Some text &lt;MyColor&gt;colored text&lt;/&gt; other text&quot;). The tags can be used both in normal and preformatted text. All fonts in the list have access to existing color tags.    ^0"
s[252] = "Asphyre.Fonts.TAsphyreFonts.RemoveAll^Asphyre.Fonts.TAsphyreFonts.html#RemoveAll^Removes all fonts from the list and releases them from memory.^    ^0"
s[253] = "Asphyre.Fonts.TAsphyreFonts.RemoveFont^Asphyre.Fonts.TAsphyreFonts.html#RemoveFont^Removes font at the specified index and releases its memory.^ The index must be specified in [0..(ItemCount - 1)] range. If the specified index is outside of valid range, this method does nothing.    ^0"
s[254] = "Asphyre.Fonts.TAsphyreFonts.RemoveTag^Asphyre.Fonts.TAsphyreFonts.html#RemoveTag^Removes font color tag with the specified name from the local registry.^ If the tag with given name does not exist, this method does nothing.    ^0"
s[255] = "Asphyre.Fonts.TAsphyreFonts.RemoveTags^Asphyre.Fonts.TAsphyreFonts.html#RemoveTags^Remove all font color tags from the local registry.^    ^0"
s[256] = "Asphyre.Fonts.TAsphyreFonts.Canvas^Asphyre.Fonts.TAsphyreFonts.html#Canvas^The reference to 2D canvas where the letters will be drawn on.^ This property must be set before drawing text with any of the fonts. ^0"
s[257] = "Asphyre.Fonts.TAsphyreFonts.Count^Asphyre.Fonts.TAsphyreFonts.html#Count^The number of fonts in the list.^ ^0"
s[258] = "Asphyre.Fonts.TAsphyreFonts.Font^Asphyre.Fonts.TAsphyreFonts.html#Font^Returns the font with the given name (not case sensitive).^ This method uses binary search for quickly finding the required font. If the wanted font is not found in the list, <code>Nil</code> is returned. ^0"
s[259] = "Asphyre.Fonts.TAsphyreFonts.Images^Asphyre.Fonts.TAsphyreFonts.html#Images^The reference to image list that contains one or more font images used for text rendering.^ Each of the fonts will be referring to this list for drawing individual letters. This property must be set before loading and using fonts. ^0"
s[260] = "Asphyre.Fonts.TAsphyreFonts.Items^Asphyre.Fonts.TAsphyreFonts.html#Items^The access to individual fonts in the list by using index that is specified in range of [0..(Count - 1)].^ If the index is outside of valid range, <code>Nil</code> is returned. ^0"
s[261] = "Asphyre.Fonts.TAsphyreFonts.OnItemFail^Asphyre.Fonts.TAsphyreFonts.html#OnItemFail^This event occurs when the requested font could not be loaded inside <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFonts.html#Resolve\">Resolve</a> function either because its meta-data is not found or because it could not be loaded from its specified location.^ ^0"
s[262] = "Asphyre.Fonts.TAsphyreFonts.OnItemLoad^Asphyre.Fonts.TAsphyreFonts.html#OnItemLoad^This event occurs when a new font is being loaded on request inside <a class=\"normal\"  href=\"Asphyre.Fonts.TAsphyreFonts.html#Resolve\">Resolve</a> function.^ ^0"
s[263] = "Asphyre.Fonts.TFontLetterGroups^Asphyre.Fonts.TFontLetterGroups.html^The hashed list of individual letter spacings used in Asphyre fonts for pixel-perfect text rendering.^ The list stores values between ANSI letters quickly using hash table; for Unicode characters a linear list is used. ^0"
s[264] = "Asphyre.Fonts.TFontLetterGroups.CopyFrom^Asphyre.Fonts.TFontLetterGroups.html#CopyFrom^Copies the spacing information from the given list of 2D integer points, where <code>X</code> and <code>Y</code> are considered character codes and <code>Data</code> field as integer representation of spacing between the given characters.^ The existing registry entries in the current list are not deleted, but replaced when needed.    ^0"
s[265] = "Asphyre.Fonts.TFontLetterGroups.Spec^Asphyre.Fonts.TFontLetterGroups.html#Spec^Modifies the spacing value for the given pair of ANSI character codes.^ If the registry for this combination of characters does not exist, it will be created; it if does exist, it will be replaced by the spacing value.    ^0"
s[266] = "Asphyre.Fonts.TFontLetterGroups.Spec^Asphyre.Fonts.TFontLetterGroups.html#Spec^Modifies the spacing value for the given pair of character codes.^ If the registry for this combination of characters does not exist, it will be created; it if does exist, it will be replaced by the spacing value.    ^0"
s[267] = "Asphyre.Fonts.TFontLetterGroups.Shift^Asphyre.Fonts.TFontLetterGroups.html#Shift^Returns the spacing between two given character codes.^ If there is no registry for the given combination of characters, zero is returned. ^0"
s[268] = "Asphyre.Fonts.TCustomTextEvent^Asphyre.Fonts.html#TCustomTextEvent^This is custom text rendering event callback that is passed to <code>CustomOut</code> function of Asphyre font.^ This event is called for each letter that is to be displayed. The rendering should be made inside this event. It can be used for applying effects to individual letters and for scheduling visual effects.        Sender The sender class of the font that is used in the rendering. Image The source font image that should be used for displaying the individual letters. SrcRect The source letter rectangle that should be taken from the image for drawing the current letter. DestRect The destination rectangle where the letter should be rendered at. Colors The colors that should be used for rendering the destination letter rectangle. These colors include proper interpolation for displaying vertical color gradient properly. User The user data pointer that was specified when calling <code>CustomOut</code> method.  ^0"
s[269] = "Asphyre.Formats^Asphyre.Formats.html^Utility routines for converting between different pixel formats.^ Most of the pixel formats that are described by Asphyre are supported except those that are floating-point. ^0"
s[270] = "Asphyre.Formats.TAsphyreFormatList^Asphyre.Formats.TAsphyreFormatList.html^Defines a list of supported Asphyre formats.^ ^0"
s[271] = "Asphyre.Formats.TAsphyreFormatList.Include^Asphyre.Formats.TAsphyreFormatList.html#Include^If the specified format does not exist in the list, adds it to the end.^    ^0"
s[272] = "Asphyre.Formats.TAsphyreFormatList.IndexOf^Asphyre.Formats.TAsphyreFormatList.html#IndexOf^Returns index of the specified format in the list.^    ^0"
s[273] = "Asphyre.Formats.TAsphyreFormatList.Insert^Asphyre.Formats.TAsphyreFormatList.html#Insert^Inserts the specified format to the end of list.^    ^0"
s[274] = "Asphyre.Formats.TAsphyreFormatList.Clear^Asphyre.Formats.TAsphyreFormatList.html#Clear^Removes all elements from the list.^    ^0"
s[275] = "Asphyre.Formats.TAsphyreFormatList.InsertAll^Asphyre.Formats.TAsphyreFormatList.html#InsertAll^Inserts all supported Asphyre formats to the list.^    ^0"
s[276] = "Asphyre.Formats.TAsphyreFormatList.Remove^Asphyre.Formats.TAsphyreFormatList.html#Remove^Removes element specified by the given index.^    ^0"
s[277] = "Asphyre.Formats.TAsphyreFormatList.SortBestMatch^Asphyre.Formats.TAsphyreFormatList.html#SortBestMatch^Sorts formats in the list from best to worst matching the given format.^    ^0"
s[278] = "Asphyre.Formats.TAsphyreFormatList.Count^Asphyre.Formats.TAsphyreFormatList.html#Count^Number of elements in the list.^ ^0"
s[279] = "Asphyre.Formats.TAsphyreFormatList.Format^Asphyre.Formats.TAsphyreFormatList.html#Format^Provides access to each individual element in the list.^ ^0"
s[280] = "Asphyre.Formats.FindClosestFormat^Asphyre.Formats.html#FindClosestFormat^Takes a list of existing pixel formats and tries to find in it a format that closely resembles the provided format sample.^ The heuristics used by this function tries not to add new channels and will never return a format that has less channels than the sample; it also tries to avoid converting between different format types like integer and floating-point formats.    ^0"
s[281] = "Asphyre.Formats.Pixel32toX^Asphyre.Formats.html#Pixel32toX^Converts a single pixel from 32-bit RGBA format (<code>apf_A8R8G8B8</code>) to an arbitrary format.^ If the specified format is not supported, this function does nothing.     Source Source pixel specified in 32-bit RGBA format (<code>apf_A8R8G8B8</code>). Dest Pointer to the memory block where the resulting pixel should be written to. This memory should be previously allocated. DestFormat Pixel format that is used to describe the destination pixel.  ^0"
s[282] = "Asphyre.Formats.Pixel32toXArray^Asphyre.Formats.html#Pixel32toXArray^Converts an array of pixels from 32-bit RGBA format (<code>apf_A8R8G8B8</code>) to an arbitrary format.^ If the specified format is not supported, this function does nothing.      Source Pointer to a valid memory block that holds the source pixels. Dest Pointer to a valid memory block where destination pixels will be written to. DestFormat Pixel format that is used to describe the destination pixels. Elements The number of pixels to convert.  ^0"
s[283] = "Asphyre.Formats.PixelXto32^Asphyre.Formats.html#PixelXto32^Converts a single pixel from an arbitrary format back to 32-bit RGBA format (<code>apf_A8R8G8B8</code>).^ If the specified format is not supported, this function returns zero.     Source Pointer to a valid block of memory where the source pixel resides. SourceFormat Pixel format that is used to describe the source pixel. Resulting pixel in 32-bit RGBA format (<code>apf_A8R8G8B8</code>). ^0"
s[284] = "Asphyre.Formats.PixelXto32Array^Asphyre.Formats.html#PixelXto32Array^Converts an array of pixels from an arbitrary format back to 32-bit RGBA format (<code>apf_A8R8G8B8</code>).^ If the specified format is not supported, this function does nothing.      Source Pointer to a valid memory block that holds the source pixels. Dest Pointer to a valid memory block where destination pixels will be written to. SourceFormat Pixel format that is used to describe the source pixels. Elements The number of pixels to convert.  ^0"
s[285] = "Asphyre.Formats.FormatList^Asphyre.Formats.html#FormatList^A running instance of <a class=\"normal\"  href=\"Asphyre.Formats.TAsphyreFormatList.html\">TAsphyreFormatList</a> that is created when the application is executed and freed upon termination; therefore, this class can be used with its timing functions without having to explicitly create it elsewhere.^ ^0"
s[286] = "Asphyre.FormTimers^Asphyre.FormTimers.html^Event-based multimedia timer for Asphyre using high-precision calculations on Windows platforms.^ ^0"
s[287] = "Asphyre.FormTimers.TAsphyreTimer^Asphyre.FormTimers.TAsphyreTimer.html^The implementation of Asphyre's event-based multimedia timer running on Windows platforms.^ This class hooks into application's idle event, so only once instance of this class should be used. For that purpose, <a class=\"normal\"  href=\"Asphyre.FormTimers.html#Timer\">Timer</a> variable exists that is automatically created on application's start. ^0"
s[288] = "Asphyre.FormTimers.TAsphyreTimer.Process^Asphyre.FormTimers.TAsphyreTimer.html#Process^This method should only be called from within <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnTimer\">OnTimer</a> event to do constant object movement and animation control.^ Each time this method is called, <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnProcess\">OnProcess</a> event may (or may not) occur depending on the current rendering frame rate (see <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#FrameRate\">FrameRate</a>) and the desired processing speed (see <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Speed\">Speed</a>). The only thing that is assured is that <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnProcess\">OnProcess</a> event will occur exactly <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Speed\">Speed</a> times per second no matter how fast <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnTimer\">OnTimer</a> occurs (that is, the value of <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#FrameRate\">FrameRate</a>).    ^0"
s[289] = "Asphyre.FormTimers.TAsphyreTimer.Reset^Asphyre.FormTimers.TAsphyreTimer.html#Reset^Resets internal structures of the timer and starts over the timing calculations.^ This can be useful when a very time-consuming task was executed inside <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnTimer\">OnTimer</a> event that only occurs once. Normally, it would stall the timer making it think that the processing takes too long or the rendering is too slow; calling this method will tell the timer that it should ignore the situation and prevent the stall.    ^0"
s[290] = "Asphyre.FormTimers.TAsphyreTimer.Enabled^Asphyre.FormTimers.TAsphyreTimer.html#Enabled^Determines whether the timer is enabled or not.^ The internal processing may still be occurring independently of this value, but it controls whether <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnTimer\">OnTimer</a> event occurs or not. ^0"
s[291] = "Asphyre.FormTimers.TAsphyreTimer.FrameRate^Asphyre.FormTimers.TAsphyreTimer.html#FrameRate^The current frame rate in frames per second.^ This value is calculated approximately two times per second and can only be used for informative purposes (e.g. displaying frame rate in the application). For precise real-time indications it is recommended to use <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Latency\">Latency</a> property instead. ^0"
s[292] = "Asphyre.FormTimers.TAsphyreTimer.Latency^Asphyre.FormTimers.TAsphyreTimer.html#Latency^Average time (in milliseconds) calculated between previous frame and the current one.^ This can be a direct indicator of rendering performance as it indicates how much time it takes on average to render (and possibly process) the frame. This parameter is typically updated much more frequently than <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#FrameRate\">FrameRate</a>. ^0"
s[293] = "Asphyre.FormTimers.TAsphyreTimer.MaxFPS^Asphyre.FormTimers.TAsphyreTimer.html#MaxFPS^The maximum allowed frame rate at which <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnTimer\">OnTimer</a> should be executed.^ This value is an approximate and the resulting frame rate may be quite different (the resolution can be as low as 10 ms). It should be used with reasonable values to prevent the application from using 100% of CPU and GPU with unnecessarily high frame rates such as 1000 FPS. A reasonable and default value for this property is 200. ^0"
s[294] = "Asphyre.FormTimers.TAsphyreTimer.OnProcess^Asphyre.FormTimers.TAsphyreTimer.html#OnProcess^This event occurs when calling <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Process\">Process</a> method inside <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnTimer\">OnTimer</a> event.^ In this event all constant object movement and animation control should be made. This event can occur more than once for each call to <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Process\">Process</a> or may not occur, depending on the current <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#FrameRate\">FrameRate</a> and <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Speed\">Speed</a>. For instance, when frame rate is 120 FPS and speed set to 60, this event will occur for each second call to <code>Process</code>; on the other hand, if frame rate is 30 FPS with speed set to 60, this event will occur twice for each call to <code>Process</code> to maintain constant processing. An alternative to this is doing processing inside <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnTimer\">OnTimer</a> event using <code>Delta</code> as coefficient for object movement. If the processing takes too much time inside this event so that the target speed cannot be achieved, the timer may stall (that is, reduce number of occurences of this event until the balance is restored). ^0"
s[295] = "Asphyre.FormTimers.TAsphyreTimer.OnTimer^Asphyre.FormTimers.TAsphyreTimer.html#OnTimer^This event occurs when <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Enabled\">Enabled</a> is set to <code>True</code> and as fast as possible (only limited approximately by <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#MaxFPS\">MaxFPS</a>).^ In this event, all rendering should be made. Inside this event, at some location it is recommended to call <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Process\">Process</a> method, which will invoke <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnProcess\">OnProcess</a> event for constant object movement and animation control. The idea is to render graphics as fast as possible while moving objects and controlling animation at constant speed. ^0"
s[296] = "Asphyre.FormTimers.TAsphyreTimer.SingleCallOnly^Asphyre.FormTimers.TAsphyreTimer.html#SingleCallOnly^If this property is set to <code>True</code>, it will prevent the timer from trying to fix situations where the rendering speed is slower than the processing speed (that is, <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#FrameRate\">FrameRate</a> is lower than <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#Speed\">Speed</a>).^ Therefore, faster rendering produces constant speed, while slower rendering slows the processing down. This is particularly useful for dedicated servers that do no rendering but only processing; in this case, the processing cannot be technically any faster than it already is. ^0"
s[297] = "Asphyre.FormTimers.TAsphyreTimer.Speed^Asphyre.FormTimers.TAsphyreTimer.html#Speed^The speed of constant processing and animation control in frames per second.^ This affects both <code>Delta</code> property and occurence of <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html#OnProcess\">OnProcess</a> event. ^0"
s[298] = "Asphyre.FormTimers.Timer^Asphyre.FormTimers.html#Timer^Instance of <a class=\"normal\"  href=\"Asphyre.FormTimers.TAsphyreTimer.html\">TAsphyreTimer</a> that is ready to use in applications without having to create that class explicitly.^ ^0"
s[299] = "Asphyre.Images^Asphyre.Images.html^Classes and utilities for handling images that contain multiple patterns and textures suitable for 2D and 3D rendering.^ The images can be loaded directly from disk, Asphyre archives or even created manually. ^0"
s[300] = "Asphyre.Images.TAsphyreImage^Asphyre.Images.TAsphyreImage.html^2-dimensional image implementation that may contain one or more patterns and/or textures which can be rendered on Asphyre's canvas.^ The image data can be loaded quickly from Asphyre archives or from external file on disk. The image supports different pixel formats with or without alpha-channel, mipmapping and dynamic access. ^0"
s[301] = "Asphyre.Images.TAsphyreImage.IndexOfTexture^Asphyre.Images.TAsphyreImage.html#IndexOfTexture^Inserts the specified texture sample to the list of image's textures and returns its new index.^    ^0"
s[302] = "Asphyre.Images.TAsphyreImage.InsertTexture^Asphyre.Images.TAsphyreImage.html#InsertTexture^Inserts new texture to the end of the list.^ The texture is added to the image's list of textures without initializing. The index of newly added texture is returned.    ^0"
s[303] = "Asphyre.Images.TAsphyreImage.InsertTexture^Asphyre.Images.TAsphyreImage.html#InsertTexture^Inserts new texture to the end of the list.^ The texture is initialized first with the specified size. The reference to newly added texture is returned and the texture is added to image's list of textures only if initialization succeeds. If initialization fails, <code>Nil</code> is returned and no texture is added to the list.    ^0"
s[304] = "Asphyre.Images.TAsphyreImage.LoadFromArchive^Asphyre.Images.TAsphyreImage.html#LoadFromArchive^Loads image in its native Asphyre specification from Asphyre archive.^ The image should be previously added to the archive using <i>AsphyreManager</i> tool.    ^0"
s[305] = "Asphyre.Images.TAsphyreImage.LoadFromFile^Asphyre.Images.TAsphyreImage.html#LoadFromFile^Loads image consisting of a single texture from external file on disk.^ This function returns <code>True</code> on success and <code>False</code> otherwise.    ^0"
s[306] = "Asphyre.Images.TAsphyreImage.LoadFromStream^Asphyre.Images.TAsphyreImage.html#LoadFromStream^Loads image in its native Asphyre specification from the stream.^ This function returns <code>True</code> if it succeeds and <code>False</code> otherwise. This image format is used when adding images to Asphyre archives using <i>AsphyreManager</i> tool.    ^0"
s[307] = "Asphyre.Images.TAsphyreImage.RetrieveTex^Asphyre.Images.TAsphyreImage.html#RetrieveTex^Retrieves the texture's index that matches the specified pattern number.^ The texture mapping coordinates for that pattern are also returned. If no texture matches the specified pattern, -1 is returned and texture mapping coordinates are not modified.    ^0"
s[308] = "Asphyre.Images.TAsphyreImage.RetrieveTex^Asphyre.Images.TAsphyreImage.html#RetrieveTex^Retrieves the texture's index that matches the specified pattern number.^ The texture mapping coordinates for that pattern are also returned. If no texture matches the specified pattern, -1 is returned and texture mapping coordinates are not modified.    ^0"
s[309] = "Asphyre.Images.TAsphyreImage.RemoveAllTextures^Asphyre.Images.TAsphyreImage.html#RemoveAllTextures^Removes and releases all image's textures.^    ^0"
s[310] = "Asphyre.Images.TAsphyreImage.RemoveTexture^Asphyre.Images.TAsphyreImage.html#RemoveTexture^Removes the texture specified by the given index from the list.^ The index should be in range of [0..(TextureCount - 1)]. If the index is outside of valid range, this method does nothing.    ^0"
s[311] = "Asphyre.Images.TAsphyreImage.DynamicImage^Asphyre.Images.TAsphyreImage.html#DynamicImage^Determines whether this image requires frequent access to its pixel data.^ If this parameter is set to <code>True</code>, dynamic textures will be used, where pixel data can be updated frequently. This should be used when image pixels need to be updated at least once per frame. ^0"
s[312] = "Asphyre.Images.TAsphyreImage.MipMapping^Asphyre.Images.TAsphyreImage.html#MipMapping^Determines whether the image should contain mipmap data.^ This can increase memory consumption and slow down the loading of images, but produces better visual results when the image is shrunken to smaller sizes. ^0"
s[313] = "Asphyre.Images.TAsphyreImage.Name^Asphyre.Images.TAsphyreImage.html#Name^The unique name of image that identifies it in the owner's list.^ ^0"
s[314] = "Asphyre.Images.TAsphyreImage.PatternCount^Asphyre.Images.TAsphyreImage.html#PatternCount^The total number of patterns contained within the image.^ ^0"
s[315] = "Asphyre.Images.TAsphyreImage.PatternSize^Asphyre.Images.TAsphyreImage.html#PatternSize^The size of individual pattern inside the image.^ If no patterns are stored, this size should match the texture's size. ^0"
s[316] = "Asphyre.Images.TAsphyreImage.PixelFormat^Asphyre.Images.TAsphyreImage.html#PixelFormat^The pixel format that will be used in all image's textures.^ This parameter is actually a suggestion and different format may be used in the textures, depending on hardware support; if this format is not supported, usually the closest format will be chosen in textures. When loading pixel data from archives or external files, the conversion will be done automatically, if the texture format does not match the stored pixel format. ^0"
s[317] = "Asphyre.Images.TAsphyreImage.Texture^Asphyre.Images.TAsphyreImage.html#Texture^Provides access to image's individual textures by using index, which should be in range of [0..(TextureCount - 1)].^ If the index is outside of valid range, the returned value will be <code>Nil</code>. ^0"
s[318] = "Asphyre.Images.TAsphyreImage.TextureCount^Asphyre.Images.TAsphyreImage.html#TextureCount^The number of textures used in the image.^ ^0"
s[319] = "Asphyre.Images.TAsphyreImage.VisibleSize^Asphyre.Images.TAsphyreImage.html#VisibleSize^The visible area inside of each image's pattern that will be used in rendering.^ This size must be smaller or equal to <a class=\"normal\"  href=\"Asphyre.Images.TAsphyreImage.html#PatternSize\">PatternSize</a>. ^0"
s[320] = "Asphyre.Images.TAsphyreImages^Asphyre.Images.TAsphyreImages.html^The list of 2-dimensional images that may contain many patterns and/or textures which can be rendered on Asphyre's canvas.^ ^0"
s[321] = "Asphyre.Images.TAsphyreImages.AddFromArchive^Asphyre.Images.TAsphyreImages.html#AddFromArchive^Adds a new image to the list and loads its data from the specified Asphyre archive.^ If the function succeeds, the index of newly added image is returned. If the function fails, nothing is added to the list and -1 is returned. This function sets the pixel format that was used for storage to be used for image's texture creation. If the stored pixel format is not supported in hardware, the closest match will be used and the conversion will be done automatically.      Key The archive's key that identifies the image's record. AArchive The reference to the existing instance of Asphyre archive where the image should be loaded from. Name The name of the newly added image to the list. If this parameter is not set (or set to empty StdString), the default image name will be used equalling to <code>Key</code> parameter with any path information stripped. MipMapping This parameter determines whether mipmapping should be automatically enabled for the loaded image.  ^0"
s[322] = "Asphyre.Images.TAsphyreImages.AddFromArchiveEx^Asphyre.Images.TAsphyreImages.html#AddFromArchiveEx^Adds a new image to the list and loads its data from the specified Asphyre archive.^ If the function succeeds, the index of newly added image is returned. If the function fails, nothing is added to the list and -1 is returned. This function when compared to <a class=\"normal\"  href=\"Asphyre.Images.TAsphyreImages.html#AddFromArchive\">AddFromArchive</a> has more parameters to be set for the loaded image.    (PixelFormat The pixel format that should be used for the created image. If this pixel format is not supported in hardware, the closest match will be used. If this value is set to <code>apf_Unknown</code>, the pixel format matching the stored image will be used. If the image is created with different pixel format than the stored one, the conversion will be made automatically.    Key The archive's key that identifies the image's record. AArchive The reference to the existing instance of Asphyre archive where the image should be loaded from. Name The name of the newly added image to the list. If this parameter is not set (or set to empty StdString), the default image name will be used equalling to <code>Key</code> parameter with any path information stripped.   MipMapping This parameter determines whether mipmapping should be automatically enabled for the loaded image. DynamicImage This parameter can be used for specifying that the loaded image will be a dynamic image; that is, its pixel data will be updated frequently.  ^0"
s[323] = "Asphyre.Images.TAsphyreImages.AddFromFile^Asphyre.Images.TAsphyreImages.html#AddFromFile^Adds a new image to the list and loads its data from the specified external file on disk.^ If the function succeeds, the index of newly added image is returned. If the function fails, nothing is added to the list and -1 is returned. This function sets the pixel format that best matches the loaded file's pixel format for image's texture creation. If the source pixel format is not supported in hardware, the closest match will be used and the conversion will be done automatically.     FileName The name of the file to load the image from. The image is loaded using functions from <code>Asphyre.Bitmaps.pas</code>, so to support different image formats it is necessary to add the respective units to the project (e.g. &quot;AsphyrePNG&quot; to USES list). Name The name of the newly added image to the list. If this parameter is not set (or set to empty StdString), the default image name will be used equalling to file name with any path information stripped. MipMapping This parameter determines whether mipmapping should be automatically enabled for the loaded image.  ^0"
s[324] = "Asphyre.Images.TAsphyreImages.AddFromFileEx^Asphyre.Images.TAsphyreImages.html#AddFromFileEx^Adds a new image to the list and loads its data from the specified external file on disk.^ If the function succeeds, the index of newly added image is returned. If the function fails, nothing is added to the list and -1 is returned. This function when compared to <a class=\"normal\"  href=\"Asphyre.Images.TAsphyreImages.html#AddFromFile\">AddFromFile</a> has more parameters to be set for the loaded image.   (PixelFormat The pixel format that should be used for the created image. If this pixel format is not supported in hardware, the closest match will be used. If this value is set to <code>apf_Unknown</code>, the pixel format that closely resembles the image file will be used. If the image is created with different pixel format than the stored one, the conversion will be made automatically.    FileName The name of the file to load the image from. The image is loaded using functions from <code>Asphyre.Bitmaps.pas</code>, so to support different image formats it is necessary to add the respective units to the project (e.g. &quot;AsphyrePNG&quot; to USES list). Name The name of the newly added image to the list. If this parameter is not set (or set to empty StdString), the default image name will be used equalling to file name with any path information stripped.   MipMapping This parameter determines whether mipmapping should be automatically enabled for the loaded image. DynamicImage This parameter can be used for specifying that the loaded image will be a dynamic image; that is, its pixel data will be updated frequently.  ^0"
s[325] = "Asphyre.Images.TAsphyreImages.Include^Asphyre.Images.TAsphyreImages.html#Include^Includes the specified image to the end of the list and returns its index.^ If the image already exists in the list, this function returns the index where the image is found.    ^0"
s[326] = "Asphyre.Images.TAsphyreImages.IndexOf^Asphyre.Images.TAsphyreImages.html#IndexOf^Returns the index of the image having the specified unique name (not case sensitive).^ This function uses binary search for finding the requested image quickly. If the image is not found, -1 is returned.    ^0"
s[327] = "Asphyre.Images.TAsphyreImages.IndexOf^Asphyre.Images.TAsphyreImages.html#IndexOf^Returns the index of the specified image in the list.^ If the image is not in the list, the returned value is -1.    ^0"
s[328] = "Asphyre.Images.TAsphyreImages.Resolve^Asphyre.Images.TAsphyreImages.html#Resolve^Resolves the unique image name and returns its index in the list.^ This function uses meta-data describing all images available to the application and if the specified image name is not found among the existing images, the image is loaded from disk using its meta-data specification. <a class=\"normal\"  href=\"Asphyre.Images.TAsphyreImages.html#OnItemLoad\">OnItemLoad</a> event is called when the image is about to be loaded and <a class=\"normal\"  href=\"Asphyre.Images.TAsphyreImages.html#OnItemFail\">OnItemFail</a> is called when the image is either not found in the meta-data or cannot be loaded with the specified information. If the method succeeds, the index of existing (or loaded) image is returned and -1 is returned otherwise.    ^0"
s[329] = "Asphyre.Images.TAsphyreImages.MarkSearchDirty^Asphyre.Images.TAsphyreImages.html#MarkSearchDirty^Notifies the image list that one of the image's names has been changed and that internal structure should be updated so that methods that search for images by their name can work properly.^    ^0"
s[330] = "Asphyre.Images.TAsphyreImages.Remove^Asphyre.Images.TAsphyreImages.html#Remove^Removes image at the specified index and releases its memory.^ The index must be specified in [0..(ItemCount - 1)] range. If the specified index is outside of valid range, this method does nothing.    ^0"
s[331] = "Asphyre.Images.TAsphyreImages.RemoveAll^Asphyre.Images.TAsphyreImages.html#RemoveAll^Removes all images from the list and releases them from memory.^    ^0"
s[332] = "Asphyre.Images.TAsphyreImages.Image^Asphyre.Images.TAsphyreImages.html#Image^Retrieves the image in the list that has the specified unique name (not case sensitive); binary search is used for looking for the requested image.^ ^0"
s[333] = "Asphyre.Images.TAsphyreImages.ItemCount^Asphyre.Images.TAsphyreImages.html#ItemCount^The number of images in the list.^ ^0"
s[334] = "Asphyre.Images.TAsphyreImages.Items^Asphyre.Images.TAsphyreImages.html#Items^Provides access to individual images in the list by using index that should be specified in [0..(ItemCount - 1)] range.^ If the index is outside of valid range, the returned value is <code>Nil</code>. ^0"
s[335] = "Asphyre.Images.TAsphyreImages.OnItemFail^Asphyre.Images.TAsphyreImages.html#OnItemFail^This event occurs when the requested image could not be loaded inside <a class=\"normal\"  href=\"Asphyre.Images.TAsphyreImages.html#Resolve\">Resolve</a> function either because its meta-data is not found or because it could not be loaded from its specified location.^ ^0"
s[336] = "Asphyre.Images.TAsphyreImages.OnItemLoad^Asphyre.Images.TAsphyreImages.html#OnItemLoad^This event occurs when a new image is being loaded on request inside <a class=\"normal\"  href=\"Asphyre.Images.TAsphyreImages.html#Resolve\">Resolve</a> function.^ ^0"
s[337] = "Asphyre.Math^Asphyre.Math.html^Mathematical types and functions that facilitate working with common tasks.^ This unit includes a complete functional set of 2D, 3D and 4D vectors, 3D and 4D matrices and quaternions. ^0"
s[338] = "Asphyre.Math.TAsphyreMatrix^Asphyre.Math.TAsphyreMatrix.html^High-level 4x4 matrix class that facilitates working with matrices for moving objects, cameras and projections.^ The matrix information is aligned on 16-byte boundaries, which allows it to be used with aligned SSE assembly instructions for improved performance. ^0"
s[339] = "Asphyre.Math.TAsphyreMatrix.HeadingPitchBank^Asphyre.Math.TAsphyreMatrix.html#HeadingPitchBank^Loads a new matrix containing 3D rotation based on parameters similar to flight dynamics, specifically heading, pitch and Bank.^ Each of the components is specified individually.    ^0"
s[340] = "Asphyre.Math.TAsphyreMatrix.HeadingPitchBank^Asphyre.Math.TAsphyreMatrix.html#HeadingPitchBank^Loads a new matrix containing 3D rotation based on parameters similar to flight dynamics, specifically heading, pitch and bank.^ The components are taken from the specified vector with Y corresponding to heading, X to pitch and Z to bank.    ^0"
s[341] = "Asphyre.Math.TAsphyreMatrix.Inverse^Asphyre.Math.TAsphyreMatrix.html#Inverse^Calculates and loads the inverse of the current matrix.^ The resulting matrix, in other words, is the transformation that can be applied to a 3D vector to undo the transformation applied to it previously.    ^0"
s[342] = "Asphyre.Math.TAsphyreMatrix.InverseTranspose^Asphyre.Math.TAsphyreMatrix.html#InverseTranspose^Calculates the inverse of the current matrix and then transposes it.^ This is mostly useful for transforming the normals of the 3D mesh.    ^0"
s[343] = "Asphyre.Math.TAsphyreMatrix.LoadIdentity^Asphyre.Math.TAsphyreMatrix.html#LoadIdentity^Loads an identity matrix equal to <a class=\"normal\"  href=\"Asphyre.Math.html#IdentityMtx4\">IdentityMtx4</a> into this class.^    ^0"
s[344] = "Asphyre.Math.TAsphyreMatrix.LoadMtx^Asphyre.Math.TAsphyreMatrix.html#LoadMtx^Loads the contents of the matrix specified by the pointer into this class.^    ^0"
s[345] = "Asphyre.Math.TAsphyreMatrix.LoadMtx^Asphyre.Math.TAsphyreMatrix.html#LoadMtx^Loads the contents of the specified matrix into this class.^    ^0"
s[346] = "Asphyre.Math.TAsphyreMatrix.LoadRotation^Asphyre.Math.TAsphyreMatrix.html#LoadRotation^Loads the rotation information from matrix specified by the given pointer.^ In other words, only 3x3 part of the matrix is loaded with the rest of contents replaced by identity matrix.    ^0"
s[347] = "Asphyre.Math.TAsphyreMatrix.LoadZero^Asphyre.Math.TAsphyreMatrix.html#LoadZero^Loads a zero matrix equal to <a class=\"normal\"  href=\"Asphyre.Math.html#ZeroMtx4\">ZeroMtx4</a> into this class.^    ^0"
s[348] = "Asphyre.Math.TAsphyreMatrix.LookAt^Asphyre.Math.TAsphyreMatrix.html#LookAt^Multiplies the contents of the current matrix by a so-called &quot;View&quot; matrix, which is created by defining camera's position, its target and the vertical axis or &quot;roof&quot;.^ In typical applications, it is recommended to call <a class=\"normal\"  href=\"Asphyre.Math.TAsphyreMatrix.html#LoadIdentity\">LoadIdentity</a> before this method.    ^0"
s[349] = "Asphyre.Math.TAsphyreMatrix.Multiply^Asphyre.Math.TAsphyreMatrix.html#Multiply^Multiplies the current matrix by another matrix specified by the given pointer.^    ^0"
s[350] = "Asphyre.Math.TAsphyreMatrix.Multiply^Asphyre.Math.TAsphyreMatrix.html#Multiply^Multiples the current matrix by another matrix given as a parameter.^    ^0"
s[351] = "Asphyre.Math.TAsphyreMatrix.Multiply^Asphyre.Math.TAsphyreMatrix.html#Multiply^Multiplies the current matrix by another matrix from another <a class=\"normal\"  href=\"Asphyre.Math.TAsphyreMatrix.html\">TAsphyreMatrix</a> class.^    ^0"
s[352] = "Asphyre.Math.TAsphyreMatrix.OrthogonalBDS^Asphyre.Math.TAsphyreMatrix.html#OrthogonalBDS^Loads orthogonal projection matrix defined by the individual axis's boundaries.^    ^0"
s[353] = "Asphyre.Math.TAsphyreMatrix.OrthogonalVOL^Asphyre.Math.TAsphyreMatrix.html#OrthogonalVOL^Loads orthogonal projection matrix defined by the viewing volume in 3D space.^    ^0"
s[354] = "Asphyre.Math.TAsphyreMatrix.PerspectiveBDS^Asphyre.Math.TAsphyreMatrix.html#PerspectiveBDS^Loads perspective projection matrix defined by the individual axis's boundaries.^    ^0"
s[355] = "Asphyre.Math.TAsphyreMatrix.PerspectiveFOVX^Asphyre.Math.TAsphyreMatrix.html#PerspectiveFOVX^Loads perspective projection matrix defined by a field of view on X axis.^ In 3D shooters the field of view needs to be adjusted to allow more visible area on wide-screen monitors. The parameters that define the viewed range are important for defining the precision of the depth transformation or a depth-buffer.      FieldOfView The camera's field of view in radians. For example Pi/4. AspectRatio The screen's aspect ratio. Can be calculated as x/y. MinRange The closest range at which the scene will be viewed. MaxRange The farthest range at which the scene will be viewed.  ^0"
s[356] = "Asphyre.Math.TAsphyreMatrix.PerspectiveFOVY^Asphyre.Math.TAsphyreMatrix.html#PerspectiveFOVY^Loads perspective projection matrix defined by a field of view on Y axis.^ This is a common way for typical 3D applications. In 3D shooters special care is to be taken because on wide-screen monitors the visible area will be bigger. The parameters that define the viewed range are important for defining the precision of the depth transformation or a depth-buffer.      FieldOfView The camera's field of view in radians. For example Pi/4. AspectRatio The screen's aspect ratio. Can be calculated as y/x. MinRange The closest range at which the scene will be viewed. MaxRange The farthest range at which the scene will be viewed.  ^0"
s[357] = "Asphyre.Math.TAsphyreMatrix.PerspectiveVOL^Asphyre.Math.TAsphyreMatrix.html#PerspectiveVOL^Loads perspective projection matrix defined by the viewing volume in 3D space.^    ^0"
s[358] = "Asphyre.Math.TAsphyreMatrix.RotateX^Asphyre.Math.TAsphyreMatrix.html#RotateX^Applies rotation to the current matrix around global X axis specified by the given angle (in radians).^    ^0"
s[359] = "Asphyre.Math.TAsphyreMatrix.RotateXLocal^Asphyre.Math.TAsphyreMatrix.html#RotateXLocal^Applies rotation to the current matrix around local X axis specified by the given angle (in radians).^    ^0"
s[360] = "Asphyre.Math.TAsphyreMatrix.RotateY^Asphyre.Math.TAsphyreMatrix.html#RotateY^Applies rotation to the current matrix around global Y axis specified by the given angle (in radians).^    ^0"
s[361] = "Asphyre.Math.TAsphyreMatrix.RotateYLocal^Asphyre.Math.TAsphyreMatrix.html#RotateYLocal^Applies rotation to the current matrix around local Y axis specified by the given angle (in radians).^    ^0"
s[362] = "Asphyre.Math.TAsphyreMatrix.RotateZ^Asphyre.Math.TAsphyreMatrix.html#RotateZ^Applies rotation to the current matrix around global Z axis specified by the given angle (in radians).^    ^0"
s[363] = "Asphyre.Math.TAsphyreMatrix.RotateZLocal^Asphyre.Math.TAsphyreMatrix.html#RotateZLocal^Applies rotation to the current matrix around local Z axis specified by the given angle (in radians).^    ^0"
s[364] = "Asphyre.Math.TAsphyreMatrix.Scale^Asphyre.Math.TAsphyreMatrix.html#Scale^Applies scaling to the current matrix specified by the given 3D vector.^    ^0"
s[365] = "Asphyre.Math.TAsphyreMatrix.Scale^Asphyre.Math.TAsphyreMatrix.html#Scale^Applies scaling to the current matrix specified by the components of each individual axis.^    ^0"
s[366] = "Asphyre.Math.TAsphyreMatrix.Scale^Asphyre.Math.TAsphyreMatrix.html#Scale^Applies uniform scaling to the current matrix specified by a single coefficient.^    ^0"
s[367] = "Asphyre.Math.TAsphyreMatrix.Translate^Asphyre.Math.TAsphyreMatrix.html#Translate^Applies translation to the current matrix specified by the given 3D vector.^    ^0"
s[368] = "Asphyre.Math.TAsphyreMatrix.Translate^Asphyre.Math.TAsphyreMatrix.html#Translate^Applies translation to the current matrix specified by the components of each individual axis.^    ^0"
s[369] = "Asphyre.Math.TAsphyreMatrix.Transpose^Asphyre.Math.TAsphyreMatrix.html#Transpose^Transposes the current matrix.^ That is, the rows become columns and vice-versa.    ^0"
s[370] = "Asphyre.Math.TAsphyreMatrix.YawPitchRoll^Asphyre.Math.TAsphyreMatrix.html#YawPitchRoll^Loads a new matrix containing 3D rotation based on parameters similar to flight dynamics, specifically yaw, pitch and roll.^ Each of the components is specified individually.    ^0"
s[371] = "Asphyre.Math.TAsphyreMatrix.YawPitchRoll^Asphyre.Math.TAsphyreMatrix.html#YawPitchRoll^Loads a new matrix containing 3D rotation based on parameters similar to flight dynamics, specifically yaw, pitch and roll.^ The components are taken from the specified vector with Y corresponding to yaw, X to pitch and Z to roll.    ^0"
s[372] = "Asphyre.Math.TAsphyreMatrix.EyePos^Asphyre.Math.TAsphyreMatrix.html#EyePos^If the matrix defines camera view, this property returns the supposed camera (or &quot;eye&quot;) position as a 3D vector.^ ^0"
s[373] = "Asphyre.Math.TAsphyreMatrix.RawMtx^Asphyre.Math.TAsphyreMatrix.html#RawMtx^Pointer th the actual <a class=\"normal\"  href=\"Asphyre.Math.TMatrix4.html\">TMatrix4</a> internal structure.^ This pointer is always aligned to 16-byte boundaries so that the resulting matrix can be used with aligned SSE assembly instructions. ^0"
s[374] = "Asphyre.Math.TAsphyreMatrix.WorldPos^Asphyre.Math.TAsphyreMatrix.html#WorldPos^If the matrix defines world or object position, this property returns the supposed position as a 3D vector.^ ^0"
s[375] = "Asphyre.Math.TMatrix3^Asphyre.Math.TMatrix3.html^3x3 transformation matrix.^ ^0"
s[376] = "Asphyre.Math.TMatrix3.Data^Asphyre.Math.TMatrix3.html#Data^Individual matrix values.^ ^0"
s[377] = "Asphyre.Math.TMatrix4^Asphyre.Math.TMatrix4.html^4x4 transformation matrix.^ ^0"
s[378] = "Asphyre.Math.TMatrix4.Data^Asphyre.Math.TMatrix4.html#Data^Individual matrix values.^ ^0"
s[379] = "Asphyre.Math.TPoint2^Asphyre.Math.TPoint2.html^2D floating-point vector.^ ^0"
s[380] = "Asphyre.Math.TPoint2.x^Asphyre.Math.TPoint2.html#x^The coordinate in 2D space.^ ^0"
s[381] = "Asphyre.Math.TPoint2.y^Asphyre.Math.TPoint2.html#y^The coordinate in 2D space.^ ^0"
s[382] = "Asphyre.Math.TPoint2px^Asphyre.Math.TPoint2px.html^2D integer vector.^ ^0"
s[383] = "Asphyre.Math.TPoint2px.x^Asphyre.Math.TPoint2px.html#x^The coordinate in 2D space.^ ^0"
s[384] = "Asphyre.Math.TPoint2px.y^Asphyre.Math.TPoint2px.html#y^The coordinate in 2D space.^ ^0"
s[385] = "Asphyre.Math.TPoints2^Asphyre.Math.TPoints2.html^A general-purpose list of 2D floating-point vectors.^ ^0"
s[386] = "Asphyre.Math.TPoints2.Add^Asphyre.Math.TPoints2.html#Add^Inserts the new vector to the list.^    ^0"
s[387] = "Asphyre.Math.TPoints2.Add^Asphyre.Math.TPoints2.html#Add^Inserts the vector with the specified coordinates to the list.^    ^0"
s[388] = "Asphyre.Math.TPoints2.IndexOf^Asphyre.Math.TPoints2.html#IndexOf^Finds the element given by the vector in the list and returns its index.^    ^0"
s[389] = "Asphyre.Math.TPoints2.IndexOf^Asphyre.Math.TPoints2.html#IndexOf^Finds the element given by the coordinates in the list and returns its index.^    ^0"
s[390] = "Asphyre.Math.TPoints2.AddFrom^Asphyre.Math.TPoints2.html#AddFrom^Adds all elements from the source list to this one.^    ^0"
s[391] = "Asphyre.Math.TPoints2.CopyFrom^Asphyre.Math.TPoints2.html#CopyFrom^Copies the entire contents from the source list to this one.^    ^0"
s[392] = "Asphyre.Math.TPoints2.Remove^Asphyre.Math.TPoints2.html#Remove^Removes the specified element from the list.^    ^0"
s[393] = "Asphyre.Math.TPoints2.RemoveAll^Asphyre.Math.TPoints2.html#RemoveAll^Removes all elements from the list.^    ^0"
s[394] = "Asphyre.Math.TPoints2.Count^Asphyre.Math.TPoints2.html#Count^The total number of elements in the list.^ ^0"
s[395] = "Asphyre.Math.TPoints2.Items^Asphyre.Math.TPoints2.html#Items^A direct access to each of the elements in the list.^ The first element has index of 0 and the last element is <a class=\"normal\"  href=\"Asphyre.Math.TPoints2.html#Count\">Count</a> - 1. ^0"
s[396] = "Asphyre.Math.TPoints2px^Asphyre.Math.TPoints2px.html^A general-purpose list of 2D integer vectors.^ ^0"
s[397] = "Asphyre.Math.TPoints2px.Add^Asphyre.Math.TPoints2px.html#Add^Inserts the new vector to the list.^    ^0"
s[398] = "Asphyre.Math.TPoints2px.Add^Asphyre.Math.TPoints2px.html#Add^Inserts the vector with the specified coordinates to the list.^    ^0"
s[399] = "Asphyre.Math.TPoints2px.IndexOf^Asphyre.Math.TPoints2px.html#IndexOf^Finds the element given by the vector in the list and returns its index.^    ^0"
s[400] = "Asphyre.Math.TPoints2px.IndexOf^Asphyre.Math.TPoints2px.html#IndexOf^Finds the element given by the coordinates in the list and returns its index.^    ^0"
s[401] = "Asphyre.Math.TPoints2px.AddFrom^Asphyre.Math.TPoints2px.html#AddFrom^Adds all elements from the source list to this one.^    ^0"
s[402] = "Asphyre.Math.TPoints2px.CopyFrom^Asphyre.Math.TPoints2px.html#CopyFrom^Copies the entire contents from the source list to this one.^    ^0"
s[403] = "Asphyre.Math.TPoints2px.Remove^Asphyre.Math.TPoints2px.html#Remove^Removes the specified element from the list.^    ^0"
s[404] = "Asphyre.Math.TPoints2px.RemoveAll^Asphyre.Math.TPoints2px.html#RemoveAll^Removes all elements from the list.^    ^0"
s[405] = "Asphyre.Math.TPoints2px.Count^Asphyre.Math.TPoints2px.html#Count^The total number of elements in the list.^ ^0"
s[406] = "Asphyre.Math.TPoints2px.Items^Asphyre.Math.TPoints2px.html#Items^A direct access to each of the elements in the list.^ The first element has index of 0 and the last element is <a class=\"normal\"  href=\"Asphyre.Math.TPoints2px.html#Count\">Count</a> - 1. ^0"
s[407] = "Asphyre.Math.TQuaternion^Asphyre.Math.TQuaternion.html^3D quaternion^ ^0"
s[408] = "Asphyre.Math.TQuaternion.w^Asphyre.Math.TQuaternion.html#w^^ ^0"
s[409] = "Asphyre.Math.TQuaternion.x^Asphyre.Math.TQuaternion.html#x^^ ^0"
s[410] = "Asphyre.Math.TQuaternion.y^Asphyre.Math.TQuaternion.html#y^^ ^0"
s[411] = "Asphyre.Math.TQuaternion.z^Asphyre.Math.TQuaternion.html#z^^ ^0"
s[412] = "Asphyre.Math.TVector3^Asphyre.Math.TVector3.html^3D floating-point vector.^ ^0"
s[413] = "Asphyre.Math.TVector3.x^Asphyre.Math.TVector3.html#x^The coordinate in 3D space.^ ^0"
s[414] = "Asphyre.Math.TVector3.y^Asphyre.Math.TVector3.html#y^The coordinate in 3D space.^ ^0"
s[415] = "Asphyre.Math.TVector3.z^Asphyre.Math.TVector3.html#z^The coordinate in 3D space.^ ^0"
s[416] = "Asphyre.Math.TVector3.GetXY^Asphyre.Math.TVector3.html#GetXY^Returns (x, y) portion of 3D vector as <a class=\"normal\"  href=\"Asphyre.Math.TPoint2.html\">TPoint2</a>.^    ^0"
s[417] = "Asphyre.Math.TVector3.GetXYpx^Asphyre.Math.TVector3.html#GetXYpx^Returns (x, y) portion of 3D vector as <code>TTPoint2px</code> rounding values down to integers.^    ^0"
s[418] = "Asphyre.Math.TVector4^Asphyre.Math.TVector4.html^4D (3D + w) floating-point vector.^ ^0"
s[419] = "Asphyre.Math.TVector4.x^Asphyre.Math.TVector4.html#x^The coordinate in 3D space.^ ^0"
s[420] = "Asphyre.Math.TVector4.y^Asphyre.Math.TVector4.html#y^The coordinate in 3D space.^ ^0"
s[421] = "Asphyre.Math.TVector4.z^Asphyre.Math.TVector4.html#z^The coordinate in 3D space.^ ^0"
s[422] = "Asphyre.Math.TVector4.w^Asphyre.Math.TVector4.html#w^Homogeneous transform coordinate, mostly used for perspective projection.^ Typically, this component is set to 1.0. ^0"
s[423] = "Asphyre.Math.TVector4.GetXYZ^Asphyre.Math.TVector4.html#GetXYZ^Returns (x, y, z) portion of 4D vector.^    ^0"
s[424] = "Asphyre.Math.TVectors3^Asphyre.Math.TVectors3.html^A general-purpose list of 3D floating-point vectors.^ ^0"
s[425] = "Asphyre.Math.TVectors3.Add^Asphyre.Math.TVectors3.html#Add^Inserts the new vector to the list.^    ^0"
s[426] = "Asphyre.Math.TVectors3.Add^Asphyre.Math.TVectors3.html#Add^Inserts the vector with the specified coordinates to the list.^    ^0"
s[427] = "Asphyre.Math.TVectors3.IndexOf^Asphyre.Math.TVectors3.html#IndexOf^Finds the element given by the vector in the list and returns its index.^    ^0"
s[428] = "Asphyre.Math.TVectors3.IndexOf^Asphyre.Math.TVectors3.html#IndexOf^Finds the element given by the coordinates in the list and returns its index.^    ^0"
s[429] = "Asphyre.Math.TVectors3.AddFrom^Asphyre.Math.TVectors3.html#AddFrom^Adds all elements from the source list to this one.^    ^0"
s[430] = "Asphyre.Math.TVectors3.AddFromPtr^Asphyre.Math.TVectors3.html#AddFromPtr^Add elements from custom pointer location.^    ^0"
s[431] = "Asphyre.Math.TVectors3.Centralize^Asphyre.Math.TVectors3.html#Centralize^Assuming that the vectors in the list represent a 3D mesh, this method calculates the minimal and maximum boundaries and then translates the vertices so that the resulting mesh is centered around zero point.^    ^0"
s[432] = "Asphyre.Math.TVectors3.CopyFrom^Asphyre.Math.TVectors3.html#CopyFrom^Copies the entire contents from the source list to this one.^    ^0"
s[433] = "Asphyre.Math.TVectors3.Invert^Asphyre.Math.TVectors3.html#Invert^Inverts all the vectors in the list by pointing them into an opposite direction.^    ^0"
s[434] = "Asphyre.Math.TVectors3.Normalize^Asphyre.Math.TVectors3.html#Normalize^Normalizes all the vectors in the list to make them having unity length.^    ^0"
s[435] = "Asphyre.Math.TVectors3.Remove^Asphyre.Math.TVectors3.html#Remove^Removes the specified element from the list.^    ^0"
s[436] = "Asphyre.Math.TVectors3.RemoveAll^Asphyre.Math.TVectors3.html#RemoveAll^Removes all elements from the list.^    ^0"
s[437] = "Asphyre.Math.TVectors3.Rescale^Asphyre.Math.TVectors3.html#Rescale^Rescales all the vectors in the list by the specified coefficient.^    ^0"
s[438] = "Asphyre.Math.TVectors3.Rescale^Asphyre.Math.TVectors3.html#Rescale^Rescales all the vectors in the list by the specified coefficient.^    ^0"
s[439] = "Asphyre.Math.TVectors3.Count^Asphyre.Math.TVectors3.html#Count^The total number of elements in the list.^ ^0"
s[440] = "Asphyre.Math.TVectors3.Items^Asphyre.Math.TVectors3.html#Items^A direct access to each of the elements in the list.^ The first element has index of 0 and the last element is <a class=\"normal\"  href=\"Asphyre.Math.TVectors3.html#Count\">Count</a> - 1. ^0"
s[441] = "Asphyre.Math.TVectors4^Asphyre.Math.TVectors4.html^A general-purpose list of 4D (3D + w) floating-point vectors.^ ^0"
s[442] = "Asphyre.Math.TVectors4.Add^Asphyre.Math.TVectors4.html#Add^Inserts the vector with the specified coordinates to the list.^    ^0"
s[443] = "Asphyre.Math.TVectors4.Add^Asphyre.Math.TVectors4.html#Add^Inserts the new vector to the list.^    ^0"
s[444] = "Asphyre.Math.TVectors4.AddFrom^Asphyre.Math.TVectors4.html#AddFrom^Adds all elements from the source list to this one.^    ^0"
s[445] = "Asphyre.Math.TVectors4.AddTransform^Asphyre.Math.TVectors4.html#AddTransform^Adds 3D vectors from source list, transforming them by the given matrix.^    ^0"
s[446] = "Asphyre.Math.TVectors4.AddTransform^Asphyre.Math.TVectors4.html#AddTransform^Adds 4D vectors from source list, transforming them by the given matrix.^    ^0"
s[447] = "Asphyre.Math.TVectors4.CopyFrom^Asphyre.Math.TVectors4.html#CopyFrom^Copies the entire contents from the source list to this one.^    ^0"
s[448] = "Asphyre.Math.TVectors4.CopyTransform^Asphyre.Math.TVectors4.html#CopyTransform^Copies 4D vectors from source list, transforming them by the given matrix.^    ^0"
s[449] = "Asphyre.Math.TVectors4.CopyTransform^Asphyre.Math.TVectors4.html#CopyTransform^Copies 3D vectors from source list, transforming them by the given matrix.^    ^0"
s[450] = "Asphyre.Math.TVectors4.Remove^Asphyre.Math.TVectors4.html#Remove^Removes the specified element from the list.^    ^0"
s[451] = "Asphyre.Math.TVectors4.RemoveAll^Asphyre.Math.TVectors4.html#RemoveAll^Removes all elements from the list.^    ^0"
s[452] = "Asphyre.Math.TVectors4.Count^Asphyre.Math.TVectors4.html#Count^The total number of elements in the list.^ ^0"
s[453] = "Asphyre.Math.TVectors4.Items^Asphyre.Math.TVectors4.html#Items^A direct access to each of the elements in the list.^ The first element has index of 0 and the last element is <a class=\"normal\"  href=\"Asphyre.Math.TVectors4.html#Count\">Count</a> - 1. ^0"
s[454] = "Asphyre.Math.AxisXVec3^Asphyre.Math.html#AxisXVec3^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> that defines X axis.^ ^0"
s[455] = "Asphyre.Math.AxisXVec4^Asphyre.Math.html#AxisXVec4^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> that defines X axis.^ ^0"
s[456] = "Asphyre.Math.AxisYVec3^Asphyre.Math.html#AxisYVec3^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> that defines Y axis.^ ^0"
s[457] = "Asphyre.Math.AxisYVec4^Asphyre.Math.html#AxisYVec4^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> that defines Y axis.^ ^0"
s[458] = "Asphyre.Math.AxisZVec3^Asphyre.Math.html#AxisZVec3^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> that defines Z axis.^ ^0"
s[459] = "Asphyre.Math.AxisZVec4^Asphyre.Math.html#AxisZVec4^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> that defines Z axis.^ ^0"
s[460] = "Asphyre.Math.IdentityMtx3^Asphyre.Math.html#IdentityMtx3^3x3 matrix values representing identity.^ This can be used either for matrix initialization or where no transformation should be applied. ^0"
s[461] = "Asphyre.Math.IdentityMtx4^Asphyre.Math.html#IdentityMtx4^4x4 matrix values representing identity.^ This can be used either for matrix initialization or where no transformation should be applied. ^0"
s[462] = "Asphyre.Math.IdentityQuat^Asphyre.Math.html#IdentityQuat^Identity quaternion that can be used to specify an object with no rotation.^ ^0"
s[463] = "Asphyre.Math.InfPoint2px^Asphyre.Math.html#InfPoint2px^Infinity constant for <a class=\"normal\"  href=\"Asphyre.Math.TPoint2px.html\">TPoint2px</a>.^ In certain situations this vector is used to identify unknown vector value. ^0"
s[464] = "Asphyre.Math.UnityPoint2px^Asphyre.Math.html#UnityPoint2px^Unity constant for <a class=\"normal\"  href=\"Asphyre.Math.TPoint2px.html\">TPoint2px</a> that can be used for vector initialization.^ ^0"
s[465] = "Asphyre.Math.UnityVec2^Asphyre.Math.html#UnityVec2^Unity constant for <a class=\"normal\"  href=\"Asphyre.Math.TPoint2.html\">TPoint2</a> that can be used for vector initialization.^ ^0"
s[466] = "Asphyre.Math.UnityVec3^Asphyre.Math.html#UnityVec3^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> that can be used as a parameter to some function and for vector initialization.^ This vector, however, contradictory to its name is actually not a unity vector in mathematical terms. ^0"
s[467] = "Asphyre.Math.UnityVec4^Asphyre.Math.html#UnityVec4^Special constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> that can be used as a parameter to some function and for vector initialization.^ This vector, however, contradictory to its name is actually not a unity vector in mathematical terms. ^0"
s[468] = "Asphyre.Math.ZeroMtx3^Asphyre.Math.html#ZeroMtx3^3x3 matrix values containing zeros.^ This can be used in special occasions for matrix initialization or where no valid matrix exists. ^0"
s[469] = "Asphyre.Math.ZeroMtx4^Asphyre.Math.html#ZeroMtx4^4x4 matrix values containing zeros.^ This can be used in special occasions for matrix initialization or where no valid matrix exists. ^0"
s[470] = "Asphyre.Math.ZeroPoint2px^Asphyre.Math.html#ZeroPoint2px^Zero constant for <a class=\"normal\"  href=\"Asphyre.Math.TPoint2px.html\">TPoint2px</a> that can be used for vector initialization.^ ^0"
s[471] = "Asphyre.Math.ZeroVec2^Asphyre.Math.html#ZeroVec2^Zero constant for <a class=\"normal\"  href=\"Asphyre.Math.TPoint2.html\">TPoint2</a> that can be used for vector initialization.^ ^0"
s[472] = "Asphyre.Math.ZeroVec3^Asphyre.Math.html#ZeroVec3^Zero constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> that can be used as a parameter to some function and for vector initialization.^ ^0"
s[473] = "Asphyre.Math.ZeroVec4^Asphyre.Math.html#ZeroVec4^Zero constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> that can be used as a parameter to some function and for vector initialization.^ In this case, homogeneous is set to zero. ^0"
s[474] = "Asphyre.Math.ZeroVec4H^Asphyre.Math.html#ZeroVec4H^Zero constant for <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> that can be used as a parameter to some function and for vector initialization.^ In this case, homogeneous is set to one. ^0"
s[475] = "Asphyre.Math.Angle2^Asphyre.Math.html#Angle2^Returns the angle (in radians) at which the 2D vector is pointing at.^    ^0"
s[476] = "Asphyre.Math.Angle2px^Asphyre.Math.html#Angle2px^Returns the angle (in radians) at which the 2D vector is pointing at.^    ^0"
s[477] = "Asphyre.Math.Angle3^Asphyre.Math.html#Angle3^Calculates the angle between two 3D vectors.^ The returning value has range of [0..Pi].    ^0"
s[478] = "Asphyre.Math.ColorToVec3^Asphyre.Math.html#ColorToVec3^Converts Red, Green and Blue components of 32-bit color to X, Y and Z components of 3D vector accordingly.^ This can be useful for making calculations with the color as if it was a 3D vector.    ^0"
s[479] = "Asphyre.Math.ColorToVec4^Asphyre.Math.html#ColorToVec4^Converts Red, Green, Blue and Alpha components of 32-bit color to X, Y, Z and W components of 4D vector accordingly.^ This can be useful for making calculations with the color as if it was a 4D vector.    ^0"
s[480] = "Asphyre.Math.ConjugateQuat^Asphyre.Math.html#ConjugateQuat^Computes the quaternion's conjugate.^ The resulting quaternion has opposite rotation to the original quaternion.    ^0"
s[481] = "Asphyre.Math.Cross2^Asphyre.Math.html#Cross2^Calculates a so-called &quot;cross product&quot; of 2D vectors, or analog of thereof.^    ^0"
s[482] = "Asphyre.Math.Cross2px^Asphyre.Math.html#Cross2px^Calculates a so-called &quot;cross product&quot; of 2D vectors, or analog of thereof.^    ^0"
s[483] = "Asphyre.Math.Cross3^Asphyre.Math.html#Cross3^Calculates the cross-product of the specified 3D vectors.^ The resulting vector is perpendicular to both source vectors and normal to the plane containing them.    ^0"
s[484] = "Asphyre.Math.Dot2^Asphyre.Math.html#Dot2^Calculates the dot-product of the specified 2D vectors.^ The dot-product is an indirect measure of the angle between two vectors.    ^0"
s[485] = "Asphyre.Math.Dot2px^Asphyre.Math.html#Dot2px^Calculates the dot-product of the specified 2D vectors.^ The dot-product is an indirect measure of the angle between two vectors.    ^0"
s[486] = "Asphyre.Math.Dot3^Asphyre.Math.html#Dot3^Calculates the dot-product of the specified 3D vectors.^ The dot-product is an indirect measure of the angle between two vectors.    ^0"
s[487] = "Asphyre.Math.DotQuat^Asphyre.Math.html#DotQuat^Computes the dot product of the two given quaternions.^    ^0"
s[488] = "Asphyre.Math.ExpQuat^Asphyre.Math.html#ExpQuat^Computes the exponentiation of the given quaternion.^    ^0"
s[489] = "Asphyre.Math.GetEyePos4^Asphyre.Math.html#GetEyePos4^Assuming that the specified matrix is a view matrix, this method calculates the 3D position where the camera (or &quot;eye&quot;) is supposedly located.^    ^0"
s[490] = "Asphyre.Math.GetWorldPos4^Asphyre.Math.html#GetWorldPos4^Assuming that the specified matrix is a world matrix, this method calculates the 3D position where the object or world is supposedly located.^    ^0"
s[491] = "Asphyre.Math.HeadingPitchBankMtx4^Asphyre.Math.html#HeadingPitchBankMtx4^Creates 4x4 matrix containing 3D rotation based on parameters similar to flight dynamics, specifically heading, pitch and bank.^ The components are taken from the specified vector with Y corresponding to heading, X to pitch and Z to bank.    ^0"
s[492] = "Asphyre.Math.HeadingPitchBankMtx4^Asphyre.Math.html#HeadingPitchBankMtx4^Creates 4x4 matrix containing 3D rotation based on parameters similar to flight dynamics, specifically heading, pitch and Bank.^ Each of the components is specified individually.    ^0"
s[493] = "Asphyre.Math.InvertMtx4^Asphyre.Math.html#InvertMtx4^Calculates the inverse of the matrix.^ The resulting matrix, in other words, is the transformation that can be applied to a 3D vector to undo the transformation applied previously.    ^0"
s[494] = "Asphyre.Math.Length2^Asphyre.Math.html#Length2^Returns the length of the specified 2D vector.^    ^0"
s[495] = "Asphyre.Math.Length2px^Asphyre.Math.html#Length2px^Returns the length of the specified 2D vector.^    ^0"
s[496] = "Asphyre.Math.Length3^Asphyre.Math.html#Length3^Returns the length of the specified 3D vector.^    ^0"
s[497] = "Asphyre.Math.Length4^Asphyre.Math.html#Length4^Returns the length of the specified 4D vector.^    ^0"
s[498] = "Asphyre.Math.Lerp2^Asphyre.Math.html#Lerp2^Interpolates between the specified two 2D vectors.^     v0 The first vector to be used in the interpolation v1 The second vector to be used in the interpolation Alpha The mixture of the two vectors with the a range of [0..1].  ^0"
s[499] = "Asphyre.Math.Lerp2px^Asphyre.Math.html#Lerp2px^Interpolates between the specified two vectors.^     v0 The first vector to be used in the interpolation v1 The second vector to be used in the interpolation Alpha The mixture of the two vectors with the a range of [0..1].  ^0"
s[500] = "Asphyre.Math.Lerp3^Asphyre.Math.html#Lerp3^Interpolates between the specified two 3D vectors.^     v0 The first vector to be used in the interpolation v1 The second vector to be used in the interpolation Alpha The mixture of the two vectors with the a range of [0..1].  ^0"
s[501] = "Asphyre.Math.Lerp4^Asphyre.Math.html#Lerp4^Interpolates between the specified two 4D vectors.^     v0 The first vector to be used in the interpolation v1 The second vector to be used in the interpolation Alpha The mixture of the two vectors with the a range of [0..1].  ^0"
s[502] = "Asphyre.Math.LookAtMtx4^Asphyre.Math.html#LookAtMtx4^Creates a view matrix that is defined by the camera's position, its target and the defined vertical axis or so-called &quot;roof&quot;.^    ^0"
s[503] = "Asphyre.Math.Norm2^Asphyre.Math.html#Norm2^Normalizes the specified 2D vector to unity length.^ The second parameter is used to prevent division by zero in vectors that are of zero length.    ^0"
s[504] = "Asphyre.Math.Norm3^Asphyre.Math.html#Norm3^Normalizes the specified 3D vector to unity length.^ The second parameter is used to prevent division by zero in vectors that are of zero length.    ^0"
s[505] = "Asphyre.Math.Norm4^Asphyre.Math.html#Norm4^Normalizes the specified 4D vector to unity length.^ The second parameter is used to prevent division by zero in vectors that are of zero length.    ^0"
s[506] = "Asphyre.Math.NormalizeQuat^Asphyre.Math.html#NormalizeQuat^Normalizes the given quaternion.^ Note that normally quaternions are always normalized (of course, within limits of numerical precision). This function is provided mainly to combat floating point &quot;error creep&quot;, which occurs after many successive quaternion operations.    ^0"
s[507] = "Asphyre.Math.OrthogonalBDSMtx4^Asphyre.Math.html#OrthogonalBDSMtx4^Creates orthogonal projection matrix defined by the individual axis's boundaries.^    ^0"
s[508] = "Asphyre.Math.OrthogonalVOLMtx4^Asphyre.Math.html#OrthogonalVOLMtx4^Creates orthogonal projection matrix defined by the viewing volume in 3D space.^    ^0"
s[509] = "Asphyre.Math.Parallel3^Asphyre.Math.html#Parallel3^Calculates the portion of 3D vector &quot;v&quot; that is parallel to the vector &quot;n&quot;.^    ^0"
s[510] = "Asphyre.Math.Perp3^Asphyre.Math.html#Perp3^Calculates the portion of 3D vector &quot;v&quot; that is perpendicular to the vector &quot;n&quot;.^    ^0"
s[511] = "Asphyre.Math.PerspectiveBDSMtx4^Asphyre.Math.html#PerspectiveBDSMtx4^Creates perspective projection matrix defined by the individual axis's boundaries.^    ^0"
s[512] = "Asphyre.Math.PerspectiveFOVXMtx4^Asphyre.Math.html#PerspectiveFOVXMtx4^Creates perspective projection matrix defined by a field of view on X axis.^ In 3D shooters the field of view needs to be adjusted to allow more visible area on wide-screen monitors. The parameters that define the viewed range are important for defining the precision of the depth transformation or a depth-buffer.      FieldOfView The camera's field of view in radians. For example Pi/4. AspectRatio The screen's aspect ratio. Can be calculated as x/y. MinRange The closest range at which the scene will be viewed. MaxRange The farthest range at which the scene will be viewed.  ^0"
s[513] = "Asphyre.Math.PerspectiveFOVYMtx4^Asphyre.Math.html#PerspectiveFOVYMtx4^Creates perspective projection matrix defined by a field of view on Y axis.^ This is a common way for typical 3D applications. In 3D shooters special care is to be taken because on wide-screen monitors the visible area will be bigger. The parameters that define the viewed range are important for defining the precision of the depth transformation or a depth-buffer.      FieldOfView The camera's field of view in radians. For example Pi/4. AspectRatio The screen's aspect ratio. Can be calculated as y/x. MinRange The closest range at which the scene will be viewed. MaxRange The farthest range at which the scene will be viewed.  ^0"
s[514] = "Asphyre.Math.PerspectiveVOLMtx4^Asphyre.Math.html#PerspectiveVOLMtx4^Creates perspective projection matrix defined by the viewing volume in 3D space.^    ^0"
s[515] = "Asphyre.Math.Point2^Asphyre.Math.html#Point2^Creates a <a class=\"normal\"  href=\"Asphyre.Math.TPoint2.html\">TPoint2</a> record using the specified coordinates.^    ^0"
s[516] = "Asphyre.Math.Point2px^Asphyre.Math.html#Point2px^Creates a <a class=\"normal\"  href=\"Asphyre.Math.TPoint2px.html\">TPoint2px</a> record using the specified coordinates.^    ^0"
s[517] = "Asphyre.Math.Point2ToPx^Asphyre.Math.html#Point2ToPx^Converts <a class=\"normal\"  href=\"Asphyre.Math.TPoint2.html\">TPoint2</a> to <a class=\"normal\"  href=\"Asphyre.Math.TPoint2px.html\">TPoint2px</a> by using floating-point rounding.^    ^0"
s[518] = "Asphyre.Math.Reflect3^Asphyre.Math.html#Reflect3^Calculates 3D vector that is a reflection of vector &quot;i&quot; from surface given by the normal &quot;n&quot;.^    ^0"
s[519] = "Asphyre.Math.ReflectMtx4^Asphyre.Math.html#ReflectMtx4^Creates a reflection matrix specified by the given vector defining the orientation of the reflection.^    ^0"
s[520] = "Asphyre.Math.RotateAboutAxisQuat^Asphyre.Math.html#RotateAboutAxisQuat^Creates 3D quaternion containing rotation around an arbitrary axis that is specified by the given vector; the rotation is specified in radians.^    ^0"
s[521] = "Asphyre.Math.RotateAboutXQuat^Asphyre.Math.html#RotateAboutXQuat^Creates 3D quaternion containing rotation around X axis with the specified angle (in radians).^    ^0"
s[522] = "Asphyre.Math.RotateAboutYQuat^Asphyre.Math.html#RotateAboutYQuat^Creates 3D quaternion containing rotation around Y axis with the specified angle (in radians).^    ^0"
s[523] = "Asphyre.Math.RotateAboutZQuat^Asphyre.Math.html#RotateAboutZQuat^Creates 3D quaternion containing rotation around Z axis with the specified angle (in radians).^    ^0"
s[524] = "Asphyre.Math.RotateInertialToObjectQuat^Asphyre.Math.html#RotateInertialToObjectQuat^Creates 3D quaternion setup to perform Inertial-To-Object rotation using the angles specified in Euler format.^    ^0"
s[525] = "Asphyre.Math.RotateMtx3^Asphyre.Math.html#RotateMtx3^Creates 3x3 matrix containing 2D rotation made using the specified angle (in radians).^    ^0"
s[526] = "Asphyre.Math.RotateMtx4^Asphyre.Math.html#RotateMtx4^Creates 4x4 matrix containing 3D rotation along an arbitrary axis defined by the given vector and the specified angle (in radians).^    ^0"
s[527] = "Asphyre.Math.RotateObjectToIntertialQuat^Asphyre.Math.html#RotateObjectToIntertialQuat^Creates 3D quaternion setup to perform Object-To-Inertial rotation using the angles specified in Euler format.^    ^0"
s[528] = "Asphyre.Math.RotateXMtx4^Asphyre.Math.html#RotateXMtx4^Creates 4x4 matrix containing 3D rotation along X matrix using the specified angle (in radians).^    ^0"
s[529] = "Asphyre.Math.RotateYMtx4^Asphyre.Math.html#RotateYMtx4^Creates 4x4 matrix containing 3D rotation along Y matrix using the specified angle (in radians).^    ^0"
s[530] = "Asphyre.Math.RotateZMtx4^Asphyre.Math.html#RotateZMtx4^Creates 4x4 matrix containing 3D rotation along Z matrix using the specified angle (in radians).^    ^0"
s[531] = "Asphyre.Math.RotationAngleQuat^Asphyre.Math.html#RotationAngleQuat^Returns the rotational angle &quot;theta&quot; that is currently present in the given quaternion.^    ^0"
s[532] = "Asphyre.Math.RotationAxisQuat^Asphyre.Math.html#RotationAxisQuat^Returns the rotational axis that is currently present in the given quaternion.^    ^0"
s[533] = "Asphyre.Math.SameVec2^Asphyre.Math.html#SameVec2^Compares the two specified 2D vectors using the given threshold.^    ^0"
s[534] = "Asphyre.Math.SameVec3^Asphyre.Math.html#SameVec3^Compares the two specified 3D vectors using the given threshold.^    ^0"
s[535] = "Asphyre.Math.SameVec4^Asphyre.Math.html#SameVec4^Compares all of the components from the given two vectors to see whether they are within the specified threshold.^    ^0"
s[536] = "Asphyre.Math.ScaleMtx3^Asphyre.Math.html#ScaleMtx3^Creates 3x3 matrix containing 2D scaling made using the specified coefficient for both axes.^    ^0"
s[537] = "Asphyre.Math.ScaleMtx4^Asphyre.Math.html#ScaleMtx4^Creates 4x4 matrix containing 3D scaling made using the specified vector coefficient for the axes.^    ^0"
s[538] = "Asphyre.Math.SlerpQuat^Asphyre.Math.html#SlerpQuat^Applies spherical linear interpolation between the specified two quaternions.^ The last parameter specifies the amount of interpolation with zero giving the first quaternion and one giving the second quaternion.    ^0"
s[539] = "Asphyre.Math.StringMtx4^Asphyre.Math.html#StringMtx4^Returns textual representation of the matrix.^ This is mainly suited for debugging purposes to see that the matrix is defined properly.    ^0"
s[540] = "Asphyre.Math.TranslateMtx3^Asphyre.Math.html#TranslateMtx3^Creates 3x3 matrix containing 2D translation made using the specified offset.^    ^0"
s[541] = "Asphyre.Math.TranslateMtx4^Asphyre.Math.html#TranslateMtx4^Creates 4x4 matrix containing 3D translation made using the specified vector offset.^    ^0"
s[542] = "Asphyre.Math.TransposeMtx3^Asphyre.Math.html#TransposeMtx3^Transposes the given matrix.^ That is, the rows become columns and vice-versa.    ^0"
s[543] = "Asphyre.Math.TransposeMtx4^Asphyre.Math.html#TransposeMtx4^Transposes the given matrix.^ That is, the rows become columns and vice-versa.    ^0"
s[544] = "Asphyre.Math.Vec2ToPx^Asphyre.Math.html#Vec2ToPx^Converts floating-point 2D vector to 2D integer vector by rounding down.^    ^0"
s[545] = "Asphyre.Math.Vec3ToColor^Asphyre.Math.html#Vec3ToColor^Converts X, Y and Z components of 3D vector to Red, Green and Blue components of 32-bit color accordingly.^ The resulting color has Alpha value of 255.    ^0"
s[546] = "Asphyre.Math.Vec3toString^Asphyre.Math.html#Vec3toString^Returns a string that describes the source 3D vector with two decimal places precision; for example &quot;(0.25, 0.31, 1.45)&quot;.^    ^0"
s[547] = "Asphyre.Math.Vec4To3Proj^Asphyre.Math.html#Vec4To3Proj^Converts 4D vector to 3D vector, projecting it (dividing by W).^    ^0"
s[548] = "Asphyre.Math.Vec4ToColor^Asphyre.Math.html#Vec4ToColor^Converts X, Y, Z and W components of 4D vector to Red, Green, Blue and Alpha components of 32-bit color accordingly.^    ^0"
s[549] = "Asphyre.Math.Vector3^Asphyre.Math.html#Vector3^Creates a <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> record using the specified coordinates.^    ^0"
s[550] = "Asphyre.Math.Vector3^Asphyre.Math.html#Vector3^Creates a <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> record using 2D vector and specified Z coordinate.^    ^0"
s[551] = "Asphyre.Math.Vector4^Asphyre.Math.html#Vector4^Creates a <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> record using the specified X, Y, Z and W coordinates.^    ^0"
s[552] = "Asphyre.Math.Vector4^Asphyre.Math.html#Vector4^Creates a <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> record using the specified 3D vector and W coordinate.^    ^0"
s[553] = "Asphyre.Math.YawPitchRollMtx4^Asphyre.Math.html#YawPitchRollMtx4^Creates 4x4 matrix containing 3D rotation based on parameters similar to flight dynamics, specifically yaw, pitch and roll.^ Each of the components is specified individually.    ^0"
s[554] = "Asphyre.Math.YawPitchRollMtx4^Asphyre.Math.html#YawPitchRollMtx4^Creates 4x4 matrix containing 3D rotation based on parameters similar to flight dynamics, specifically yaw, pitch and roll.^ The components are taken from the specified vector with Y corresponding to yaw, X to pitch and Z to roll.    ^0"
s[555] = "Asphyre.Math.PMatrix3^Asphyre.Math.html#PMatrix3^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Math.TMatrix3.html\">TMatrix3</a> by reference.^ ^0"
s[556] = "Asphyre.Math.PMatrix4^Asphyre.Math.html#PMatrix4^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Math.TMatrix4.html\">TMatrix4</a> by reference.^ ^0"
s[557] = "Asphyre.Math.PPoint2^Asphyre.Math.html#PPoint2^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Math.TPoint2.html\">TPoint2</a> by reference.^ ^0"
s[558] = "Asphyre.Math.PPoint2px^Asphyre.Math.html#PPoint2px^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Math.TPoint2px.html\">TPoint2px</a> by reference.^ ^0"
s[559] = "Asphyre.Math.PVector3^Asphyre.Math.html#PVector3^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Math.TVector3.html\">TVector3</a> by reference.^ ^0"
s[560] = "Asphyre.Math.PVector4^Asphyre.Math.html#PVector4^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Math.TVector4.html\">TVector4</a> by reference.^ ^0"
s[561] = "Asphyre.Math.Sets^Asphyre.Math.Sets.html^Helper classes such as integer lists, points and rectangle lists, and probabilistic choices that aid the development of application logic.^ ^0"
s[562] = "Asphyre.Math.Sets.TIntegerList^Asphyre.Math.Sets.TIntegerList.html^A list of 32-bit signed integers with many functions that include ordering, shuffling and analysis.^ This class can also be used in for ... in loops, e.g. &quot;for IntVal in MyList do&quot;, where IntVal will iterate through all numbers in the list. ^0"
s[563] = "Asphyre.Math.Sets.TIntegerList.ChainToString^Asphyre.Math.Sets.TIntegerList.html#ChainToString^Returns text representation of the string e.g.^ &quot;21, 7, 14, 10, 20&quot;.    ^0"
s[564] = "Asphyre.Math.Sets.TIntegerList.Exists^Asphyre.Math.Sets.TIntegerList.html#Exists^Returns <code>True</code> if the given number exists in the list and <code>False</code> otherwise.^    ^0"
s[565] = "Asphyre.Math.Sets.TIntegerList.GetValueAtIndex^Asphyre.Math.Sets.TIntegerList.html#GetValueAtIndex^Returns the number at the specified index.^ If the index is outside of valid range, zero is returned.    ^0"
s[566] = "Asphyre.Math.Sets.TIntegerList.IndexOf^Asphyre.Math.Sets.TIntegerList.html#IndexOf^Returns the index of the first occurrence of the specified number in the list.^ If the number does not exist, -1 is returned.    ^0"
s[567] = "Asphyre.Math.Sets.TIntegerList.Insert^Asphyre.Math.Sets.TIntegerList.html#Insert^Inserts the given number into the list and returns its index.^ The number is added to the end of the list.    ^0"
s[568] = "Asphyre.Math.Sets.TIntegerList.IsSameAs^Asphyre.Math.Sets.TIntegerList.html#IsSameAs^Checks whether this list is an exact copy of the other list.^    ^0"
s[569] = "Asphyre.Math.Sets.TIntegerList.AddFrom^Asphyre.Math.Sets.TIntegerList.html#AddFrom^Adds all numbers from the source list at the end of this list.^    ^0"
s[570] = "Asphyre.Math.Sets.TIntegerList.AddFromPtr^Asphyre.Math.Sets.TIntegerList.html#AddFromPtr^Add elements from a user list specified by typed pointer.^    ^0"
s[571] = "Asphyre.Math.Sets.TIntegerList.BestShuffle^Asphyre.Math.Sets.TIntegerList.html#BestShuffle^Shuffles the elements in the list by creating a new list and extracting numbers randomly from this one.^ This method is slow but it guarantees the proper random distribution. For a faster alternative, use <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntegerList.html#Shuffle\">Shuffle</a>.    ^0"
s[572] = "Asphyre.Math.Sets.TIntegerList.Clear^Asphyre.Math.Sets.TIntegerList.html#Clear^Removes all elements in the list.^    ^0"
s[573] = "Asphyre.Math.Sets.TIntegerList.CopyFrom^Asphyre.Math.Sets.TIntegerList.html#CopyFrom^Copies all numbers from the source list.^ This list becomes exact copy of the source list.    ^0"
s[574] = "Asphyre.Math.Sets.TIntegerList.DefineValueAtIndex^Asphyre.Math.Sets.TIntegerList.html#DefineValueAtIndex^Specifies the number at the given location.^ If the specified index is bigger than the number of elements, additional zeros are added to fill the unused space. For instance, if the list is empty, calling <i>DefineValueAtIndex(4, 15)</i> will add five zeros and set the fifth one to 15, so the list will become &quot;0, 0, 0, 0, 15&quot;. If index is below zero, this method does nothing.    ^0"
s[575] = "Asphyre.Math.Sets.TIntegerList.Exclude^Asphyre.Math.Sets.TIntegerList.html#Exclude^Removes the first occurrence of the given number in this list.^ If the number does not exist, the method does nothing.    ^0"
s[576] = "Asphyre.Math.Sets.TIntegerList.Include^Asphyre.Math.Sets.TIntegerList.html#Include^Includes the given number to the end of list.^ If the number already exists, the method does nothing.    ^0"
s[577] = "Asphyre.Math.Sets.TIntegerList.IncrementValueAtIndex^Asphyre.Math.Sets.TIntegerList.html#IncrementValueAtIndex^Increments the number at the given position by one.^ If the index is bigger than the number of elements, additional zeros are added to fill the unused space similarly to <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntegerList.html#DefineValueAtIndex\">DefineValueAtIndex</a>.    ^0"
s[578] = "Asphyre.Math.Sets.TIntegerList.InsertFirst^Asphyre.Math.Sets.TIntegerList.html#InsertFirst^Inserts the given number at the beginning of the list, shifting all elements by one.^ The index of the element is not returned because it is always zero.    ^0"
s[579] = "Asphyre.Math.Sets.TIntegerList.InsertRepeatValue^Asphyre.Math.Sets.TIntegerList.html#InsertRepeatValue^Adds a repeating sequence of the specified number to the end of list.^    ^0"
s[580] = "Asphyre.Math.Sets.TIntegerList.LoadFromStream^Asphyre.Math.Sets.TIntegerList.html#LoadFromStream^Loads the entire list from stream that was previously saved by <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntegerList.html#SaveToStream\">SaveToStream</a> method.^    ^0"
s[581] = "Asphyre.Math.Sets.TIntegerList.Remove^Asphyre.Math.Sets.TIntegerList.html#Remove^Removes number at the specified index, shifting all elements from that index and further by one.^ If the index is invalid, this function does nothing.    ^0"
s[582] = "Asphyre.Math.Sets.TIntegerList.RemoveDuplicates^Asphyre.Math.Sets.TIntegerList.html#RemoveDuplicates^Removes duplicate numbers from the list so that the resulting list has only numbers that are unique.^    ^0"
s[583] = "Asphyre.Math.Sets.TIntegerList.SaveToStream^Asphyre.Math.Sets.TIntegerList.html#SaveToStream^Saves the entire list to stream.^ Each value is saved as 32-bit integer with an additional 32-bit integer used to define the length.    ^0"
s[584] = "Asphyre.Math.Sets.TIntegerList.Series^Asphyre.Math.Sets.TIntegerList.html#Series^Replaces the contents of the current list with a new series of numbers starting from 0 and ending with <i>NumCount - 1</i>.^    ^0"
s[585] = "Asphyre.Math.Sets.TIntegerList.Shuffle^Asphyre.Math.Sets.TIntegerList.html#Shuffle^Shuffles the elements in the list by exchanging randomly numbers at different locations.^ This method is fast but it does not guarantee proper random distribution in small lists (for such purposes it is better to use <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntegerList.html#BestShuffle\">BestShuffle</a>. It works better for larger lists.    ^0"
s[586] = "Asphyre.Math.Sets.TIntegerList.Sort^Asphyre.Math.Sets.TIntegerList.html#Sort^Sorts all numbers in the list in ascending order.^    ^0"
s[587] = "Asphyre.Math.Sets.TIntegerList.Swap^Asphyre.Math.Sets.TIntegerList.html#Swap^Swaps two numbers at the corresponding indexes.^ For performance reasons, this function does not test if the indexes are valid, therefore this method should be used with caution.    ^0"
s[588] = "Asphyre.Math.Sets.TIntegerList.Count^Asphyre.Math.Sets.TIntegerList.html#Count^The number of elements in the list.^ ^0"
s[589] = "Asphyre.Math.Sets.TIntegerList.IntAvg^Asphyre.Math.Sets.TIntegerList.html#IntAvg^Returns the average of all numbers in the list or zero if the list is empty.^ ^0"
s[590] = "Asphyre.Math.Sets.TIntegerList.IntMax^Asphyre.Math.Sets.TIntegerList.html#IntMax^Returns the highest (maximum) number in the list or zero if the list is empty.^ ^0"
s[591] = "Asphyre.Math.Sets.TIntegerList.IntMin^Asphyre.Math.Sets.TIntegerList.html#IntMin^Returns the lowest (minimum) number in the list or zero if the list is empty.^ ^0"
s[592] = "Asphyre.Math.Sets.TIntegerList.IntSum^Asphyre.Math.Sets.TIntegerList.html#IntSum^Returns the sum of all numbers in the list or zero if the list is empty.^ ^0"
s[593] = "Asphyre.Math.Sets.TIntegerList.Items^Asphyre.Math.Sets.TIntegerList.html#Items^This property allows accessing the individual integer members by using their index, which should be in [0..(Count - 1)] range.^ If the index is out of valid range, <i>Low(Integer)</i> is returned. Setting values with index outside of valid range does nothing. ^0"
s[594] = "Asphyre.Math.Sets.TIntegerList.MemAddr^Asphyre.Math.Sets.TIntegerList.html#MemAddr^The pointer to the first element in list or <i>nil</i> if no elements are present.^ ^0"
s[595] = "Asphyre.Math.Sets.TIntegerList.RandomValue^Asphyre.Math.Sets.TIntegerList.html#RandomValue^Returns a random number from the list or zero if the list is empty.^ ^0"
s[596] = "Asphyre.Math.Sets.TIntProbHolder^Asphyre.Math.Sets.TIntProbHolder.html^Probabilistic number structure.^ Contains number and its probability that can be used by <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntProbList.html\">TIntProbList</a> for random probabilistic selections. ^0"
s[597] = "Asphyre.Math.Sets.TIntProbHolder.Value^Asphyre.Math.Sets.TIntProbHolder.html#Value^Number element that has its associated probability.^ ^0"
s[598] = "Asphyre.Math.Sets.TIntProbHolder.Prob^Asphyre.Math.Sets.TIntProbHolder.html#Prob^The probability of the accompanying number.^ This basically determines how important it is to the others. It must not be zero. ^0"
s[599] = "Asphyre.Math.Sets.TIntProbList^Asphyre.Math.Sets.TIntProbList.html^List of probabilistic numbers, where individual pairs of numbers and their probabilities are specified, which can then be used for random selection.^ ^0"
s[600] = "Asphyre.Math.Sets.TIntProbList.Exists^Asphyre.Math.Sets.TIntProbList.html#Exists^Returns <code>True</code> if the specified number exists in the list and <code>False</code> otherwise.^    ^0"
s[601] = "Asphyre.Math.Sets.TIntProbList.ExtractRandValue^Asphyre.Math.Sets.TIntProbList.html#ExtractRandValue^Extracts a number from the list using the probabilities of each individual element.^ If duplicates are present, each duplicate is treated as unique element. The returned number is removed from the list, but only its first occurrence, if multiple instances are present. If only one element is present, after returning it the list becomes empty. If the list is empty, zero is returned.    ^0"
s[602] = "Asphyre.Math.Sets.TIntProbList.IndexOf^Asphyre.Math.Sets.TIntProbList.html#IndexOf^Returns the index of the given number in the list.^ If duplicates are present, the index of first occurrence is returned. If the number is not found, the returned value is -1.    ^0"
s[603] = "Asphyre.Math.Sets.TIntProbList.Insert^Asphyre.Math.Sets.TIntProbList.html#Insert^Inserts the given number with its probability to the list.^ This function does not check if this number already exists, so it can create duplicates.    ^0"
s[604] = "Asphyre.Math.Sets.TIntProbList.AddFrom^Asphyre.Math.Sets.TIntProbList.html#AddFrom^Adds elements from the source list to this one.^ This method does not check for duplicates, it simply adds each and all of the elements from the source list.    ^0"
s[605] = "Asphyre.Math.Sets.TIntProbList.Clear^Asphyre.Math.Sets.TIntProbList.html#Clear^Removes all elements from the list.^    ^0"
s[606] = "Asphyre.Math.Sets.TIntProbList.CopyFrom^Asphyre.Math.Sets.TIntProbList.html#CopyFrom^Copies the entire contents from the source list to this one, creating an identical copy.^    ^0"
s[607] = "Asphyre.Math.Sets.TIntProbList.Exclude^Asphyre.Math.Sets.TIntProbList.html#Exclude^Excludes the specified number from the list.^ If multiple instances of such number exist, only the first occurrence is removed. If the number does not exist, this method does nothing.    ^0"
s[608] = "Asphyre.Math.Sets.TIntProbList.Include^Asphyre.Math.Sets.TIntProbList.html#Include^Includes the specified number with its probability to the list.^ If such number already exists, its probability is adjusted by the one specified in this method. If more than one number exists, only the first occurrence is modified.    ^0"
s[609] = "Asphyre.Math.Sets.TIntProbList.LoadFromStream^Asphyre.Math.Sets.TIntProbList.html#LoadFromStream^Loads the contents of the list from the source stream, replacing previous list.^ The contents must have been saved to the stream previously by <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntProbList.html#SaveToStream\">SaveToStream</a> method.    ^0"
s[610] = "Asphyre.Math.Sets.TIntProbList.NormalizeAll^Asphyre.Math.Sets.TIntProbList.html#NormalizeAll^Adjusts the existing probability values by normalizing them in such way so they sum to one.^    ^0"
s[611] = "Asphyre.Math.Sets.TIntProbList.Remove^Asphyre.Math.Sets.TIntProbList.html#Remove^Removes the element at the specified index from the list, shifting the rest of the elements by one.^ If the index is outside of valid range, this method does nothing.    ^0"
s[612] = "Asphyre.Math.Sets.TIntProbList.SaveToStream^Asphyre.Math.Sets.TIntProbList.html#SaveToStream^Saves the contents of this probabilistic list to the stream.^    ^0"
s[613] = "Asphyre.Math.Sets.TIntProbList.ScaleProbability^Asphyre.Math.Sets.TIntProbList.html#ScaleProbability^Adjusts the probability of the specified number by the given coefficient.^ If multiple instances of the same number exist, only the first occurrence is adjusted. If the number does not exist, this method does nothing.    ^0"
s[614] = "Asphyre.Math.Sets.TIntProbList.ScaleProbExcept^Asphyre.Math.Sets.TIntProbList.html#ScaleProbExcept^Adjusts the probability of all elements in the list by the specified coefficient except those elements that have the given number.^ If such number does not exist, simply all elements have their probability multiplied. If the list is empty or contains only the given number, this method does nothing.    ^0"
s[615] = "Asphyre.Math.Sets.TIntProbList.Series^Asphyre.Math.Sets.TIntProbList.html#Series^Replaces the contents of current list with series of numbers starting from zero and up to (MaxValue - 1) all with the same specified probability.^    ^0"
s[616] = "Asphyre.Math.Sets.TIntProbList.Count^Asphyre.Math.Sets.TIntProbList.html#Count^The number of elements in the list.^ ^0"
s[617] = "Asphyre.Math.Sets.TIntProbList.Item^Asphyre.Math.Sets.TIntProbList.html#Item^Provides access to individual elements in the list by index, which should be specified within range of <i>[0..(Count-1)]</i>.^ If index is outside of valid range, the returned value is <code>Nil</code>. ^0"
s[618] = "Asphyre.Math.Sets.TIntProbList.MemAddr^Asphyre.Math.Sets.TIntProbList.html#MemAddr^Returns pointer to the first element in the list.^ If the list has no elements, the returned value is <code>Nil</code>. ^0"
s[619] = "Asphyre.Math.Sets.TIntProbList.Probability^Asphyre.Math.Sets.TIntProbList.html#Probability^This property allows accessing and modifying the probability of each individual numbers in the list.^ If there are two identical numbers, only the first occurrence is modified. Each time this property is used, a search is made for the specified value. If the number does not exist in the list, the returned probability is zero. Setting probability for a number that is not in the list will add this number to the list with the specified probability. ^0"
s[620] = "Asphyre.Math.Sets.TIntProbList.RandValue^Asphyre.Math.Sets.TIntProbList.html#RandValue^Returns a number chosen randomly from the list using the probability field of each individual element.^ If duplicates are present in the list, they are treated as individual elements for probabilistic selection as well. If no elements are present in the list, the returned value is zero. ^0"
s[621] = "Asphyre.Math.Sets.TIntProbList.Value^Asphyre.Math.Sets.TIntProbList.html#Value^Provides access directly to individual numbers in the list ignoring the probabilistic part by index, which should be specified within range of <i>[0..(Count-1)]</i>.^ If index is outside of valid range, zero is returned. ^0"
s[622] = "Asphyre.Math.Sets.TPointHolder^Asphyre.Math.Sets.TPointHolder.html^2D integer point holder with an additional slot for custom user data.^ ^0"
s[623] = "Asphyre.Math.Sets.TPointHolder.Point^Asphyre.Math.Sets.TPointHolder.html#Point^2D integer point.^ ^0"
s[624] = "Asphyre.Math.Sets.TPointHolder.Data^Asphyre.Math.Sets.TPointHolder.html#Data^Custom user data.^ This can be used to store a reference to some class or structure. It can also be used as an integer variable typecast to <a class=\"normal\"  href=\"Asphyre.TypeDef.html#SizeInt\">SizeInt</a> type. ^0"
s[625] = "Asphyre.Math.Sets.TPointList^Asphyre.Math.Sets.TPointList.html^List of 2D integer point holders that in addition to the vector itself contain a pointer to custom user data each.^ This list can be used when an association is needed between 2D points and some sort of data. ^0"
s[626] = "Asphyre.Math.Sets.TPointList.IndexOf^Asphyre.Math.Sets.TPointList.html#IndexOf^Returns the first occurrence of the given 2D point in the list.^ If the given point is not found, this function returns -1.    ^0"
s[627] = "Asphyre.Math.Sets.TPointList.Insert^Asphyre.Math.Sets.TPointList.html#Insert^Inserts the specified 2D point and custom user data to the end of list, returning the index where they were placed.^    ^0"
s[628] = "Asphyre.Math.Sets.TPointList.Insert^Asphyre.Math.Sets.TPointList.html#Insert^Inserts a new 2D point specified using individual coordinates along with custom user data to the end of list, returning the index where they were placed.^    ^0"
s[629] = "Asphyre.Math.Sets.TPointList.AddFrom^Asphyre.Math.Sets.TPointList.html#AddFrom^Adds all elements from the source list to this one at the end of the list.^    ^0"
s[630] = "Asphyre.Math.Sets.TPointList.Clear^Asphyre.Math.Sets.TPointList.html#Clear^Removes all elements from the list.^    ^0"
s[631] = "Asphyre.Math.Sets.TPointList.CopyFrom^Asphyre.Math.Sets.TPointList.html#CopyFrom^Copies all elements from the source list to this one.^ The new list becomes the exact copy of the source one.    ^0"
s[632] = "Asphyre.Math.Sets.TPointList.Exclude^Asphyre.Math.Sets.TPointList.html#Exclude^Excludes the first occurrence of the given 2D point from the list.^    ^0"
s[633] = "Asphyre.Math.Sets.TPointList.Include^Asphyre.Math.Sets.TPointList.html#Include^Includes the given 2D point and custom user data to the list.^ This method checks if the 2D point with the given coordinates already exists and in this case, does nothing. The custom user data is not checked.    ^0"
s[634] = "Asphyre.Math.Sets.TPointList.Remove^Asphyre.Math.Sets.TPointList.html#Remove^Removes the element at given index, shifting all elements by one from that location and further.^ If the index is outside of valid range, this method does nothing.    ^0"
s[635] = "Asphyre.Math.Sets.TPointList.Count^Asphyre.Math.Sets.TPointList.html#Count^The number of elements in the list.^ ^0"
s[636] = "Asphyre.Math.Sets.TPointList.Item^Asphyre.Math.Sets.TPointList.html#Item^This property gives access to individual elements in the list by returning a reference to element at the given index, which should be in range of <i>[0..(Count - 1)]</i>.^ If the index is outside of valid range, <code>Nil</code> is returned. ^0"
s[637] = "Asphyre.Math.Sets.TPointList.MemAddr^Asphyre.Math.Sets.TPointList.html#MemAddr^Returns pointer to the first element in the list or <code>Nil</code> otherwise.^ ^0"
s[638] = "Asphyre.Math.Sets.TPointList.Point^Asphyre.Math.Sets.TPointList.html#Point^This property allows accessing individual 2D points in the list directly ignoring the custom user data field.^ ^0"
s[639] = "Asphyre.Math.Sets.TRectList^Asphyre.Math.Sets.TRectList.html^List of standard rectangles which can be iterated using &quot;for..in&quot; loops.^ ^0"
s[640] = "Asphyre.Math.Sets.TRectList.Add^Asphyre.Math.Sets.TRectList.html#Add^Adds rectangle specified by the given top left corner and dimensions to the list and returns the index of the new element.^    ^0"
s[641] = "Asphyre.Math.Sets.TRectList.Add^Asphyre.Math.Sets.TRectList.html#Add^Adds the given rectangle to the end of list, returning its index.^    ^0"
s[642] = "Asphyre.Math.Sets.TRectList.AddFrom^Asphyre.Math.Sets.TRectList.html#AddFrom^Adds all elements from the source list to this one.^    ^0"
s[643] = "Asphyre.Math.Sets.TRectList.Clear^Asphyre.Math.Sets.TRectList.html#Clear^Removes all elements from the list.^    ^0"
s[644] = "Asphyre.Math.Sets.TRectList.CopyFrom^Asphyre.Math.Sets.TRectList.html#CopyFrom^Copies elements from the source list to this one, overwriting existing elements.^ The resulting list is the exact copy of the source list.    ^0"
s[645] = "Asphyre.Math.Sets.TRectList.Remove^Asphyre.Math.Sets.TRectList.html#Remove^Removes element specified by the given index from the list, shifting other elements from that position and further by one.^ If the index is outside of valid range, this method does nothing.    ^0"
s[646] = "Asphyre.Math.Sets.TRectList.Count^Asphyre.Math.Sets.TRectList.html#Count^The number of elements in the list.^ ^0"
s[647] = "Asphyre.Math.Sets.TRectList.Item^Asphyre.Math.Sets.TRectList.html#Item^Provides access to individual rectangles in the list returning the reference to the rectangle specified by its index, which should be specified in <i>[0..(Count-1)]</i> range.^ If index is outside of valid range, the returned value is <code>Nil</code>. ^0"
s[648] = "Asphyre.Math.Sets.TRectList.MemAddr^Asphyre.Math.Sets.TRectList.html#MemAddr^Returns pointer to the first element in the list of <code>Nil</code> if the list is empty.^ ^0"
s[649] = "Asphyre.Math.Sets.PIntProbHolder^Asphyre.Math.Sets.html#PIntProbHolder^Pointer to <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntProbHolder.html\">TIntProbHolder</a> that is usually used to pass that structure by reference, usually within <a class=\"normal\"  href=\"Asphyre.Math.Sets.TIntProbList.html\">TIntProbList</a>.^ ^0"
s[650] = "Asphyre.Math.Sets.PPointHolder^Asphyre.Math.Sets.html#PPointHolder^Reference to <a class=\"normal\"  href=\"Asphyre.Math.Sets.TPointHolder.html\">TPointHolder</a>.^ ^0"
s[651] = "Asphyre.Monkey.Connectors^Asphyre.Monkey.Connectors.html^Asphyre and FireMonkey hook management.^ ^0"
s[652] = "Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect^Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.html^Asphyre and FireMonkey hook manager.^ ^0"
s[653] = "Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.Init^Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.html#Init^Creates the connection between Asphyre and FireMonkey, returning <code>True</code> if the connection is successful, and <code>False</code> otherwise.^ If the connection has previously been established, this function does nothing and returns <code>True</code>. This function can be called as many times as possible in timer events to make sure that the connection remains established.   Context Valid FireMonkey's context taken from the main form (e.g. use <code>Self.Context</code> in the form's code).  ^0"
s[654] = "Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.Done^Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.html#Done^Finalizes the connection between Asphyre and FireMonkey.^    ^0"
s[655] = "Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.Initialized^Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.html#Initialized^Determines whether the connection between Asphyre and FireMonkey is currently established.^ ^0"
s[656] = "Asphyre.Monkey.Connectors.MonkeyAsphyreConnect^Asphyre.Monkey.Connectors.html#MonkeyAsphyreConnect^Instance of <a class=\"normal\"  href=\"Asphyre.Monkey.Connectors.TMonkeyAsphyreConnect.html\">TMonkeyAsphyreConnect</a> that is ready to use in applications without having to create that class explicitly.^ ^0"
s[657] = "Asphyre.Native.Connectors^Asphyre.Native.Connectors.html^VCL/LCL Asphyre compatibility hook management.^ ^0"
s[658] = "Asphyre.Native.Connectors.TNativeAsphyreConnect^Asphyre.Native.Connectors.TNativeAsphyreConnect.html^Native (x86/x64) Asphyre compatibility hook manager.^ This manager works in a similar fashion to other hook managers such as those for Mac OS X and iOS, but it is meant to be used only on Windows. ^0"
s[659] = "Asphyre.Native.Connectors.TNativeAsphyreConnect.Init^Asphyre.Native.Connectors.TNativeAsphyreConnect.html#Init^Initializes the component and calls the respective Asphyre events where Asphyre components should be created.^ This function returns <code>True</code> in case of success and <code>False</code> otherwise. If the component is already initialized, this function does nothing and returns <code>True</code>; it can be called as many times as possible in timer events to make sure that Asphyre components are properly created.    ^0"
s[660] = "Asphyre.Native.Connectors.TNativeAsphyreConnect.Done^Asphyre.Native.Connectors.TNativeAsphyreConnect.html#Done^Finalizes the component and calls events where Asphyre components should be released.^    ^0"
s[661] = "Asphyre.Native.Connectors.TNativeAsphyreConnect.Initialized^Asphyre.Native.Connectors.TNativeAsphyreConnect.html#Initialized^Determines whether the component has been successfully initialized.^ ^0"
s[662] = "Asphyre.Native.Connectors.NativeAsphyreConnect^Asphyre.Native.Connectors.html#NativeAsphyreConnect^Instance of <a class=\"normal\"  href=\"Asphyre.Native.Connectors.TNativeAsphyreConnect.html\">TNativeAsphyreConnect</a> that is ready to use in applications without having to create that class explicitly.^ ^0"
s[663] = "Asphyre.NetComs^Asphyre.NetComs.html^Provides communication and multiplayer capabilities by using simple message system based on UDP communication protocol.^ ^0"
s[664] = "Asphyre.NetComs.TNetCom^Asphyre.NetComs.TNetCom.html^UDP wrapper class that provides a simple way of UDP communication between different applications over network and Internet.^ The messages sent by this component are compressed using ZLib to save bandwidth when sending large packets. MD5 checksum verification is used internally for integrity checks. ^0"
s[665] = "Asphyre.NetComs.TNetCom.Initialize^Asphyre.NetComs.TNetCom.html#Initialize^Initializes the component and begins listening to the given port for incoming messages.^ <a class=\"normal\"  href=\"Asphyre.NetComs.TNetCom.html#LocalPort\">LocalPort</a> should be set prior calling this method. If the method succeeds, <a class=\"normal\"  href=\"Asphyre.NetComs.TNetCom.html#LocalPort\">LocalPort</a> will be updated with a new port that is being used (if the suggested one could not be used).    ^0"
s[666] = "Asphyre.NetComs.TNetCom.Send^Asphyre.NetComs.TNetCom.html#Send^Sends the specified message data block to the destination.^ This method returns <code>True</code> if the message could be sent and <code>False</code> if there were any errors. Please note that since messages are sent through UDP protocol, so a resulting <code>True</code> value does not necessarily mean that the message was actually received.      Host Destination host or address where the message should be sent. Multicast and broadcast addresses are accepted, although should be used with care to not saturate the local network. Port Destination port where the receiver is currently listening at. Data Pointer to the message data block. The method copies the data to its internal structures, so it's not necessary to maintain the data after this call exits. Size Size of the message data block.  ^0"
s[667] = "Asphyre.NetComs.TNetCom.Finalize^Asphyre.NetComs.TNetCom.html#Finalize^Finalizes the component and closes the communication link.^    ^0"
s[668] = "Asphyre.NetComs.TNetCom.ResetStatistics^Asphyre.NetComs.TNetCom.html#ResetStatistics^Resets all statistic parameters related to the current session such as number of packets transmitted, bytes per second among others.^    ^0"
s[669] = "Asphyre.NetComs.TNetCom.Update^Asphyre.NetComs.TNetCom.html#Update^Handles internal communication and receives incoming messages; in addition, internal structures and bandwidth usage are also updated.^ This method should be called as fast as possible and no less than once per second. During the call to this method, <a class=\"normal\"  href=\"Asphyre.NetComs.TNetCom.html#OnReceive\">OnReceive</a> event may occur to notify the reception of messages.    ^0"
s[670] = "Asphyre.NetComs.TNetCom.BodyBytesReceived^Asphyre.NetComs.TNetCom.html#BodyBytesReceived^Indicates how many bytes of message body have been received (uncompressed, without counting the header size).^ Can be used to determine the compression ratio of the incoming data. ^0"
s[671] = "Asphyre.NetComs.TNetCom.BodyBytesSent^Asphyre.NetComs.TNetCom.html#BodyBytesSent^Indicates how many bytes of message body have been sent (uncompressed, without counting the header size).^ Can be used to determine the compression ratio of the outcoming data. ^0"
s[672] = "Asphyre.NetComs.TNetCom.BytesPerSec^Asphyre.NetComs.TNetCom.html#BytesPerSec^Indicates the current bandwidth usage in bytes per second.^ In order for this variable to have meaningful values, it is necessary to call <a class=\"normal\"  href=\"Asphyre.NetComs.TNetCom.html#Update\">Update</a> method at least once per second. ^0"
s[673] = "Asphyre.NetComs.TNetCom.BytesReceived^Asphyre.NetComs.TNetCom.html#BytesReceived^Indicates how many bytes were received during the entire session.^ ^0"
s[674] = "Asphyre.NetComs.TNetCom.BytesSent^Asphyre.NetComs.TNetCom.html#BytesSent^Indicates how many bytes were sent during the entire session.^ ^0"
s[675] = "Asphyre.NetComs.TNetCom.DiscardedPackets^Asphyre.NetComs.TNetCom.html#DiscardedPackets^Indicates how many packets were discarded during the entire session.^ This can be a direct indication of errors during the session where packets were badly received. ^0"
s[676] = "Asphyre.NetComs.TNetCom.Initialized^Asphyre.NetComs.TNetCom.html#Initialized^Determines whether the component has been property initialized.^ ^0"
s[677] = "Asphyre.NetComs.TNetCom.LocalPort^Asphyre.NetComs.TNetCom.html#LocalPort^The local port that will be used for UDP communication both for sending and receiving packets.^ If the specified port is unavailable during initialization, a different (and possibly random) value will be used. In this case, this parameter will be updated accordingly. ^0"
s[678] = "Asphyre.NetComs.TNetCom.OnReceive^Asphyre.NetComs.TNetCom.html#OnReceive^This event occurs when the data has been received.^ It should always be assigned to interpret any incoming messages. ^0"
s[679] = "Asphyre.NetComs.TNetCom.ReceivedPackets^Asphyre.NetComs.TNetCom.html#ReceivedPackets^Indicates how many packets in total were received during the entire session.^ ^0"
s[680] = "Asphyre.NetComs.TNetCom.SentPackets^Asphyre.NetComs.TNetCom.html#SentPackets^Indicates how many packets were sent during the entire session.^ ^0"
s[681] = "Asphyre.NetComs.TReceiveEvent^Asphyre.NetComs.html#TReceiveEvent^The declaration of data reception event.^ In this event the message should be interpreted and properly handled. After this event the memory referenced by the pointers is lost so to preserve the message it is necessary to copy it within this event. The source host and port can be used to identify the transceiver and for sending replies.       Sender Reference to the class that received the message, usually <a class=\"normal\"  href=\"Asphyre.NetComs.TNetCom.html\">TNetCom</a>. Host Source host that sent the message. Port Source port through which the message was sent. Data Pointer to the beginning of message block. Size Size of the message block.  ^0"
s[682] = "Asphyre.NetComs.NetCom^Asphyre.NetComs.html#NetCom^An active instance of <a class=\"normal\"  href=\"Asphyre.NetComs.TNetCom.html\">TNetCom</a> class that can be used for sending and receiving UDP messages without having to create it explicitly.^ This variable is always created and instantiated upon application's execution and freed when the application terminates. ^0"
s[683] = "Asphyre.NetComs.Types^Asphyre.NetComs.Types.html^Data types, constants and helper cross-platform routines that form part of or complement <a class=\"normal\"  href=\"Asphyre.NetComs.TNetCom.html\">TNetCom</a> class.^ ^0"
s[684] = "Asphyre.NetComs.Types.GetLocalIP^Asphyre.NetComs.Types.html#GetLocalIP^Returns IP address of current machine.^ If several IP addresses are present, the last address in the list is returned.    ^0"
s[685] = "Asphyre.NetComs.Types.HostToInt^Asphyre.NetComs.Types.html#HostToInt^Converts text string containing host address into IPv4 binary address.^    ^0"
s[686] = "Asphyre.NetComs.Types.IntToHost^Asphyre.NetComs.Types.html#IntToHost^Converts binary IPv4 address representation to text string.^    ^0"
s[687] = "Asphyre.NetComs.Types.ResolveHost^Asphyre.NetComs.Types.html#ResolveHost^Converts text containing host address into the corresponding IP address.^    ^0"
s[688] = "Asphyre.NetComs.Types.ResolveIP^Asphyre.NetComs.Types.html#ResolveIP^Converts text containing IP address into the corresponding host string.^    ^0"
s[689] = "Asphyre.Providers^Asphyre.Providers.html^General factory implementation that creates all provider-dependent classes such as device, canvas and textures.^ ^0"
s[690] = "Asphyre.Providers.TAsphyreFactory^Asphyre.Providers.TAsphyreFactory.html^General factory object that creates all provider-dependant classes such as device, canvas and textures.^ ^0"
s[691] = "Asphyre.Providers.TAsphyreFactory.CreateCanvas^Asphyre.Providers.TAsphyreFactory.html#CreateCanvas^Creates Asphyre canvas that is specific to the currently selected provider.^    ^0"
s[692] = "Asphyre.Providers.TAsphyreFactory.CreateDevice^Asphyre.Providers.TAsphyreFactory.html#CreateDevice^Creates Asphyre device that is specific to the currently selected provider.^    ^0"
s[693] = "Asphyre.Providers.TAsphyreFactory.CreateLockableTexture^Asphyre.Providers.TAsphyreFactory.html#CreateLockableTexture^Creates lockable Asphyre texture that is specific to the currently selected provider.^    ^0"
s[694] = "Asphyre.Providers.TAsphyreFactory.CreateRenderTargetTexture^Asphyre.Providers.TAsphyreFactory.html#CreateRenderTargetTexture^Creates render target Asphyre texture texture that is specific to the currently selected provider.^    ^0"
s[695] = "Asphyre.Providers.TAsphyreFactory.Subscribe^Asphyre.Providers.TAsphyreFactory.html#Subscribe^Subscribes a new provider to the list of available providers that can be used by the application.^ This function is usually called automatically by each of the providers.    ^0"
s[696] = "Asphyre.Providers.TAsphyreFactory.Unsubscribe^Asphyre.Providers.TAsphyreFactory.html#Unsubscribe^Unsubscribes the specified provider from the list of available providers that can be used by the application.^    ^0"
s[697] = "Asphyre.Providers.TAsphyreFactory.UseProvider^Asphyre.Providers.TAsphyreFactory.html#UseProvider^Activates the provider with the given numerical identifier to be used by the factory's creation functions.^    ^0"
s[698] = "Asphyre.Providers.TAsphyreProvider^Asphyre.Providers.TAsphyreProvider.html^General definition of Asphyre provider, which should create all hardware specific classes.^ ^0"
s[699] = "Asphyre.Providers.TAsphyreProvider.CreateCanvas^Asphyre.Providers.TAsphyreProvider.html#CreateCanvas^This function creates hardware-specific Asphyre canvas.^    ^0"
s[700] = "Asphyre.Providers.TAsphyreProvider.CreateDevice^Asphyre.Providers.TAsphyreProvider.html#CreateDevice^This function creates hardware-specific Asphyre device.^    ^0"
s[701] = "Asphyre.Providers.TAsphyreProvider.CreateLockableTexture^Asphyre.Providers.TAsphyreProvider.html#CreateLockableTexture^This function creates hardware-specific lockable texture.^    ^0"
s[702] = "Asphyre.Providers.TAsphyreProvider.CreateRenderTargetTexture^Asphyre.Providers.TAsphyreProvider.html#CreateRenderTargetTexture^This function creates hardware-specific render target texture.^ If render targets are not supported in this provider, <code>Nil</code> is returned.    ^0"
s[703] = "Asphyre.Providers.TAsphyreProvider.ProviderID^Asphyre.Providers.TAsphyreProvider.html#ProviderID^The numerical identifier of the provider that must be unique among all providers supported in Asphyre.^ ^0"
s[704] = "Asphyre.Providers.Factory^Asphyre.Providers.html#Factory^Instance of <a class=\"normal\"  href=\"Asphyre.Providers.TAsphyreFactory.html\">TAsphyreFactory</a> that is ready to use in applications without having to create that class explicitly.^ This factory object is used by the entire framework. ^0"
s[705] = "Asphyre.RenderTargets^Asphyre.RenderTargets.html^Container classes that facilitate storage, usage and handling of render target textures.^ ^0"
s[706] = "Asphyre.RenderTargets.TAsphyreRenderTargets^Asphyre.RenderTargets.TAsphyreRenderTargets.html^List of render target textures that can be used for rendering scenes into and also as source textures for drawing.^ ^0"
s[707] = "Asphyre.RenderTargets.TAsphyreRenderTargets.Add^Asphyre.RenderTargets.TAsphyreRenderTargets.html#Add^Adds one or more render target textures to the end of the list and initializes them.^ If the method succeeds, the index to first added element is returned; if the method fails, -1 is returned.         AddCount The number of render target textures to add. Width The width of added render target textures. Height The height of added render target textures. Format The pixel format to be used in added render target textures. DepthStencil Determines whether to create depth-stencil buffer in the added render target textures. Mipmapping Determines whether to use mipmapping in added render target textures. Multisamples Indicates the number of samples to use for antialiasing in added render target textures. This parameter is only supported on latest DX10+ providers.  ^0"
s[708] = "Asphyre.RenderTargets.TAsphyreRenderTargets.IndexOf^Asphyre.RenderTargets.TAsphyreRenderTargets.html#IndexOf^Returns the index of existing render target texture in the list.^ If the given element is not found in the list, the returned value is -1.    ^0"
s[709] = "Asphyre.RenderTargets.TAsphyreRenderTargets.Insert^Asphyre.RenderTargets.TAsphyreRenderTargets.html#Insert^Inserts a new render target texture to the list without initializing it.^    ^0"
s[710] = "Asphyre.RenderTargets.TAsphyreRenderTargets.Remove^Asphyre.RenderTargets.TAsphyreRenderTargets.html#Remove^Removes element at the given index from the list, shifting all further elements by one.^ Index must be specified in range of [0..(Count - 1)]. If the specified index is outside of valid range, this method does nothing.    ^0"
s[711] = "Asphyre.RenderTargets.TAsphyreRenderTargets.RemoveAll^Asphyre.RenderTargets.TAsphyreRenderTargets.html#RemoveAll^Removes all existing render target textures from the list.^    ^0"
s[712] = "Asphyre.RenderTargets.TAsphyreRenderTargets.Count^Asphyre.RenderTargets.TAsphyreRenderTargets.html#Count^The number of render target textures in the list.^ ^0"
s[713] = "Asphyre.RenderTargets.TAsphyreRenderTargets.Texture^Asphyre.RenderTargets.TAsphyreRenderTargets.html#Texture^Provides access to individual render target textures in the list by using the index in range of [0..(Count - 1)].^ If the specified index is outside of valid range, <code>Nil</code> is returned. ^0"
s[714] = "Asphyre.Streams^Asphyre.Streams.html^Utility routines for saving and loading different data type in streams.^ ^0"
s[715] = "Asphyre.Streams.StreamGetAnsi4String^Asphyre.Streams.html#StreamGetAnsi4String^Loads <b>AnsiString</b> (non-unicode, ansi) from the stream previously saved by <a class=\"normal\"  href=\"Asphyre.Streams.html#StreamPutAnsi4String\">StreamPutAnsi4String</a>.^    ^0"
s[716] = "Asphyre.Streams.StreamGetAnsiString^Asphyre.Streams.html#StreamGetAnsiString^Loads <b>AnsiString</b> (non-unicode, ansi) from the stream previously saved by <a class=\"normal\"  href=\"Asphyre.Streams.html#StreamPutAnsiString\">StreamPutAnsiString</a>.^ The returned string can contain up to 65535 characters.    ^0"
s[717] = "Asphyre.Streams.StreamGetBool^Asphyre.Streams.html#StreamGetBool^Loads <b>Boolean</b> value from the stream previously saved by <a class=\"normal\"  href=\"Asphyre.Streams.html#StreamPutBool\">StreamPutBool</a>.^ The resulting value is treated as 8-bit unsigned integer with values of [0..127] considered as <code>True</code> and values of [128..255] considered as <code>False</code>.    ^0"
s[718] = "Asphyre.Streams.StreamGetByte^Asphyre.Streams.html#StreamGetByte^Loads 8-bit unsigned integer from the stream.^    ^0"
s[719] = "Asphyre.Streams.StreamGetByteIndex^Asphyre.Streams.html#StreamGetByteIndex^Loads 8-bit unsigned index from the stream.^ The range of returned values is [0..254], the value of 255 is returned as -1.    ^0"
s[720] = "Asphyre.Streams.StreamGetBytePoint2px^Asphyre.Streams.html#StreamGetBytePoint2px^Loads 2D integer point from the stream.^ Each coordinate is loaded as 8-bit unsigned integer with values in range of [0..254]. The loaded values of 255 are returned equalling to those from <a class=\"normal\"  href=\"Asphyre.Math.html#InfPoint2px\">InfPoint2px</a>.    ^0"
s[721] = "Asphyre.Streams.StreamGetDouble^Asphyre.Streams.html#StreamGetDouble^Loads 64-bit floating-point value (double-precision) from the stream.^    ^0"
s[722] = "Asphyre.Streams.StreamGetFloat34^Asphyre.Streams.html#StreamGetFloat34^Loads floating-point value as 8-bit signed byte from the stream using 1:3:4 fixed-point format.^ The possible values are in [-8..7.9375] range.    ^0"
s[723] = "Asphyre.Streams.StreamGetFloat43^Asphyre.Streams.html#StreamGetFloat43^Loads floating-point value as 8-bit signed byte from the stream using 1:4:3 fixed-point format.^ The possible values are in [-16..15.875] range.    ^0"
s[724] = "Asphyre.Streams.StreamGetFloats3311^Asphyre.Streams.html#StreamGetFloats3311^Loads two floating-point values as a single 8-bit unsigned byte from the stream with each value stored in fixed-point 1:2:1 format.^ The possible values are in [-4..3.5] range.    ^0"
s[725] = "Asphyre.Streams.StreamGetFloats44^Asphyre.Streams.html#StreamGetFloats44^Loads two floating-point values as a single 8-bit unsigned byte from the stream with each value having 4-bits.^ The possible values are in [-8..7] range.    ^0"
s[726] = "Asphyre.Streams.StreamGetInt64^Asphyre.Streams.html#StreamGetInt64^Loads 64-bit signed integer from the stream.^    ^0"
s[727] = "Asphyre.Streams.StreamGetLongInt^Asphyre.Streams.html#StreamGetLongInt^Loads 32-bit signed integer from the stream.^    ^0"
s[728] = "Asphyre.Streams.StreamGetLongPoint2px^Asphyre.Streams.html#StreamGetLongPoint2px^Loads 2D integer point from the stream.^ Each coordinate is loaded as 32-bit signed integer.    ^0"
s[729] = "Asphyre.Streams.StreamGetLongWord^Asphyre.Streams.html#StreamGetLongWord^Loads 32-bit unsigned integer from the stream.^    ^0"
s[730] = "Asphyre.Streams.StreamGetShortInt^Asphyre.Streams.html#StreamGetShortInt^Loads 8-bit signed integer from the stream.^    ^0"
s[731] = "Asphyre.Streams.StreamGetShortString^Asphyre.Streams.html#StreamGetShortString^Loads <b>ShortString</b> from the stream.^    ^0"
s[732] = "Asphyre.Streams.StreamGetShortUtf8String^Asphyre.Streams.html#StreamGetShortUtf8String^Loads <b>UniString</b> (Unicode) from the stream in UTF-8 encoding previously saved by <a class=\"normal\"  href=\"Asphyre.Streams.html#StreamPutShortUtf8String\">StreamPutShortUtf8String</a>.^    ^0"
s[733] = "Asphyre.Streams.StreamGetSingle^Asphyre.Streams.html#StreamGetSingle^Loads 32-bit floating-point value (single-precision) from the stream.^    ^0"
s[734] = "Asphyre.Streams.StreamGetSmallInt^Asphyre.Streams.html#StreamGetSmallInt^Loads 16-bit signed integer from the stream.^    ^0"
s[735] = "Asphyre.Streams.StreamGetUInt64^Asphyre.Streams.html#StreamGetUInt64^Loads 64-bit unsigned integer from the stream.^    ^0"
s[736] = "Asphyre.Streams.StreamGetUtf8String^Asphyre.Streams.html#StreamGetUtf8String^Loads <b>UniString</b> (Unicode) from the stream in UTF-8 encoding previously saved by <a class=\"normal\"  href=\"Asphyre.Streams.html#StreamPutUtf8String\">StreamPutUtf8String</a>.^    ^0"
s[737] = "Asphyre.Streams.StreamGetWord^Asphyre.Streams.html#StreamGetWord^Loads 16-bit unsigned integer value from the stream.^    ^0"
s[738] = "Asphyre.Streams.StreamGetWordIndex^Asphyre.Streams.html#StreamGetWordIndex^Loads 16-bit unsigned index from the stream.^ The range of returned values is [0..65534], the value of 65535 is returned as -1.    ^0"
s[739] = "Asphyre.Streams.StreamGetWordPoint2px^Asphyre.Streams.html#StreamGetWordPoint2px^Loads 2D integer point from the stream.^ Each coordinate is loaded as 16-bit unsigned integer with values in range of [0..65534]. The loaded values of 65535 are returned equalling to those from <a class=\"normal\"  href=\"Asphyre.Math.html#InfPoint2px\">InfPoint2px</a>.    ^0"
s[740] = "Asphyre.Streams.StreamPutAnsi4String^Asphyre.Streams.html#StreamPutAnsi4String^Saves <b>AnsiString</b> (non-unicode, ansi) to the stream.^ No restrictions are applied to the string, so up to 2 Gb of data can be saved this way. This is most useful when the string contains binary data or very long text. For a more restricted and limited approach, use <a class=\"normal\"  href=\"Asphyre.Streams.html#StreamPutAnsiString\">StreamPutAnsiString</a>.    ^0"
s[741] = "Asphyre.Streams.StreamPutAnsiString^Asphyre.Streams.html#StreamPutAnsiString^Saves <b>AnsiString</b> (non-unicode, ansi) to the stream.^ The string is limited to a maximum of 65535 characters. If <i>MaxCount</i> is not zero, the string will be limited to the given number of characters.    ^0"
s[742] = "Asphyre.Streams.StreamPutBool^Asphyre.Streams.html#StreamPutBool^Saves <b>Boolean</b> value to the stream as 8-bit unsigned integer.^ A value of <code>False</code> is saved as 255, while <code>True</code> is saved as 0.    ^0"
s[743] = "Asphyre.Streams.StreamPutByte^Asphyre.Streams.html#StreamPutByte^Saves 8-bit unsigned integer to the stream.^ If the value is outside of [0..255] range, it will be clamped.    ^0"
s[744] = "Asphyre.Streams.StreamPutByteIndex^Asphyre.Streams.html#StreamPutByteIndex^Saves 8-bit unsigned index to the stream.^ A value of -1 (and other negative values) is stored as 255. Positive numbers that are outside of [0..254] range will be clamped.    ^0"
s[745] = "Asphyre.Streams.StreamPutBytePoint2px^Asphyre.Streams.html#StreamPutBytePoint2px^Saves 2D integer point to the stream.^ Each coordinate is saved as 8-bit unsigned integer with values outside of [0..254] range clamped. Each coordinate values equalling to those of <a class=\"normal\"  href=\"Asphyre.Math.html#InfPoint2px\">InfPoint2px</a> will be saved as 255.    ^0"
s[746] = "Asphyre.Streams.StreamPutDouble^Asphyre.Streams.html#StreamPutDouble^Saves 64-bit floating-point value (double-precision) to the stream.^    ^0"
s[747] = "Asphyre.Streams.StreamPutFloat34^Asphyre.Streams.html#StreamPutFloat34^Saves floating-point value as 8-bit signed byte to the stream using 1:3:4 fixed-point format with values outside of [-8..7.9375] range will be clamped.^    ^0"
s[748] = "Asphyre.Streams.StreamPutFloat43^Asphyre.Streams.html#StreamPutFloat43^Saves floating-point value as 8-bit signed byte to the stream using 1:4:3 fixed-point format with values outside of [-16..15.875] range will be clamped.^    ^0"
s[749] = "Asphyre.Streams.StreamPutFloats3311^Asphyre.Streams.html#StreamPutFloats3311^Saves two floating-point values as a single 8-bit unsigned byte to the stream with each value stored in fixed-point 1:2:1 format.^ Values outside of [-4..3.5] range will be clamped.    ^0"
s[750] = "Asphyre.Streams.StreamPutFloats44^Asphyre.Streams.html#StreamPutFloats44^Saves two floating-point values as a single 8-bit unsigned byte to the stream with each value having 4-bits.^ Values outside of [-8..7] range will be clamped.    ^0"
s[751] = "Asphyre.Streams.StreamPutInt64^Asphyre.Streams.html#StreamPutInt64^Saves 64-bit signed integer to the stream.^    ^0"
s[752] = "Asphyre.Streams.StreamPutLongInt^Asphyre.Streams.html#StreamPutLongInt^Saves 32-bit signed integer to the stream.^    ^0"
s[753] = "Asphyre.Streams.StreamPutLongPoint2px^Asphyre.Streams.html#StreamPutLongPoint2px^Saves 2D integer point to the stream.^ Each coordinate is saved as 32-bit signed integer.    ^0"
s[754] = "Asphyre.Streams.StreamPutLongWord^Asphyre.Streams.html#StreamPutLongWord^Saves 32-bit unsigned integer to the stream.^    ^0"
s[755] = "Asphyre.Streams.StreamPutShortInt^Asphyre.Streams.html#StreamPutShortInt^Saves 8-bit signed integer to the stream.^ If the value is outside of [-128..127] range, it will be clamped.    ^0"
s[756] = "Asphyre.Streams.StreamPutShortString^Asphyre.Streams.html#StreamPutShortString^Saves <b>ShortString</b> to the stream.^ If <i>MaxCount</i> is not zero, the string will be limited to a certain number of characters.    ^0"
s[757] = "Asphyre.Streams.StreamPutShortUtf8String^Asphyre.Streams.html#StreamPutShortUtf8String^Saves <b>UniString</b> (Unicode) to the stream in UTF-8 encoding.^ The resulting UTF-8 string is limited to a maximum of 255 characters; therefore, for certain charsets the actual string is limited to either 127 or even 85 characters in worst case. If <i>MaxCount</i> is not zero, the input string will be limited to the given number of characters.    ^0"
s[758] = "Asphyre.Streams.StreamPutSingle^Asphyre.Streams.html#StreamPutSingle^Saves 32-bit floating-point value (single-precision) to the stream.^    ^0"
s[759] = "Asphyre.Streams.StreamPutSmallInt^Asphyre.Streams.html#StreamPutSmallInt^Saves 16-bit signed integer to the stream.^ If the value is outside of [-32768..32767] range, it will be clamped.    ^0"
s[760] = "Asphyre.Streams.StreamPutUInt64^Asphyre.Streams.html#StreamPutUInt64^Saves 64-bit unsigned integer to the stream.^    ^0"
s[761] = "Asphyre.Streams.StreamPutUtf8String^Asphyre.Streams.html#StreamPutUtf8String^Saves <b>UniString</b> (Unicode) to the stream in UTF-8 encoding.^ The resulting UTF-8 string is limited to a maximum of 65535 characters; therefore, for certain charsets the actual string is limited to either 32767 or even 21845 characters in worst case. If <i>MaxCount</i> is not zero, the input string will be limited to the given number of characters.    ^0"
s[762] = "Asphyre.Streams.StreamPutWord^Asphyre.Streams.html#StreamPutWord^Saves 16-bit unsigned integer to the stream.^ If the value is outside of [0..65535] range, it will be clamped.    ^0"
s[763] = "Asphyre.Streams.StreamPutWordIndex^Asphyre.Streams.html#StreamPutWordIndex^Saves 16-bit unsigned index to the stream.^ A value of -1 (and other negative values) is stored as 65535. Positive numbers that are outside of [0..65534] range will be clamped.    ^0"
s[764] = "Asphyre.Streams.StreamPutWordPoint2px^Asphyre.Streams.html#StreamPutWordPoint2px^Saves 2D integer point to the stream.^ Each coordinate is saved as 16-bit unsigned integer with values outside of [0..65534] range clamped. Each coordinate values equalling to those of <a class=\"normal\"  href=\"Asphyre.Math.html#InfPoint2px\">InfPoint2px</a> will be saved as 65535.    ^0"
s[765] = "Asphyre.SwapChains^Asphyre.SwapChains.html^Specification and implementation of rendering swap chains used in Asphyre providers.^ ^0"
s[766] = "Asphyre.SwapChains.TAsphyreSwapChains^Asphyre.SwapChains.TAsphyreSwapChains.html^List of all rendering swap chains that are to be used with Asphyre device.^ This class describes all swap chains that should be created and used with the device; if the device is already initialized, modifying swap chains is not allowed. ^0"
s[767] = "Asphyre.SwapChains.TAsphyreSwapChains.Add^Asphyre.SwapChains.TAsphyreSwapChains.html#Add^Adds a new rendering swap chain specified in the given structure to the end of list and returns its index.^    ^0"
s[768] = "Asphyre.SwapChains.TAsphyreSwapChains.Add^Asphyre.SwapChains.TAsphyreSwapChains.html#Add^Adds a new rendering swap chain with the specified parameters to the end of list and returns its index.^    ^0"
s[769] = "Asphyre.SwapChains.TAsphyreSwapChains.Insert^Asphyre.SwapChains.TAsphyreSwapChains.html#Insert^Inserts a new swap chain to the end of list and returns its index.^    ^0"
s[770] = "Asphyre.SwapChains.TAsphyreSwapChains.Remove^Asphyre.SwapChains.TAsphyreSwapChains.html#Remove^Removes the swap at the specified index from the list, shifting all elements by one.^ The index should be in range of [0..(Count - 1)] range; if it is outside of valid range, this function does nothing.    ^0"
s[771] = "Asphyre.SwapChains.TAsphyreSwapChains.RemoveAll^Asphyre.SwapChains.TAsphyreSwapChains.html#RemoveAll^Removes all rendering swap chains from the list.^    ^0"
s[772] = "Asphyre.SwapChains.TAsphyreSwapChains.Count^Asphyre.SwapChains.TAsphyreSwapChains.html#Count^Number of swap chains in the list.^ ^0"
s[773] = "Asphyre.SwapChains.TAsphyreSwapChains.Device^Asphyre.SwapChains.TAsphyreSwapChains.html#Device^The pointer to a valid Asphyre device which owns this list of rendering swap chains.^ ^0"
s[774] = "Asphyre.SwapChains.TAsphyreSwapChains.Items^Asphyre.SwapChains.TAsphyreSwapChains.html#Items^Provides access to each of the rendering swap chains in the list by index, which should be in range of [0..(Count - 1)] range.^ If the index is outside of valid range, <code>Nil</code> is returned. ^0"
s[775] = "Asphyre.SwapChains.TSwapChainDesc^Asphyre.SwapChains.TSwapChainDesc.html^General description of rendering swap chain.^ ^0"
s[776] = "Asphyre.SwapChains.TSwapChainDesc.Width^Asphyre.SwapChains.TSwapChainDesc.html#Width^The width of rendering surface.^ ^0"
s[777] = "Asphyre.SwapChains.TSwapChainDesc.Height^Asphyre.SwapChains.TSwapChainDesc.html#Height^The height of rendering surface.^ ^0"
s[778] = "Asphyre.SwapChains.TSwapChainDesc.VSync^Asphyre.SwapChains.TSwapChainDesc.html#VSync^This parameter determines whether to wait for vertical retrace to provide flicker-free animations.^ ^0"
s[779] = "Asphyre.SwapChains.TSwapChainDesc.Format^Asphyre.SwapChains.TSwapChainDesc.html#Format^The desired pixel format to be used in the rendering target.^ This is a suggestion and different format may be choosen by the provider depending on hardware support. If this parameter is set to <code>apf_Unknown</code> (by default), the best possible pixel format will be used. ^0"
s[780] = "Asphyre.SwapChains.TSwapChainDesc.WindowHandle^Asphyre.SwapChains.TSwapChainDesc.html#WindowHandle^The handle to the application's main window or a control where the rendering should be made (can be another window or even a panel).^ ^0"
s[781] = "Asphyre.SwapChains.TSwapChainDesc.Multisamples^Asphyre.SwapChains.TSwapChainDesc.html#Multisamples^Number of samples to use for antialiasing.^ This is a suggestion and different value may actually be used by the provider depending on hardware support; values of zero and one are treated as no multisampling. ^0"
s[782] = "Asphyre.SwapChains.TSwapChainDesc.DepthStencil^Asphyre.SwapChains.TSwapChainDesc.html#DepthStencil^The type of depth-stencil buffer to be used with the swap chain.^ ^0"
s[783] = "Asphyre.SwapChains.PSwapChainDesc^Asphyre.SwapChains.html#PSwapChainDesc^Pointer to <a class=\"normal\"  href=\"Asphyre.SwapChains.TSwapChainDesc.html\">TSwapChainDesc</a> structure typically used to pass it by reference.^ ^0"
s[784] = "Asphyre.SwapChains.TDepthStencilType^Asphyre.SwapChains.html#TDepthStencilType^The type of depth and stencil buffers to be created in the swap chain.^  dstNone No depth-stencil buffer is needed.  <br> <br>  dstDepthOnly Only depth buffer is required, stencil buffer is not needed.  <br> <br>  dstDepthStencil Both depth and stencil buffers are required.  ^0"
s[785] = "Asphyre.Textures^Asphyre.Textures.html^Texture specification and general implementation common to all providers in Asphyre framework.^ ^0"
s[786] = "Asphyre.Textures.TAsphyreCustomTexture^Asphyre.Textures.TAsphyreCustomTexture.html^General texture specification, which specifies common parameters and provides basic utilities.^ ^0"
s[787] = "Asphyre.Textures.TAsphyreCustomTexture.GetResourceView^Asphyre.Textures.TAsphyreCustomTexture.html#GetResourceView^Returns the pointer to shader resource view when used in latest DX10+ providers.^    ^0"
s[788] = "Asphyre.Textures.TAsphyreCustomTexture.Initialize^Asphyre.Textures.TAsphyreCustomTexture.html#Initialize^Initializes the texture creating all provider specific resources.^ If this method succeeds, the texture can be used for rendering and the returned value is <code>True</code>. If the returned value is <code>False</code>, it means that the texture initialization failed and configuration parameters need to be revised.    ^0"
s[789] = "Asphyre.Textures.TAsphyreCustomTexture.LogicalToPixel^Asphyre.Textures.TAsphyreCustomTexture.html#LogicalToPixel^Converts 2D logic texture coordinates in range of [0..1] to pixel coordinates.^    ^0"
s[790] = "Asphyre.Textures.TAsphyreCustomTexture.PixelToLogical^Asphyre.Textures.TAsphyreCustomTexture.html#PixelToLogical^Converts 2D integer pixel coordinates to their logical representation provided in range of [0..1].^    ^0"
s[791] = "Asphyre.Textures.TAsphyreCustomTexture.PixelToLogical^Asphyre.Textures.TAsphyreCustomTexture.html#PixelToLogical^Converts 2D floating-point pixel coordinates to their logical representation provided in range of [0..1].^    ^0"
s[792] = "Asphyre.Textures.TAsphyreCustomTexture.Bind^Asphyre.Textures.TAsphyreCustomTexture.html#Bind^Binds the texture to the given stage index in DX9- and OGL providers.^    ^0"
s[793] = "Asphyre.Textures.TAsphyreCustomTexture.Finalize^Asphyre.Textures.TAsphyreCustomTexture.html#Finalize^Finalizes the texture releasing all provider specific resources.^    ^0"
s[794] = "Asphyre.Textures.TAsphyreCustomTexture.UpdateMipmaps^Asphyre.Textures.TAsphyreCustomTexture.html#UpdateMipmaps^Updates all mipmap images contained in the texture.^ This should only be used when <a class=\"normal\"  href=\"Asphyre.Textures.TAsphyreCustomTexture.html#Mipmapping\">Mipmapping</a> is set to <code>True</code>.    ^0"
s[795] = "Asphyre.Textures.TAsphyreCustomTexture.Active^Asphyre.Textures.TAsphyreCustomTexture.html#Active^Indicates whether the texture has been created and initialized properly.^ ^0"
s[796] = "Asphyre.Textures.TAsphyreCustomTexture.BytesPerPixel^Asphyre.Textures.TAsphyreCustomTexture.html#BytesPerPixel^Indicates how many bytes each pixel in texture occupies.^ ^0"
s[797] = "Asphyre.Textures.TAsphyreCustomTexture.Format^Asphyre.Textures.TAsphyreCustomTexture.html#Format^The pixel format of the texture's surface and its mipmap levels.^ ^0"
s[798] = "Asphyre.Textures.TAsphyreCustomTexture.Height^Asphyre.Textures.TAsphyreCustomTexture.html#Height^The height of texture's surface or first mipmap level.^ ^0"
s[799] = "Asphyre.Textures.TAsphyreCustomTexture.Mipmapping^Asphyre.Textures.TAsphyreCustomTexture.html#Mipmapping^Determines whether mipmapping should be used for this texture.^ If this parameter is set to <code>True</code>, a full set of mipmap levels will be used in the texture and handled by its specific provider implementation. Mipmapping is used when the texture is drawn in significantly smaller sizes to improve visual quality of the displayed image. ^0"
s[800] = "Asphyre.Textures.TAsphyreCustomTexture.Width^Asphyre.Textures.TAsphyreCustomTexture.html#Width^The width of texture's surface or first mipmap level.^ ^0"
s[801] = "Asphyre.Textures.TAsphyreLockableTexture^Asphyre.Textures.TAsphyreLockableTexture.html^Lockable texture specification where full support is provided for direct access to texture pixel data.^ This texture can typically be loaded from disk and can have its pixels modified while the application is running. This is the most common type of textures used in Asphyre framework. ^0"
s[802] = "Asphyre.Textures.TAsphyreLockableTexture.Lock^Asphyre.Textures.TAsphyreLockableTexture.html#Lock^Provides access to the raw texture's pixel data.^ If mipmapping is enabled, this gives access to the top-level mipmap (other mipmaps will be updated automatically). After accessing the texture's pixel data it is necessary to call <a class=\"normal\"  href=\"Asphyre.Textures.TAsphyreLockableTexture.html#Unlock\">Unlock</a>.     Rect The rectangle inside the texture that will be updated. For dynamic textures this rectangle should cover the entire texture in some providers. Bits In this parameter the pointer to the top-left pixel is provided within the specified rectangle. If the method fails, <code>Nil</code> is returned. Pitch The number of bytes that each scanline occupies in the texture. This value can be used for accessing individual rows when accessing pixel data. If the method fails, zero is returned.  ^0"
s[803] = "Asphyre.Textures.TAsphyreLockableTexture.Unlock^Asphyre.Textures.TAsphyreLockableTexture.html#Unlock^Finishes accessing texture's pixel data.^ If mipmapping is enabled, other mipmap levels are updated automatically.    ^0"
s[804] = "Asphyre.Textures.TAsphyreLockableTexture.DynamicTexture^Asphyre.Textures.TAsphyreLockableTexture.html#DynamicTexture^Determines whether the texture will be used for frequent access and updates.^ This is useful for textures that are modified at least once per rendering frame. ^0"
s[805] = "Asphyre.Textures.TAsphyreLockableTexture.Pixels^Asphyre.Textures.TAsphyreLockableTexture.html#Pixels^This property provides direct access to texture's pixels.^ The pixel values are handled in 32-bit RGBA pixel format (<code>apf_A8R8G8B8</code>. If the actual pixel format used in the texture is different, the conversion is done automatically. In some providers using this property may induce significant performance hit, especially if mipmapping is enabled. For performance-critical applications it is better to get access to all texture pixels at once using <a class=\"normal\"  href=\"Asphyre.Textures.TAsphyreLockableTexture.html#Lock\">Lock</a> and <a class=\"normal\"  href=\"Asphyre.Textures.TAsphyreLockableTexture.html#Unlock\">Unlock</a> methods instead. ^0"
s[806] = "Asphyre.Textures.TAsphyreRenderTargetTexture^Asphyre.Textures.TAsphyreRenderTargetTexture.html^Render target texture specification which supports drawing the entire scene directly on the texture.^ This type of texture may not be supported on some providers. It can be used for advanced multi-pass rendering effects. ^0"
s[807] = "Asphyre.Textures.TAsphyreRenderTargetTexture.DepthStencil^Asphyre.Textures.TAsphyreRenderTargetTexture.html#DepthStencil^Determines whether depth-stencil buffer should be created and used with this texture.^ ^0"
s[808] = "Asphyre.Textures.TAsphyreRenderTargetTexture.Multisamples^Asphyre.Textures.TAsphyreRenderTargetTexture.html#Multisamples^Determines the number of samples used for antialiasing.^ This parameter is supported only on the newest DX10+ providers. ^0"
s[809] = "Asphyre.Timing^Asphyre.Timing.html^High accuracy timing and sleep routines that can be used on different platforms including Win32, Win64 and Mac OS.^ ^0"
s[810] = "Asphyre.Timing.TAsphyreTiming^Asphyre.Timing.TAsphyreTiming.html^High accuracy timing and sleep implementation that can be used on different platforms including Win32, Win64 and Mac OS.^ ^0"
s[811] = "Asphyre.Timing.TAsphyreTiming.GetTickCount^Asphyre.Timing.TAsphyreTiming.html#GetTickCount^Returns the current timer counter represented as 32-bit unsigned integer.^ The resulting value is specified in milliseconds. The value should only be used for calculating differences because it can wrap (from very high positive value back to zero) after prolonged time intervals. The wrapping usually occurs upon reaching High(Cardinal) but depending on each individual platform, it can also occur earlier.    ^0"
s[812] = "Asphyre.Timing.TAsphyreTiming.GetTimeValue^Asphyre.Timing.TAsphyreTiming.html#GetTimeValue^Returns the current timer counter represented as 64-bit floating-point number.^ The resulting value is specified in milliseconds and fractions of thereof. The value should only be used for calculating differences because it can wrap (from very high positive value back to zero or even some negative value) after prolonged time intervals.    ^0"
s[813] = "Asphyre.Timing.TAsphyreTiming.Sleep^Asphyre.Timing.TAsphyreTiming.html#Sleep^Causes the calling thread to sleep for a given number of milliseconds.^ The sleep can actually be interrupted under certain conditions (such as when a message is sent to the caller's thread).    ^0"
s[814] = "Asphyre.Timing.TAsphyreTiming.Mode^Asphyre.Timing.TAsphyreTiming.html#Mode^The timing mode at which the component currently operates.^ ^0"
s[815] = "Asphyre.Timing.TAsphyreTimingMode^Asphyre.Timing.html#TAsphyreTimingMode^The timing mode that is currently being used by <a class=\"normal\"  href=\"Asphyre.Timing.TAsphyreTiming.html\">TAsphyreTiming</a>.^ It is typically chosen the first time one of the routines is called and remains unchanged during the lifetime of application.  atmNotStarted The timing operations have not yet started.  One of the timing functions need to be called for this state to change. <br> <br>  atmLowPrecision The timing operations are running in low-precision mode that may degrade the quality of operations.  This means that the system has no high precision timer available. <br> <br>  atmHighPrecision The timing operations are running in high-precision mode providing the best possible timer resolution.  The actual resolution is hardware and platform dependent and can vary on different configurations. ^0"
s[816] = "Asphyre.Timing.Timing^Asphyre.Timing.html#Timing^A running instance of <a class=\"normal\"  href=\"Asphyre.Timing.TAsphyreTiming.html\">TAsphyreTiming</a> that is created when the application is executed and freed upon termination; therefore, this class can be used with its timing functions without having to explicitly create it elsewhere.^ ^0"
s[817] = "Asphyre.TypeDef^Asphyre.TypeDef.html^General integer and floating-point types optimized for each platform that are used throughout the entire framework.^ ^0"
s[818] = "Asphyre.TypeDef.FreeNullMem^Asphyre.TypeDef.html#FreeNullMem^Calls FreeMem for the given value and then sets the value to <code>Nil</code>.^    ^0"
s[819] = "Asphyre.TypeDef.PopFPUState^Asphyre.TypeDef.html#PopFPUState^Restores the FPU state stored that was previously added to the stack.^ If the stack is empty, this function does nothing.    ^0"
s[820] = "Asphyre.TypeDef.PushClearFPUState^Asphyre.TypeDef.html#PushClearFPUState^Adds the current FPU state to the stack and clears FPU state so that all FPU exceptions are disabled.^ If the stack is full, this function still disables FPU exceptions without saving original FPU state.    ^0"
s[821] = "Asphyre.TypeDef.PushFPUState^Asphyre.TypeDef.html#PushFPUState^Adds the current FPU state to the stack.^ If the stack is full, this function does nothing.    ^0"
s[822] = "Asphyre.TypeDef.PPreciseFloat^Asphyre.TypeDef.html#PPreciseFloat^This type is used to pass <a class=\"normal\"  href=\"Asphyre.TypeDef.html#PreciseFloat\">PreciseFloat</a> by reference.^ ^0"
s[823] = "Asphyre.TypeDef.PreciseFloat^Asphyre.TypeDef.html#PreciseFloat^High-precision floating-point type.^ It is typically equivalent of Double, unless target platform does not support 64-bit floats, in which case it is considered as Single. ^0"
s[824] = "Asphyre.TypeDef.PSizeFloat^Asphyre.TypeDef.html#PSizeFloat^This type is used to pass <a class=\"normal\"  href=\"Asphyre.TypeDef.html#SizeFloat\">SizeFloat</a> by reference.^ ^0"
s[825] = "Asphyre.TypeDef.PSizeInt^Asphyre.TypeDef.html#PSizeInt^This type is used to pass <a class=\"normal\"  href=\"Asphyre.TypeDef.html#SizeInt\">SizeInt</a> by reference.^ ^0"
s[826] = "Asphyre.TypeDef.PSizeUInt^Asphyre.TypeDef.html#PSizeUInt^This type is used to pass <a class=\"normal\"  href=\"Asphyre.TypeDef.html#SizeInt\">SizeInt</a> by reference.^ ^0"
s[827] = "Asphyre.TypeDef.PStdString^Asphyre.TypeDef.html#PStdString^This type is used to pass <a class=\"normal\"  href=\"Asphyre.TypeDef.html#StdString\">StdString</a> by reference.^ ^0"
s[828] = "Asphyre.TypeDef.PtrInt^Asphyre.TypeDef.html#PtrInt^Special signed integer type that can be used for pointer arithmetic.^ ^0"
s[829] = "Asphyre.TypeDef.PtrUInt^Asphyre.TypeDef.html#PtrUInt^Special unsigned integer type that can be used for pointer arithmetic.^ ^0"
s[830] = "Asphyre.TypeDef.PUniChar^Asphyre.TypeDef.html#PUniChar^This type is used to pass <a class=\"normal\"  href=\"Asphyre.TypeDef.html#UniChar\">UniChar</a> by reference.^ ^0"
s[831] = "Asphyre.TypeDef.PUniString^Asphyre.TypeDef.html#PUniString^This type is used to pass <a class=\"normal\"  href=\"Asphyre.TypeDef.html#UniString\">UniString</a> by reference.^ ^0"
s[832] = "Asphyre.TypeDef.SizeFloat^Asphyre.TypeDef.html#SizeFloat^General floating-point type.^ On 64-bit platform it is an equivalent of <i>Double</i> for better real-time performance, while on 32-bit systems it is an equivalent of <i>Single</i>. ^0"
s[833] = "Asphyre.TypeDef.SizeInt^Asphyre.TypeDef.html#SizeInt^General-purpose signed integer type.^ ^0"
s[834] = "Asphyre.TypeDef.SizeUInt^Asphyre.TypeDef.html#SizeUInt^General-purpose unsigned integer type.^ ^0"
s[835] = "Asphyre.TypeDef.StdString^Asphyre.TypeDef.html#StdString^Standard string type that is compatible with most Delphi and/or FreePascal functions that is version dependant.^ In latest Delphi versions it is considered Unicode, while older versions and FreePascal consider it AnsiString. ^0"
s[836] = "Asphyre.TypeDef.UniChar^Asphyre.TypeDef.html#UniChar^General-purpose Unicode character type.^ ^0"
s[837] = "Asphyre.TypeDef.UniString^Asphyre.TypeDef.html#UniString^General-purpose Unicode string type.^ ^0"
s[838] = "Asphyre.TypeDef.AsphyreClassInstances^Asphyre.TypeDef.html#AsphyreClassInstances^Indicates how many total Asphyre instances are currently created.^ This can be used to debug any memory leaks, especially on systems, where automatic reference counting is enabled. ^0"
s[839] = "Asphyre.Types^Asphyre.Types.html^Essential types, constants and functions that work with colors, pixels and rectangles that are used throughout the entire framework.^ ^0"
s[840] = "Asphyre.Types.TYCHiqColor^Asphyre.Types.TYCHiqColor.html^Color defined in a cylindrical variant of YIQ color space as described in &quot;An alternative color space for color selection and image manipulation&quot;, 2011, by Yuriy Kotsarenko et al.^ ^0"
s[841] = "Asphyre.Types.TYCHiqColor.y^Asphyre.Types.TYCHiqColor.html#y^Luminance (related to perceived brightness).^ ^0"
s[842] = "Asphyre.Types.TYCHiqColor.C^Asphyre.Types.TYCHiqColor.html#C^Chroma (related somewhat to &quot;purity&quot; of the color).^ ^0"
s[843] = "Asphyre.Types.TYCHiqColor.h^Asphyre.Types.TYCHiqColor.html#h^Hue (in radians).^ ^0"
s[844] = "Asphyre.Types.TYCHiqColor.a^Asphyre.Types.TYCHiqColor.html#a^Alpha (transparency).^ ^0"
s[845] = "Asphyre.Types.TYIQColor^Asphyre.Types.TYIQColor.html^Color defined in NTSC transmission YIQ color space as chroma, luminance and alpha-channel, which can be useful for manipulating color shades.^ ^0"
s[846] = "Asphyre.Types.TYIQColor.y^Asphyre.Types.TYIQColor.html#y^Luminance (related to perceived brightness).^ ^0"
s[847] = "Asphyre.Types.TYIQColor.i^Asphyre.Types.TYIQColor.html#i^Chroma (concurrently describes color hue).^ ^0"
s[848] = "Asphyre.Types.TYIQColor.q^Asphyre.Types.TYIQColor.html#q^Chroma (concurrently describes color hue).^ ^0"
s[849] = "Asphyre.Types.TYIQColor.a^Asphyre.Types.TYIQColor.html#a^Alpha (transparency).^ ^0"
s[850] = "Asphyre.Types.AsphyrePixelFormatBits^Asphyre.Types.html#AsphyrePixelFormatBits^This constant has values defined for every possible combination of <a class=\"normal\"  href=\"Asphyre.Types.html#TAsphyrePixelFormat\">TAsphyrePixelFormat</a> and indicates the total number of bits used for each particular pixel format.^ ^0"
s[851] = "Asphyre.Types.clBlack1^Asphyre.Types.html#clBlack1^Black Color individual constant.^ It can be used in certain circumstances, for instance, to draw a shadow of the image. ^0"
s[852] = "Asphyre.Types.clBlack2^Asphyre.Types.html#clBlack2^Black Color vertical gradient constant.^ It can be used in certain circumstances, for instance, to draw a shadow of the image. ^0"
s[853] = "Asphyre.Types.clBlack4^Asphyre.Types.html#clBlack4^Black Color rectangle gradient constant.^ It can be used in certain circumstances, for instance, to draw a shadow of the image. ^0"
s[854] = "Asphyre.Types.clOpaque1^Asphyre.Types.html#clOpaque1^Opaque Color individual constant.^ This one can be used in certain cases where the color of the image is to preserved but the result should be completely transparent. ^0"
s[855] = "Asphyre.Types.clOpaque2^Asphyre.Types.html#clOpaque2^Opaque Color vertical gradient constant.^ This one can be used in certain cases where the color of the image is to preserved but the result should be completely transparent. ^0"
s[856] = "Asphyre.Types.clOpaque4^Asphyre.Types.html#clOpaque4^Opaque Color rectangle gradient constant.^ This one can be used in certain cases where the color of the image is to preserved but the result should be completely transparent. ^0"
s[857] = "Asphyre.Types.clUnknown1^Asphyre.Types.html#clUnknown1^Unknown Color individual constant.^ It can be used in some cases to specify that no color is present or required, or to clear the rendering buffer. ^0"
s[858] = "Asphyre.Types.clUnknown2^Asphyre.Types.html#clUnknown2^Unknown Color vertical gradient constant.^ It can be used in some cases to specify that no color is present or required. ^0"
s[859] = "Asphyre.Types.clUnknown4^Asphyre.Types.html#clUnknown4^Unknown Color rectangle gradient constant.^ It can be used in some cases to specify that no color is present or required. ^0"
s[860] = "Asphyre.Types.clWhite1^Asphyre.Types.html#clWhite1^White Color individual constant.^ In some cases it can be used when no color is to be specified. ^0"
s[861] = "Asphyre.Types.clWhite2^Asphyre.Types.html#clWhite2^White Color vertical gradient constant.^ In some cases it can be used when no color is to be specified. ^0"
s[862] = "Asphyre.Types.clWhite4^Asphyre.Types.html#clWhite4^White Color rectangle gradient constant.^ In some cases it can be used when no color is to be specified. ^0"
s[863] = "Asphyre.Types.TexFull4^Asphyre.Types.html#TexFull4^This constant can be used in texture rendering methods which require input texture coordinates.^ In this case, the coordinates are specified to cover the entire texture. ^0"
s[864] = "Asphyre.Types.AddPixels^Asphyre.Types.html#AddPixels^Adds two 32-bit RGBA color values together clamping the resulting values if necessary.^    ^0"
s[865] = "Asphyre.Types.AvgFourPixels^Asphyre.Types.html#AvgFourPixels^Computes the average of four given 32-bit RGBA color values.^    ^0"
s[866] = "Asphyre.Types.AvgPixels^Asphyre.Types.html#AvgPixels^Computes the average of two given 32-bit RGBA color values.^    ^0"
s[867] = "Asphyre.Types.AvgSixPixels^Asphyre.Types.html#AvgSixPixels^Computes the average of six given 32-bit RGBA color values.^    ^0"
s[868] = "Asphyre.Types.BlendPixels^Asphyre.Types.html#BlendPixels^Computes alpha-blending for a pair of 32-bit RGBA colors values.^ <i>Alpha</i> can be in [0..255] range.    ^0"
s[869] = "Asphyre.Types.cAdjustLuma1^Asphyre.Types.html#cAdjustLuma1^Creates 32-bit RGBA color from the given 32-bit RGBA color having its luma adjusted by the given displacement.^ The adjustment is made in YIQ color space and the resulting color is properly clamped to have all its components within valid range so no wrapping/overlapping occurs.    ^0"
s[870] = "Asphyre.Types.cAdjustLuma2^Asphyre.Types.html#cAdjustLuma2^Creates 2-color 32-bit RGBA vertical gradient from another gradient, adjusting luma of each color value by the given displacement.^ The adjustment is made in YIQ color space and the resulting colors are properly clamped to have all their components within valid range so no wrapping/overlapping occurs.    ^0"
s[871] = "Asphyre.Types.cAdjustLuma4^Asphyre.Types.html#cAdjustLuma4^Creates 4-color gradient from another 4-color gradient adjusting luma by the given displacement.^ The adjustment is made in YIQ color space and the resulting colors are properly clamped to have all their components within valid range so no wrapping/overlapping occurs.    ^0"
s[872] = "Asphyre.Types.cAlpha1^Asphyre.Types.html#cAlpha1^Creates 32-bit RGBA color with the specified alpha-channel and each of red, green and blue components set to 255.^    ^0"
s[873] = "Asphyre.Types.cAlpha1f^Asphyre.Types.html#cAlpha1f^Creates 32-bit RGBA color with alpha-channel specified by the given coefficient (multiplied by 255) and the rest of components set to 255.^    ^0"
s[874] = "Asphyre.Types.cAlpha2^Asphyre.Types.html#cAlpha2^Creates 2-color 32-bit RGBA vertical gradient where each of the colors have their alpha-channel set to the specified values and the components of red, green and blue set to 255.^    ^0"
s[875] = "Asphyre.Types.cAlpha2^Asphyre.Types.html#cAlpha2^Creates 2-color 32-bit RGBA vertical gradient where both colors have their alpha-channel set to the specified value and the components of red, green and blue set to 255.^    ^0"
s[876] = "Asphyre.Types.cAlpha4^Asphyre.Types.html#cAlpha4^Creates 4-color gradient where each color has its alpha-channel set to each of the specified values with the rest of components set to 255.^    ^0"
s[877] = "Asphyre.Types.cAlpha4^Asphyre.Types.html#cAlpha4^Creates 4-color gradient where each color has its alpha-channel set to the same specified value with the rest of components set to 255.^    ^0"
s[878] = "Asphyre.Types.cAlpha4f^Asphyre.Types.html#cAlpha4f^Creates 4-color gradient where all colors has their alpha-channel set to the given coefficient (multiplied by 255) with the rest of components set to 255.^    ^0"
s[879] = "Asphyre.Types.CatmullRom^Asphyre.Types.html#CatmullRom^Calculates the resulting interpolated value from the given four vertices and the <i>Theta</i> parameter, which must be specified in [0..1] range.^ The interpolation uses Catmull-Rom spline.    ^0"
s[880] = "Asphyre.Types.cColor2^Asphyre.Types.html#cColor2^Creates 2-color 32-bit RGBA vertical gradient from the specified pair of colors values.^    ^0"
s[881] = "Asphyre.Types.cColor2^Asphyre.Types.html#cColor2^Creates 2-color 32-bit RGBA vertical gradient where both colors are copied from the specified color value.^    ^0"
s[882] = "Asphyre.Types.cColor4^Asphyre.Types.html#cColor4^Creates 4-color gradient where all colors are specified by the same source color.^    ^0"
s[883] = "Asphyre.Types.cColor4^Asphyre.Types.html#cColor4^Creates 4-color gradient where each color is specified individually.^    ^0"
s[884] = "Asphyre.Types.cColor4Alpha1f^Asphyre.Types.html#cColor4Alpha1f^Creates 4-color gradient from another 4-color gradient where each color has its alpha-channel multiplied by the given coefficient.^    ^0"
s[885] = "Asphyre.Types.cColor4f2^Asphyre.Types.html#cColor4f2^Creates 4-color gradient where the first pair of colors specified by the first color value and the second pair of colors specified by the second color value.^ All four colors have their alpha-channel multiplied by the given coefficient.    ^0"
s[886] = "Asphyre.Types.cColorAlpha1^Asphyre.Types.html#cColorAlpha1^Creates 32-bit RGBA color with the specified color value having its alpha-channel multiplied by the specified coefficient and divided by 255.^    ^0"
s[887] = "Asphyre.Types.cColorAlpha1f^Asphyre.Types.html#cColorAlpha1f^Creates 32-bit RGBA color where the specified color value has its alpha-channel multiplied by the given coefficient.^    ^0"
s[888] = "Asphyre.Types.cColorAlpha2^Asphyre.Types.html#cColorAlpha2^Creates 2-color 32-bit RGBA vertical gradient where both colors are specified by the combination of 32-bit RGBA color and alpha-channel value.^ The alpha-channel of the specified color is multiplied by the alpha-channel value and divided by 255.    ^0"
s[889] = "Asphyre.Types.cColorAlpha2^Asphyre.Types.html#cColorAlpha2^Creates 2-color 32-bit RGBA vertical gradient where each of the colors is specified by combination of color value and alpha-channel coefficient.^ The alpha-channel of each specified color value is multiplied by the alpha-channel coefficient and divided by 255.    ^0"
s[890] = "Asphyre.Types.cColorAlpha2of^Asphyre.Types.html#cColorAlpha2of^Creates 2-color 32-bit RGBA vertical gradient from another gradient, multiplying alpha-channel of both color values by the specified coefficient.^    ^0"
s[891] = "Asphyre.Types.cColorAlpha4^Asphyre.Types.html#cColorAlpha4^Creates 4-color gradient where all colors are specified by one combination of 32-bit RGBA color and alpha-value.^ The specified color has its alpha-channel multiplied by the alpha value and divided by 255.    ^0"
s[892] = "Asphyre.Types.cColorAlpha4^Asphyre.Types.html#cColorAlpha4^Creates 4-color gradient where each of the colors is specified by the corresponding combination of 32-bit RGBA color and alpha-value.^ Each of the specified colors has its alpha-channel multiplied by the corresponding alpha value and divided by 255.    ^0"
s[893] = "Asphyre.Types.cColorGrayAlpha1^Asphyre.Types.html#cColorGrayAlpha1^Creates 32-bit RGBA color where the original color value has its components multiplied by the given grayscale value and alpha-channel multiplied by the specified coefficient, and all components divided by 255.^    ^0"
s[894] = "Asphyre.Types.cColorGrayAlpha4^Asphyre.Types.html#cColorGrayAlpha4^Creates 4-color gradient where all colors are specified by one combination of 32-bit RGBA color, grayscale and alpha values.^ The specified color has its red, green and blue values multiplied by grayscale value, alpha-channel multiplied by alpha value, and then all components divided by 255.    ^0"
s[895] = "Asphyre.Types.cColorGrayAlpha4^Asphyre.Types.html#cColorGrayAlpha4^Creates 4-color gradient where each of the colors is specified by the corresponding combination of 32-bit RGBA color, grayscale and alpha values.^ In each combination, the specified color has its red, green and blue values multiplied by the grayscale value, alpha-channel multiplied by the alpha value, and then all components divided by 255.    ^0"
s[896] = "Asphyre.Types.CeilPowerOfTwo^Asphyre.Types.html#CeilPowerOfTwo^Returns the least power of two greater or equal to the specified value.^    ^0"
s[897] = "Asphyre.Types.cGetAlpha1^Asphyre.Types.html#cGetAlpha1^Returns alpha-channel value from the specified 32-bit RGBA color.^    ^0"
s[898] = "Asphyre.Types.cGetMaxAlpha2^Asphyre.Types.html#cGetMaxAlpha2^Returns the maximum of two alpha-channel values from the given 2-color 32-bit RGBA vertical gradient.^    ^0"
s[899] = "Asphyre.Types.cGetMaxAlpha4^Asphyre.Types.html#cGetMaxAlpha4^Returns the maximum of four alpha-channel values taken from colors in the given 4-color gradient.^    ^0"
s[900] = "Asphyre.Types.cGray1^Asphyre.Types.html#cGray1^Creates 32-bit RGBA color using the specified grayscale value with alpha-channel set to 255.^    ^0"
s[901] = "Asphyre.Types.cGray2^Asphyre.Types.html#cGray2^Creates 2-color 32-bit RGBA vertical gradient where both colors have their components of red, green and blue match the grayscale value, and alpha-channel set to 255.^    ^0"
s[902] = "Asphyre.Types.cGray2^Asphyre.Types.html#cGray2^Creates 2-color 32-bit RGBA vertical gradient where each of the colors have their components of red, green and blue match the specified grayscale values, and alpha-channel set to 255.^    ^0"
s[903] = "Asphyre.Types.cGray4^Asphyre.Types.html#cGray4^Creates 4-color gradient where all colors have their individual components of red, green and blue set to the given grayscale value, and alpha-channel to 255.^    ^0"
s[904] = "Asphyre.Types.cGray4^Asphyre.Types.html#cGray4^Creates 4-color gradient where each color has its individual components of red, green and blue set to each of the given grayscale values, and alpha-channel to 255.^    ^0"
s[905] = "Asphyre.Types.cGrayAlpha1^Asphyre.Types.html#cGrayAlpha1^Creates 32-bit RGBA color using the specified grayscale value and required alpha-channel value.^    ^0"
s[906] = "Asphyre.Types.cGrayAlpha4^Asphyre.Types.html#cGrayAlpha4^Creates 4-color gradient where each color has its individual components of red, green and blue set to the corresponding grayscale value, and alpha-channel set to the corresponding alpha value.^    ^0"
s[907] = "Asphyre.Types.cGrayAlpha4^Asphyre.Types.html#cGrayAlpha4^Creates 4-color gradient where each color has its individual components of red, green and blue set to the same grayscale value, and alpha-channel set to the same alpha value.^    ^0"
s[908] = "Asphyre.Types.cRGB1^Asphyre.Types.html#cRGB1^Creates 32-bit RGBA color using the specified individual components for red, green, blue and alpha channel.^    ^0"
s[909] = "Asphyre.Types.cRGB2^Asphyre.Types.html#cRGB2^Creates 2-color 32-bit RGBA vertical gradient where both colors are specified from the same components of red, green, blue and alpha-channel.^    ^0"
s[910] = "Asphyre.Types.cRGB2^Asphyre.Types.html#cRGB2^Creates 2-color 32-bit RGBA vertical gradient where each of the colors is specified by individual components of red, green, blue and alpha-channel.^    ^0"
s[911] = "Asphyre.Types.cRGB4^Asphyre.Types.html#cRGB4^Creates 4-color gradient where the first two colors are specified by the first combination of individual components and the second two colors specified by the second combination of individual components, effectively describing a 2-color vertical gradient.^    ^0"
s[912] = "Asphyre.Types.cRGB4^Asphyre.Types.html#cRGB4^Creates 4-color gradient where all colors are specified by the same individual components of red, green, blue and alpha-channel.^    ^0"
s[913] = "Asphyre.Types.DisplaceRB^Asphyre.Types.html#DisplaceRB^Switches red and blue channels in 32-bit RGBA color value.^    ^0"
s[914] = "Asphyre.Types.ExtractAlpha^Asphyre.Types.html#ExtractAlpha^Extracts alpha-channel from two grayscale samples.^ The sample must be rendered with the same color on two different backgrounds, preferably on black and white; the resulting colors are provided in <i>Src1</i> and <i>Src2</i>, with original backgrounds in <i>Bk1</i> and <i>Bk2</i>. The resulting alpha-channel and original color are computed and returned. This method is particularly useful for calculating alpha-channel when rendering GDI fonts or in tools that generate resulting images without providing alpha-channel (therefore rendering the same image on two backgrounds is sufficient to calculate its alpha-channel).    ^0"
s[915] = "Asphyre.Types.FloorPowerOfTwo^Asphyre.Types.html#FloorPowerOfTwo^Returns the greatest power of two lesser or equal to the specified value.^    ^0"
s[916] = "Asphyre.Types.IsPowerOfTwo^Asphyre.Types.html#IsPowerOfTwo^Returns <code>True</code> if the specified value is a power of two or <code>False</code> otherwise.^    ^0"
s[917] = "Asphyre.Types.Lerp^Asphyre.Types.html#Lerp^Calculates the resulting interpolated value from the given two depending on the <i>Theta</i> parameter, which must be specified in [0..1] range.^    ^0"
s[918] = "Asphyre.Types.LerpPixels^Asphyre.Types.html#LerpPixels^Computes alpha-blending for a pair of 32-bit RGBA colors values using floating-point approach.^ <i>Alpha</i> can be in [0..1] range. For a faster alternative, use <a class=\"normal\"  href=\"Asphyre.Types.html#BlendPixels\">BlendPixels</a>.    ^0"
s[919] = "Asphyre.Types.Max2^Asphyre.Types.html#Max2^Returns the value that is biggest among the two.^    ^0"
s[920] = "Asphyre.Types.Max3^Asphyre.Types.html#Max3^Returns the value that is biggest among the three.^    ^0"
s[921] = "Asphyre.Types.Min2^Asphyre.Types.html#Min2^Returns the value that is smallest among the two.^    ^0"
s[922] = "Asphyre.Types.Min3^Asphyre.Types.html#Min3^Returns the value that is smallest among the three.^    ^0"
s[923] = "Asphyre.Types.MinMax2^Asphyre.Types.html#MinMax2^Clamps the given value so that it always lies within the specified range.^    ^0"
s[924] = "Asphyre.Types.MoveRect^Asphyre.Types.html#MoveRect^Displaces the specified rectangle by the given offset and returns the new resulting rectangle.^    ^0"
s[925] = "Asphyre.Types.MulPixelAlpha^Asphyre.Types.html#MulPixelAlpha^Multiplies alpha-channel of the given 32-bit RGBA color value by the given coefficient using floating-point approach.^    ^0"
s[926] = "Asphyre.Types.MulPixelAlpha^Asphyre.Types.html#MulPixelAlpha^Multiplies alpha-channel of the given 32-bit RGBA color value by the given coefficient and divides the result by 255.^    ^0"
s[927] = "Asphyre.Types.MulPixels^Asphyre.Types.html#MulPixels^Multiplies two 32-bit RGBA color values together.^    ^0"
s[928] = "Asphyre.Types.OverlapRect^Asphyre.Types.html#OverlapRect^Returns <code>True</code> if the two specified rectangles overlap or <code>False</code> otherwise.^    ^0"
s[929] = "Asphyre.Types.pBounds4^Asphyre.Types.html#pBounds4^Creates 4-point rectangle with the specified top left corner and the given dimensions.^    ^0"
s[930] = "Asphyre.Types.pBounds4s^Asphyre.Types.html#pBounds4s^Creates 4-point rectangle with the specified top left corner and the given dimensions, which are scaled by the given coefficient.^    ^0"
s[931] = "Asphyre.Types.pBounds4sc^Asphyre.Types.html#pBounds4sc^Creates 4-point rectangle with the specified top left corner and the given dimensions.^ The rectangle is then scaled by the given coefficient with its center preserved.    ^0"
s[932] = "Asphyre.Types.pFlip4^Asphyre.Types.html#pFlip4^Creates 4-point rectangle from another 4-point rectangle but having top vertices exchanged with the bottom ones, effectively flipping it vertically.^    ^0"
s[933] = "Asphyre.Types.PixelToGray^Asphyre.Types.html#PixelToGray^Returns grayscale value in range of [0..255] from the given 32-bit RGBA color value.^ The alpha-channel is ignored.    ^0"
s[934] = "Asphyre.Types.PixelToGrayEx^Asphyre.Types.html#PixelToGrayEx^Returns grayscale value in range of [0..1] from the given 32-bit RGBA color value.^ The resulting value can be considered the color's <i>luma</i>. The alpha-channel is ignored.    ^0"
s[935] = "Asphyre.Types.pMirror4^Asphyre.Types.html#pMirror4^Creates 4-point rectangle from another 4-point rectangle but having left vertices exchanged with the right ones, effectively mirroring it horizontally.^    ^0"
s[936] = "Asphyre.Types.Point4^Asphyre.Types.html#Point4^Creates 4-point rectangle from each of the specified individual coordinates.^    ^0"
s[937] = "Asphyre.Types.Point4^Asphyre.Types.html#Point4^Creates 4-point rectangle from each of the specified 2D points.^    ^0"
s[938] = "Asphyre.Types.PointInRect^Asphyre.Types.html#PointInRect^Returns <code>True</code> if the given point is within the specified rectangle or <code>False</code> otherwise.^    ^0"
s[939] = "Asphyre.Types.PointInRect^Asphyre.Types.html#PointInRect^Returns <code>True</code> if the given point is within the specified rectangle or <code>False</code> otherwise.^ This function works with floating-point vector by rounding it down.    ^0"
s[940] = "Asphyre.Types.PointInTriangle^Asphyre.Types.html#PointInTriangle^Returns <code>True</code> if the specified point is inside the triangle specified by the given three vertices or <code>False</code> otherwise.^    ^0"
s[941] = "Asphyre.Types.pRect4^Asphyre.Types.html#pRect4^Creates 4-point rectangle from the given standard rectangle.^    ^0"
s[942] = "Asphyre.Types.pRotate4^Asphyre.Types.html#pRotate4^Creates 4-point rectangle specified by its dimensions.^ The rectangle is rotated and scaled around the specified middle point (assumed to be inside its dimensions) and placed in the center of the specified origin.    ^0"
s[943] = "Asphyre.Types.pRotate4c^Asphyre.Types.html#pRotate4c^Creates 4-point rectangle specified by its dimensions.^ The rectangle is rotated and scaled around its center and placed at the specified origin.    ^0"
s[944] = "Asphyre.Types.pRotate4se^Asphyre.Types.html#pRotate4se^Creates 4-point rectangle specified by its dimensions.^ The rectangle is rotated and scaled around the specified middle point (assumed to be inside its dimensions) and placed in the center of the specified origin. The difference between this method and <a class=\"normal\"  href=\"Asphyre.Types.html#pRotate4\">pRotate4</a> is that the rotation does not preserve centering of the rectangle in case where middle point is not actually located in the middle.    ^0"
s[945] = "Asphyre.Types.pShift4^Asphyre.Types.html#pShift4^Creates 4-point rectangle from another 4-point rectangle but having all vertices shifted by the specified displacement.^    ^0"
s[946] = "Asphyre.Types.RectInRect^Asphyre.Types.html#RectInRect^Returns <code>True</code> if the given rectangle is within the specified rectangle or <code>False</code> otherwise.^    ^0"
s[947] = "Asphyre.Types.RGBtoYIQ^Asphyre.Types.html#RGBtoYIQ^Converts normal RGB color value into YIQ color space.^    ^0"
s[948] = "Asphyre.Types.ShortRect^Asphyre.Types.html#ShortRect^Calculates the smaller rectangle resulting from the intersection of the given two rectangles.^    ^0"
s[949] = "Asphyre.Types.ShrinkRect^Asphyre.Types.html#ShrinkRect^Reduces the size of the specified rectangle by the given offsets on all edges.^    ^0"
s[950] = "Asphyre.Types.YCHiqColor^Asphyre.Types.html#YCHiqColor^Constructs a new value in cylindrical variant of YIQ color space.^    ^0"
s[951] = "Asphyre.Types.YCHiqToYIQ^Asphyre.Types.html#YCHiqToYIQ^Converts cylindrical YIQ color space value to back to cartesian variant.^    ^0"
s[952] = "Asphyre.Types.YIQColor^Asphyre.Types.html#YIQColor^Constructs a new value in YIQ color space.^    ^0"
s[953] = "Asphyre.Types.YIQtoRGB^Asphyre.Types.html#YIQtoRGB^Converts YIQ color space value back to RGB (clamping, if necessary).^    ^0"
s[954] = "Asphyre.Types.YIQtoYCHiq^Asphyre.Types.html#YIQtoYCHiq^Converts YIQ color space value to its cylindrical variant YCH.^    ^0"
s[955] = "Asphyre.Types.PAsphyrePixelFormat^Asphyre.Types.html#PAsphyrePixelFormat^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Types.html#TAsphyrePixelFormat\">TAsphyrePixelFormat</a> by reference.^ ^0"
s[956] = "Asphyre.Types.PColor2^Asphyre.Types.html#PColor2^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Types.html#TColor2\">TColor2</a> by reference.^ ^0"
s[957] = "Asphyre.Types.PColor4^Asphyre.Types.html#PColor4^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Types.html#TColor4\">TColor4</a> by reference.^ ^0"
s[958] = "Asphyre.Types.PPoint4^Asphyre.Types.html#PPoint4^This type is used to pass <a class=\"normal\"  href=\"Asphyre.Types.html#TPoint4\">TPoint4</a> by reference.^ ^0"
s[959] = "Asphyre.Types.TAsphyrePixelFormat^Asphyre.Types.html#TAsphyrePixelFormat^Defines how individual pixels and their colors are encoded in the images and textures.^ The order of letters in the constants defines the order of the encoded components; R stands for Red, G for Green, B for Blue, A for Alpha, L for Luminance and X for Not Used (or discarded). Letters such as V and U define displacement for bump-mapped textures and the rest are miscellaneous.  apf_Unknown Unknown pixel format.  It is usually returned when no valid pixel format is available. In some cases, it can be specified to indicate that the format should be selected by default or automatically. <br> <br>  apf_R8G8B8 24-bit RGB pixel format.  This format can be used for storage and it is unsuitable for rendering both on <i>DirectX</i> and <i>OpenGL</i>. <br> <br>  apf_A8R8G8B8 32-bit RGBA pixel format.  The most commonly used pixel format for storing and loading textures and images. <br> <br>  apf_X8R8G8B8 32-bit RGB pixel format that has no alpha-channel.  Should be used for images and textures that have no transparency information in them. <br> <br>  apf_R5G6B5 16-bit RGB pixel format.  This format can be used as an alternative to A8R8G8B8 in cases where memory footprint is important at the expense of visual quality. <br> <br>  apf_X1R5G5B5 16-bit RGB pixel format with only 15 bits used for actual storage.  This format was common on older hardware many years ago but today it is rarely used or even supported. <br> <br>  apf_A1R5G5B5 16-bit RGBA pixel format with one bit dedicated for alpha-channel.  This format can be used for images where a transparency mask is used; that is, the pixel is either transparent or not, typical for those images where a single color is picked to be transparent. In Asphyre, there is no need for this format because <i>AlphaTool</i> can be used to generate alpha channel for images with masked color, which then can be used with any other higher-quality format. <br> <br>  apf_A4R4G4B4 16-bit RGBA pixel format with 4 bits for each channel.  This format can be used as a replacement for <i>A8R8G8B8</i> format in cases where memory footprint is important at the expense of visual quality. <br> <br>  apf_R3G3B2 8-bit RGB pixel format.  An extreme low-quality format useful only in special circumstances and mainly for storage. It is more commonly supported on ATI video cards than on Nvidia, being really scarce on newer hardware. <br> <br>  apf_A8 8-bit alpha pixel format.  This format can be used as an alpha-channel format for applications that require low memory footprint and require transparency information only. Its usefulness, however, is severely limited because it is only supported only on newer video cards and when converted in hardware to <i>A8R8G8B8</i>, it has zero values for red, green and blue components; in other words, it is basically a black color with an alpha-channel. <br> <br>  apf_A8R3G3B2 16-bit RGBA pixel format with uneven bit distribution among the components.  It is more supported on ATI video cards and can be rarely found on newer hardware. In many cases it is more useful to use <i>A4R4G4B4</i> format. <br> <br>  apf_X4R4G4B4 16-bit RGB pixel format with 4 bits unused.  It is basically <i>A4R4G4B4</i> with alpha-channel discarded. This format is widely supported, but in typical applications it is more convenient to use <i>R5G6B5</i> instead. <br> <br>  apf_A2B10G10R10 32-bit RGBA pixel format with 10 bits used for each component of red, green and blue, being a higher-quality variant of <i>A8R8G8B8</i>.  It is more commonly supported on some video cards than its more practical cousin <i>A2R10G10B10</i>. <br> <br>  apf_G16R16 32-bit pixel format that has only green and red components 16 bits each.  This format is more useful for shaders where only one or two components are needed but with extra resolution.. <br> <br>  apf_A2R10G10B10 32-bit RGBA pixel format with 10 bits used for each component of red, green and blue, with only 2 bits dedicated to alpha channel.  <br> <br>  apf_A16B16G16R16 64-bit RGBA pixel format with each channel having 16 bits.  <br> <br>  apf_L8 8-bit luminance pixel format.  This format can be used for grayscale images and textures. <br> <br>  apf_A8L8 16-bit luminance pixel format.  One of the best formats to be used with bitmap fonts, which is also widely supported. <br> <br>  apf_A4L4 8-bit luminance pixel format.  This format can be used as a low quality replacement for <i>A8L8</i> to represent bitmap fonts. <br> <br>  apf_L16 16-bit luminance pixel format that can be used to represent high-quality grayscale images and textures.  <br> <br>  apf_R16F 16-bit floating-point pixel format, which has only one component.  This is useful in shaders either as a render target or as a data source. <br> <br>  apf_G16R16F 32-bit floating-point pixel format containing two components with 16 bits each.  This can be used in shaders as a data source. <br> <br>  apf_A16B16G16R16F 64-bit floating-point RGBA pixel format with each component having 16 bits.  It can be used as a special purpose texture or a render target with shaders. <br> <br>  apf_R32F 32-bit floating-point pixel format, which has only one component.  This format is typically used as render target for shadow mapping. <br> <br>  apf_G32R32F 64-bit floating-point pixel format containing two components with 32 bits each, mainly useful in shaders as a data source.  <br> <br>  apf_A32B32G32R32F 128-bit floating-point RGBA pixel format with each component having 32 bits.  It can be used as a special purpose texture or a render target with shaders. <br> <br>  apf_A8B8G8R8 32-bit BGRA pixel format.  This is similar to <i>A8R8G8B8</i> format but with red and blue components exchanged. <br> <br>  apf_X8B8G8R8 32-bit BGR pixel format that has no alpha-channel, similar to <i>X8R8G8B8</i> but with red and blue components exchanged.  <br> <br>  apf_A5L3 8-bit special purpose pixel format primarily targeted for storing bitmap fonts, having 5 bits for alpha-channel for improved transparency and only 3 bits for luminance (in case the font has shadows in it).  This can be particularly useful to save disk space but still conserve visual quality. Upon loading, this format is likely to be converted on the fly to <i>A8L8</i>, <i>A4L4</i>, <i>A8R8G8B8</i> or <i>A4R4G4B4</i>. Alternatively, this format can be used natively on DX10+ providers using special conversion in pixel shaders (see <i>CompactFonts</i> example). <br> <br>  apf_A2R2G2B2 8-bit RGBA pixel format that was originally supported by OpenGL in earlier implementations.  This format can significantly save disk space and memory consumption (if supported in hardware) but at the expense of very low visual quality. <br> <br>  apf_A5R9G9B9 32-bit special purpose RGBA pixel format that is only supported by Asphyre for storage.  It provides double resolution for red, green and blue components up to 512 levels each with 32 different levels of transparency. This format can be used for system-level applications where additional image resolution is required for higher pixel processing accuracy. <br> <br> ^0"
s[960] = "Asphyre.Types.TColor2^Asphyre.Types.html#TColor2^A combination of two colors, primarily used for displaying text with the first color being on top and the second being on bottom.^ The format for specifying colors is defined as A8R8G8B8. These values can be edited in an interactive manner with the included <i>ColorSel</i> tool. ^0"
s[961] = "Asphyre.Types.TColor4^Asphyre.Types.html#TColor4^A combination of four colors, primarily used for displaying images and rectangles with the colors corresponding to each of the vertices.^ The colors are specified on clockwise order: top-left, top-right, bottom-right and bottom-left. The format for specifying colors is defined as A8R8G8B8. These values can be edited in an interactive manner with the included <i>ColorSel</i> tool. ^0"
s[962] = "Asphyre.Types.TPoint4^Asphyre.Types.html#TPoint4^A combination of four 2D floating-point vectors that define a rectangle, mainly used for drawing rectangular primitives and images.^ The vertices are specified on clockwise order: top-left, top-right, bottom-right and bottom-left. ^0"
s[963] = "Asphyre.Types.TResourceProcessEvent^Asphyre.Types.html#TResourceProcessEvent^Declaration of general resource-processing event that is invoked when an action is being taken for a specific resource.^     Sender Reference to the class involved in the event. SymbolName The name of the symbol that is being processed. ResName The name of the resource file associated with the symbol.  ^0"
